
Snake.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e48  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08004fe8  08004fe8  00005fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800510c  0800510c  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  0800510c  0800510c  0000610c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005114  08005114  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005114  08005114  00006114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005118  08005118  00006118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800511c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  20000068  08005184  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000554  08005184  00007554  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000100c4  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000231c  00000000  00000000  0001715c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  00019478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c7c  00000000  00000000  0001a450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e48  00000000  00000000  0001b0cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012e8c  00000000  00000000  00032f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091ad0  00000000  00000000  00045da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d7870  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ee4  00000000  00000000  000d78b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000dc798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004fd0 	.word	0x08004fd0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004fd0 	.word	0x08004fd0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;
#define SLAVE_ADDRESS_LCD 0x4E // default address

// rs is 0 for commands
void lcd_send_cmd (char cmd)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af02      	add	r7, sp, #8
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	f023 030f 	bic.w	r3, r3, #15
 8000580:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	011b      	lsls	r3, r3, #4
 8000586:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000588:	7bfb      	ldrb	r3, [r7, #15]
 800058a:	f043 030c 	orr.w	r3, r3, #12
 800058e:	b2db      	uxtb	r3, r3
 8000590:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	f043 0308 	orr.w	r3, r3, #8
 8000598:	b2db      	uxtb	r3, r3
 800059a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800059c:	7bbb      	ldrb	r3, [r7, #14]
 800059e:	f043 030c 	orr.w	r3, r3, #12
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80005a6:	7bbb      	ldrb	r3, [r7, #14]
 80005a8:	f043 0308 	orr.w	r3, r3, #8
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005b0:	f107 0208 	add.w	r2, r7, #8
 80005b4:	2364      	movs	r3, #100	@ 0x64
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	2304      	movs	r3, #4
 80005ba:	214e      	movs	r1, #78	@ 0x4e
 80005bc:	4803      	ldr	r0, [pc, #12]	@ (80005cc <lcd_send_cmd+0x5c>)
 80005be:	f001 fbff 	bl	8001dc0 <HAL_I2C_Master_Transmit>
}
 80005c2:	bf00      	nop
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000084 	.word	0x20000084

080005d0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af02      	add	r7, sp, #8
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	f023 030f 	bic.w	r3, r3, #15
 80005e0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	011b      	lsls	r3, r3, #4
 80005e6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80005e8:	7bfb      	ldrb	r3, [r7, #15]
 80005ea:	f043 030d 	orr.w	r3, r3, #13
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	f043 0309 	orr.w	r3, r3, #9
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80005fc:	7bbb      	ldrb	r3, [r7, #14]
 80005fe:	f043 030d 	orr.w	r3, r3, #13
 8000602:	b2db      	uxtb	r3, r3
 8000604:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8000606:	7bbb      	ldrb	r3, [r7, #14]
 8000608:	f043 0309 	orr.w	r3, r3, #9
 800060c:	b2db      	uxtb	r3, r3
 800060e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000610:	f107 0208 	add.w	r2, r7, #8
 8000614:	2364      	movs	r3, #100	@ 0x64
 8000616:	9300      	str	r3, [sp, #0]
 8000618:	2304      	movs	r3, #4
 800061a:	214e      	movs	r1, #78	@ 0x4e
 800061c:	4803      	ldr	r0, [pc, #12]	@ (800062c <lcd_send_data+0x5c>)
 800061e:	f001 fbcf 	bl	8001dc0 <HAL_I2C_Master_Transmit>
}
 8000622:	bf00      	nop
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000084 	.word	0x20000084

08000630 <lcd_init>:

void lcd_init (void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	// 4 bit initialization
	HAL_Delay(50);  // wait for >40ms
 8000634:	2032      	movs	r0, #50	@ 0x32
 8000636:	f000 ff7b 	bl	8001530 <HAL_Delay>
	lcd_send_cmd (0x30);
 800063a:	2030      	movs	r0, #48	@ 0x30
 800063c:	f7ff ff98 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000640:	2005      	movs	r0, #5
 8000642:	f000 ff75 	bl	8001530 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000646:	2030      	movs	r0, #48	@ 0x30
 8000648:	f7ff ff92 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800064c:	2001      	movs	r0, #1
 800064e:	f000 ff6f 	bl	8001530 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000652:	2030      	movs	r0, #48	@ 0x30
 8000654:	f7ff ff8c 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(10);
 8000658:	200a      	movs	r0, #10
 800065a:	f000 ff69 	bl	8001530 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800065e:	2020      	movs	r0, #32
 8000660:	f7ff ff86 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(10);
 8000664:	200a      	movs	r0, #10
 8000666:	f000 ff63 	bl	8001530 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800066a:	2028      	movs	r0, #40	@ 0x28
 800066c:	f7ff ff80 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(1);
 8000670:	2001      	movs	r0, #1
 8000672:	f000 ff5d 	bl	8001530 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000676:	2008      	movs	r0, #8
 8000678:	f7ff ff7a 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(1);
 800067c:	2001      	movs	r0, #1
 800067e:	f000 ff57 	bl	8001530 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000682:	2001      	movs	r0, #1
 8000684:	f7ff ff74 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(1);
 8000688:	2001      	movs	r0, #1
 800068a:	f000 ff51 	bl	8001530 <HAL_Delay>
	HAL_Delay(1);
 800068e:	2001      	movs	r0, #1
 8000690:	f000 ff4e 	bl	8001530 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000694:	2006      	movs	r0, #6
 8000696:	f7ff ff6b 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(1);
 800069a:	2001      	movs	r0, #1
 800069c:	f000 ff48 	bl	8001530 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80006a0:	200c      	movs	r0, #12
 80006a2:	f7ff ff65 	bl	8000570 <lcd_send_cmd>
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}

080006aa <lcd_cursor_pos>:

void lcd_cursor_pos (int row, int col) {
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b084      	sub	sp, #16
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	6078      	str	r0, [r7, #4]
 80006b2:	6039      	str	r1, [r7, #0]
	uint8_t address;
	if (row == 0) {
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d102      	bne.n	80006c0 <lcd_cursor_pos+0x16>
		address = col;
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	73fb      	strb	r3, [r7, #15]
 80006be:	e016      	b.n	80006ee <lcd_cursor_pos+0x44>
	}
	else if (row == 1) {
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d104      	bne.n	80006d0 <lcd_cursor_pos+0x26>
		address = 0x40 + col;
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	3340      	adds	r3, #64	@ 0x40
 80006cc:	73fb      	strb	r3, [r7, #15]
 80006ce:	e00e      	b.n	80006ee <lcd_cursor_pos+0x44>
	}
	else if (row == 2) {
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2b02      	cmp	r3, #2
 80006d4:	d104      	bne.n	80006e0 <lcd_cursor_pos+0x36>
		address = 0x14 + col;
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	3314      	adds	r3, #20
 80006dc:	73fb      	strb	r3, [r7, #15]
 80006de:	e006      	b.n	80006ee <lcd_cursor_pos+0x44>
	}
	else if (row == 3) {
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2b03      	cmp	r3, #3
 80006e4:	d10b      	bne.n	80006fe <lcd_cursor_pos+0x54>
		address = 0x54 + col;
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	3354      	adds	r3, #84	@ 0x54
 80006ec:	73fb      	strb	r3, [r7, #15]
	}
	else {
		return;
	}
	lcd_send_cmd(0x80 | address);
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff ff3a 	bl	8000570 <lcd_send_cmd>
 80006fc:	e000      	b.n	8000700 <lcd_cursor_pos+0x56>
		return;
 80006fe:	bf00      	nop
}
 8000700:	3710      	adds	r7, #16
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000706:	b580      	push	{r7, lr}
 8000708:	b082      	sub	sp, #8
 800070a:	af00      	add	r7, sp, #0
 800070c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800070e:	e006      	b.n	800071e <lcd_send_string+0x18>
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	1c5a      	adds	r2, r3, #1
 8000714:	607a      	str	r2, [r7, #4]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff ff59 	bl	80005d0 <lcd_send_data>
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d1f4      	bne.n	8000710 <lcd_send_string+0xa>
}
 8000726:	bf00      	nop
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <lcd_clear_display>:

void lcd_clear_display (void) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000736:	2080      	movs	r0, #128	@ 0x80
 8000738:	f7ff ff1a 	bl	8000570 <lcd_send_cmd>
	for (int i = 0; i < 70; i++) {
 800073c:	2300      	movs	r3, #0
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	e005      	b.n	800074e <lcd_clear_display+0x1e>
		lcd_send_data(' ');
 8000742:	2020      	movs	r0, #32
 8000744:	f7ff ff44 	bl	80005d0 <lcd_send_data>
	for (int i = 0; i < 70; i++) {
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	3301      	adds	r3, #1
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2b45      	cmp	r3, #69	@ 0x45
 8000752:	ddf6      	ble.n	8000742 <lcd_clear_display+0x12>
	}
}
 8000754:	bf00      	nop
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000766:	f000 fe71 	bl	800144c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076a:	f000 f87d 	bl	8000868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800076e:	f000 f98d 	bl	8000a8c <MX_GPIO_Init>
  MX_TIM3_Init();
 8000772:	f000 f913 	bl	800099c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000776:	f000 f95f 	bl	8000a38 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800077a:	f000 f8e1 	bl	8000940 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 800077e:	4833      	ldr	r0, [pc, #204]	@ (800084c <main+0xec>)
 8000780:	f002 fb60 	bl	8002e44 <HAL_TIM_Base_Start_IT>
  srand(time(NULL));
 8000784:	2000      	movs	r0, #0
 8000786:	f003 fba5 	bl	8003ed4 <time>
 800078a:	4602      	mov	r2, r0
 800078c:	460b      	mov	r3, r1
 800078e:	4613      	mov	r3, r2
 8000790:	4618      	mov	r0, r3
 8000792:	f003 fa05 	bl	8003ba0 <srand>
  lcd_init();
 8000796:	f7ff ff4b 	bl	8000630 <lcd_init>
  lcd_clear_display();
 800079a:	f7ff ffc9 	bl	8000730 <lcd_clear_display>

  snake.game_status = 0;
 800079e:	4b2c      	ldr	r3, [pc, #176]	@ (8000850 <main+0xf0>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //display(&snake);
	  if (snake.game_status == 0) {
 80007a6:	4b2a      	ldr	r3, [pc, #168]	@ (8000850 <main+0xf0>)
 80007a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d119      	bne.n	80007e4 <main+0x84>
		  clear_screen();
 80007b0:	f000 fbfc 	bl	8000fac <clear_screen>
		  lcd_cursor_pos(0, 0);
 80007b4:	2100      	movs	r1, #0
 80007b6:	2000      	movs	r0, #0
 80007b8:	f7ff ff77 	bl	80006aa <lcd_cursor_pos>
		  lcd_send_string("SNAKE GAME!");
 80007bc:	4825      	ldr	r0, [pc, #148]	@ (8000854 <main+0xf4>)
 80007be:	f7ff ffa2 	bl	8000706 <lcd_send_string>
		  while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13));
 80007c2:	bf00      	nop
 80007c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007c8:	4823      	ldr	r0, [pc, #140]	@ (8000858 <main+0xf8>)
 80007ca:	f001 f96b 	bl	8001aa4 <HAL_GPIO_ReadPin>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d1f7      	bne.n	80007c4 <main+0x64>
		  snake.game_status = 1;
 80007d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000850 <main+0xf0>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
		  snake_init(&snake);
 80007dc:	481c      	ldr	r0, [pc, #112]	@ (8000850 <main+0xf0>)
 80007de:	f000 fa43 	bl	8000c68 <snake_init>
 80007e2:	e7e0      	b.n	80007a6 <main+0x46>
	  }
	  else if (snake.game_status == 1) {
 80007e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000850 <main+0xf0>)
 80007e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d0db      	beq.n	80007a6 <main+0x46>
		  //generate_food(&snake);
		  //display(&snake);
	  }
	  else {
		  clear_screen();
 80007ee:	f000 fbdd 	bl	8000fac <clear_screen>
		  lcd_cursor_pos(0, 0);
 80007f2:	2100      	movs	r1, #0
 80007f4:	2000      	movs	r0, #0
 80007f6:	f7ff ff58 	bl	80006aa <lcd_cursor_pos>
		  lcd_send_string("GAME OVER!");
 80007fa:	4818      	ldr	r0, [pc, #96]	@ (800085c <main+0xfc>)
 80007fc:	f7ff ff83 	bl	8000706 <lcd_send_string>
		  lcd_cursor_pos(1, 0);
 8000800:	2100      	movs	r1, #0
 8000802:	2001      	movs	r0, #1
 8000804:	f7ff ff51 	bl	80006aa <lcd_cursor_pos>
		  lcd_send_string("SCORE: ");
 8000808:	4815      	ldr	r0, [pc, #84]	@ (8000860 <main+0x100>)
 800080a:	f7ff ff7c 	bl	8000706 <lcd_send_string>
		  lcd_cursor_pos(2, 0);
 800080e:	2100      	movs	r1, #0
 8000810:	2002      	movs	r0, #2
 8000812:	f7ff ff4a 	bl	80006aa <lcd_cursor_pos>
		  char str[10];
		  sprintf(str, "%d", snake.size);
 8000816:	4b0e      	ldr	r3, [pc, #56]	@ (8000850 <main+0xf0>)
 8000818:	f8d3 2280 	ldr.w	r2, [r3, #640]	@ 0x280
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	4911      	ldr	r1, [pc, #68]	@ (8000864 <main+0x104>)
 8000820:	4618      	mov	r0, r3
 8000822:	f003 faeb 	bl	8003dfc <siprintf>
		  lcd_send_string(str);
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff ff6c 	bl	8000706 <lcd_send_string>
		  while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13));
 800082e:	bf00      	nop
 8000830:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000834:	4808      	ldr	r0, [pc, #32]	@ (8000858 <main+0xf8>)
 8000836:	f001 f935 	bl	8001aa4 <HAL_GPIO_ReadPin>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d1f7      	bne.n	8000830 <main+0xd0>
		  snake.game_status = 0;
 8000840:	4b03      	ldr	r3, [pc, #12]	@ (8000850 <main+0xf0>)
 8000842:	2200      	movs	r2, #0
 8000844:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
	  if (snake.game_status == 0) {
 8000848:	e7ad      	b.n	80007a6 <main+0x46>
 800084a:	bf00      	nop
 800084c:	200000d8 	.word	0x200000d8
 8000850:	20000168 	.word	0x20000168
 8000854:	08004fe8 	.word	0x08004fe8
 8000858:	40020800 	.word	0x40020800
 800085c:	08004ff4 	.word	0x08004ff4
 8000860:	08005000 	.word	0x08005000
 8000864:	08005008 	.word	0x08005008

08000868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b094      	sub	sp, #80	@ 0x50
 800086c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086e:	f107 0320 	add.w	r3, r7, #32
 8000872:	2230      	movs	r2, #48	@ 0x30
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f003 fb23 	bl	8003ec2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800088c:	2300      	movs	r3, #0
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	4b29      	ldr	r3, [pc, #164]	@ (8000938 <SystemClock_Config+0xd0>)
 8000892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000894:	4a28      	ldr	r2, [pc, #160]	@ (8000938 <SystemClock_Config+0xd0>)
 8000896:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800089a:	6413      	str	r3, [r2, #64]	@ 0x40
 800089c:	4b26      	ldr	r3, [pc, #152]	@ (8000938 <SystemClock_Config+0xd0>)
 800089e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008a8:	2300      	movs	r3, #0
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	4b23      	ldr	r3, [pc, #140]	@ (800093c <SystemClock_Config+0xd4>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008b4:	4a21      	ldr	r2, [pc, #132]	@ (800093c <SystemClock_Config+0xd4>)
 80008b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008ba:	6013      	str	r3, [r2, #0]
 80008bc:	4b1f      	ldr	r3, [pc, #124]	@ (800093c <SystemClock_Config+0xd4>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008c8:	2302      	movs	r3, #2
 80008ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008cc:	2301      	movs	r3, #1
 80008ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008d0:	2310      	movs	r3, #16
 80008d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d4:	2302      	movs	r3, #2
 80008d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008d8:	2300      	movs	r3, #0
 80008da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008dc:	2310      	movs	r3, #16
 80008de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008e0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80008e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008e6:	2304      	movs	r3, #4
 80008e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008ea:	2307      	movs	r3, #7
 80008ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ee:	f107 0320 	add.w	r3, r7, #32
 80008f2:	4618      	mov	r0, r3
 80008f4:	f001 fdbe 	bl	8002474 <HAL_RCC_OscConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008fe:	f000 f9ad 	bl	8000c5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000902:	230f      	movs	r3, #15
 8000904:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000906:	2302      	movs	r3, #2
 8000908:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800090e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000912:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000914:	2300      	movs	r3, #0
 8000916:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000918:	f107 030c 	add.w	r3, r7, #12
 800091c:	2102      	movs	r1, #2
 800091e:	4618      	mov	r0, r3
 8000920:	f002 f820 	bl	8002964 <HAL_RCC_ClockConfig>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800092a:	f000 f997 	bl	8000c5c <Error_Handler>
  }
}
 800092e:	bf00      	nop
 8000930:	3750      	adds	r7, #80	@ 0x50
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800
 800093c:	40007000 	.word	0x40007000

08000940 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000944:	4b12      	ldr	r3, [pc, #72]	@ (8000990 <MX_I2C1_Init+0x50>)
 8000946:	4a13      	ldr	r2, [pc, #76]	@ (8000994 <MX_I2C1_Init+0x54>)
 8000948:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800094a:	4b11      	ldr	r3, [pc, #68]	@ (8000990 <MX_I2C1_Init+0x50>)
 800094c:	4a12      	ldr	r2, [pc, #72]	@ (8000998 <MX_I2C1_Init+0x58>)
 800094e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000950:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <MX_I2C1_Init+0x50>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000956:	4b0e      	ldr	r3, [pc, #56]	@ (8000990 <MX_I2C1_Init+0x50>)
 8000958:	2200      	movs	r2, #0
 800095a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800095c:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <MX_I2C1_Init+0x50>)
 800095e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000962:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000964:	4b0a      	ldr	r3, [pc, #40]	@ (8000990 <MX_I2C1_Init+0x50>)
 8000966:	2200      	movs	r2, #0
 8000968:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800096a:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <MX_I2C1_Init+0x50>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000970:	4b07      	ldr	r3, [pc, #28]	@ (8000990 <MX_I2C1_Init+0x50>)
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000976:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <MX_I2C1_Init+0x50>)
 8000978:	2200      	movs	r2, #0
 800097a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800097c:	4804      	ldr	r0, [pc, #16]	@ (8000990 <MX_I2C1_Init+0x50>)
 800097e:	f001 f8db 	bl	8001b38 <HAL_I2C_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000988:	f000 f968 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000084 	.word	0x20000084
 8000994:	40005400 	.word	0x40005400
 8000998:	000186a0 	.word	0x000186a0

0800099c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009a2:	f107 0308 	add.w	r3, r7, #8
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b0:	463b      	mov	r3, r7
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000a30 <MX_TIM3_Init+0x94>)
 80009ba:	4a1e      	ldr	r2, [pc, #120]	@ (8000a34 <MX_TIM3_Init+0x98>)
 80009bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 640;
 80009be:	4b1c      	ldr	r3, [pc, #112]	@ (8000a30 <MX_TIM3_Init+0x94>)
 80009c0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80009c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a30 <MX_TIM3_Init+0x94>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80009cc:	4b18      	ldr	r3, [pc, #96]	@ (8000a30 <MX_TIM3_Init+0x94>)
 80009ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d4:	4b16      	ldr	r3, [pc, #88]	@ (8000a30 <MX_TIM3_Init+0x94>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009da:	4b15      	ldr	r3, [pc, #84]	@ (8000a30 <MX_TIM3_Init+0x94>)
 80009dc:	2280      	movs	r2, #128	@ 0x80
 80009de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009e0:	4813      	ldr	r0, [pc, #76]	@ (8000a30 <MX_TIM3_Init+0x94>)
 80009e2:	f002 f9df 	bl	8002da4 <HAL_TIM_Base_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80009ec:	f000 f936 	bl	8000c5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009f6:	f107 0308 	add.w	r3, r7, #8
 80009fa:	4619      	mov	r1, r3
 80009fc:	480c      	ldr	r0, [pc, #48]	@ (8000a30 <MX_TIM3_Init+0x94>)
 80009fe:	f002 fb73 	bl	80030e8 <HAL_TIM_ConfigClockSource>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000a08:	f000 f928 	bl	8000c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a14:	463b      	mov	r3, r7
 8000a16:	4619      	mov	r1, r3
 8000a18:	4805      	ldr	r0, [pc, #20]	@ (8000a30 <MX_TIM3_Init+0x94>)
 8000a1a:	f002 fd7b 	bl	8003514 <HAL_TIMEx_MasterConfigSynchronization>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000a24:	f000 f91a 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a28:	bf00      	nop
 8000a2a:	3718      	adds	r7, #24
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	200000d8 	.word	0x200000d8
 8000a34:	40000400 	.word	0x40000400

08000a38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a3c:	4b11      	ldr	r3, [pc, #68]	@ (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a3e:	4a12      	ldr	r2, [pc, #72]	@ (8000a88 <MX_USART2_UART_Init+0x50>)
 8000a40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a42:	4b10      	ldr	r3, [pc, #64]	@ (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	@ (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a56:	4b0b      	ldr	r3, [pc, #44]	@ (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a5c:	4b09      	ldr	r3, [pc, #36]	@ (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a5e:	220c      	movs	r2, #12
 8000a60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a62:	4b08      	ldr	r3, [pc, #32]	@ (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a68:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a6e:	4805      	ldr	r0, [pc, #20]	@ (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a70:	f002 fdd2 	bl	8003618 <HAL_UART_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a7a:	f000 f8ef 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000120 	.word	0x20000120
 8000a88:	40004400 	.word	0x40004400

08000a8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08a      	sub	sp, #40	@ 0x28
 8000a90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
 8000aa0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	613b      	str	r3, [r7, #16]
 8000aa6:	4b43      	ldr	r3, [pc, #268]	@ (8000bb4 <MX_GPIO_Init+0x128>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	4a42      	ldr	r2, [pc, #264]	@ (8000bb4 <MX_GPIO_Init+0x128>)
 8000aac:	f043 0304 	orr.w	r3, r3, #4
 8000ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab2:	4b40      	ldr	r3, [pc, #256]	@ (8000bb4 <MX_GPIO_Init+0x128>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	f003 0304 	and.w	r3, r3, #4
 8000aba:	613b      	str	r3, [r7, #16]
 8000abc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	4b3c      	ldr	r3, [pc, #240]	@ (8000bb4 <MX_GPIO_Init+0x128>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	4a3b      	ldr	r2, [pc, #236]	@ (8000bb4 <MX_GPIO_Init+0x128>)
 8000ac8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ace:	4b39      	ldr	r3, [pc, #228]	@ (8000bb4 <MX_GPIO_Init+0x128>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	60bb      	str	r3, [r7, #8]
 8000ade:	4b35      	ldr	r3, [pc, #212]	@ (8000bb4 <MX_GPIO_Init+0x128>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	4a34      	ldr	r2, [pc, #208]	@ (8000bb4 <MX_GPIO_Init+0x128>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aea:	4b32      	ldr	r3, [pc, #200]	@ (8000bb4 <MX_GPIO_Init+0x128>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	4b2e      	ldr	r3, [pc, #184]	@ (8000bb4 <MX_GPIO_Init+0x128>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	4a2d      	ldr	r2, [pc, #180]	@ (8000bb4 <MX_GPIO_Init+0x128>)
 8000b00:	f043 0302 	orr.w	r3, r3, #2
 8000b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b06:	4b2b      	ldr	r3, [pc, #172]	@ (8000bb4 <MX_GPIO_Init+0x128>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	f003 0302 	and.w	r3, r3, #2
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2120      	movs	r1, #32
 8000b16:	4828      	ldr	r0, [pc, #160]	@ (8000bb8 <MX_GPIO_Init+0x12c>)
 8000b18:	f000 ffdc 	bl	8001ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b22:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	4619      	mov	r1, r3
 8000b32:	4822      	ldr	r0, [pc, #136]	@ (8000bbc <MX_GPIO_Init+0x130>)
 8000b34:	f000 fe32 	bl	800179c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b38:	2320      	movs	r3, #32
 8000b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	2300      	movs	r3, #0
 8000b46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	481a      	ldr	r0, [pc, #104]	@ (8000bb8 <MX_GPIO_Init+0x12c>)
 8000b50:	f000 fe24 	bl	800179c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b54:	2302      	movs	r3, #2
 8000b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b58:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	4815      	ldr	r0, [pc, #84]	@ (8000bc0 <MX_GPIO_Init+0x134>)
 8000b6a:	f000 fe17 	bl	800179c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000b6e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b74:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	4619      	mov	r1, r3
 8000b84:	480c      	ldr	r0, [pc, #48]	@ (8000bb8 <MX_GPIO_Init+0x12c>)
 8000b86:	f000 fe09 	bl	800179c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	2007      	movs	r0, #7
 8000b90:	f000 fdcd 	bl	800172e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000b94:	2007      	movs	r0, #7
 8000b96:	f000 fde6 	bl	8001766 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	2028      	movs	r0, #40	@ 0x28
 8000ba0:	f000 fdc5 	bl	800172e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ba4:	2028      	movs	r0, #40	@ 0x28
 8000ba6:	f000 fdde 	bl	8001766 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000baa:	bf00      	nop
 8000bac:	3728      	adds	r7, #40	@ 0x28
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40020000 	.word	0x40020000
 8000bbc:	40020800 	.word	0x40020800
 8000bc0:	40020400 	.word	0x40020400

08000bc4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a08      	ldr	r2, [pc, #32]	@ (8000bf4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d10a      	bne.n	8000bec <HAL_TIM_PeriodElapsedCallback+0x28>
		if (snake.game_status == 1) {
 8000bd6:	4b08      	ldr	r3, [pc, #32]	@ (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000bd8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d105      	bne.n	8000bec <HAL_TIM_PeriodElapsedCallback+0x28>
			snake_update(&snake);
 8000be0:	4805      	ldr	r0, [pc, #20]	@ (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000be2:	f000 f893 	bl	8000d0c <snake_update>
			display(&snake);
 8000be6:	4804      	ldr	r0, [pc, #16]	@ (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000be8:	f000 f9a6 	bl	8000f38 <display>
		}
		//display(&snake);
	}
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40000400 	.word	0x40000400
 8000bf8:	20000168 	.word	0x20000168

08000bfc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	80fb      	strh	r3, [r7, #6]
	// update the directions based on user input
	if (GPIO_Pin == GPIO_PIN_10) {
 8000c06:	88fb      	ldrh	r3, [r7, #6]
 8000c08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c0c:	d104      	bne.n	8000c18 <HAL_GPIO_EXTI_Callback+0x1c>
		snake.direction = 3; // left
 8000c0e:	4b12      	ldr	r3, [pc, #72]	@ (8000c58 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000c10:	2203      	movs	r2, #3
 8000c12:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284
		snake.direction = 0; // up
	}
	else if (GPIO_Pin == GPIO_PIN_1) {
		snake.direction = 2; // right
	}
}
 8000c16:	e018      	b.n	8000c4a <HAL_GPIO_EXTI_Callback+0x4e>
	else if (GPIO_Pin == GPIO_PIN_11) {
 8000c18:	88fb      	ldrh	r3, [r7, #6]
 8000c1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000c1e:	d104      	bne.n	8000c2a <HAL_GPIO_EXTI_Callback+0x2e>
		snake.direction = 1; // down
 8000c20:	4b0d      	ldr	r3, [pc, #52]	@ (8000c58 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284
}
 8000c28:	e00f      	b.n	8000c4a <HAL_GPIO_EXTI_Callback+0x4e>
	else if (GPIO_Pin == GPIO_PIN_12) {
 8000c2a:	88fb      	ldrh	r3, [r7, #6]
 8000c2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000c30:	d104      	bne.n	8000c3c <HAL_GPIO_EXTI_Callback+0x40>
		snake.direction = 0; // up
 8000c32:	4b09      	ldr	r3, [pc, #36]	@ (8000c58 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284
}
 8000c3a:	e006      	b.n	8000c4a <HAL_GPIO_EXTI_Callback+0x4e>
	else if (GPIO_Pin == GPIO_PIN_1) {
 8000c3c:	88fb      	ldrh	r3, [r7, #6]
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	d103      	bne.n	8000c4a <HAL_GPIO_EXTI_Callback+0x4e>
		snake.direction = 2; // right
 8000c42:	4b05      	ldr	r3, [pc, #20]	@ (8000c58 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000c44:	2202      	movs	r2, #2
 8000c46:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	20000168 	.word	0x20000168

08000c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c60:	b672      	cpsid	i
}
 8000c62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <Error_Handler+0x8>

08000c68 <snake_init>:
 */

#include "snake.h"
#include "i2c-lcd.h"

void snake_init (Snake * snake) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
	snake->coordinates[0][0] = 4;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2204      	movs	r2, #4
 8000c74:	601a      	str	r2, [r3, #0]
	snake->coordinates[0][1] = 3;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2203      	movs	r2, #3
 8000c7a:	605a      	str	r2, [r3, #4]
	for (int i = 1; i < 80; i++) {
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	e00d      	b.n	8000c9e <snake_init+0x36>
		snake->coordinates[i][0] = 0;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	697a      	ldr	r2, [r7, #20]
 8000c86:	2100      	movs	r1, #0
 8000c88:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
		snake->coordinates[i][1] = 0;
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	4413      	add	r3, r2
 8000c94:	2200      	movs	r2, #0
 8000c96:	605a      	str	r2, [r3, #4]
	for (int i = 1; i < 80; i++) {
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	617b      	str	r3, [r7, #20]
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	2b4f      	cmp	r3, #79	@ 0x4f
 8000ca2:	ddee      	ble.n	8000c82 <snake_init+0x1a>
	}
	snake->size = 1;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	f8c3 2280 	str.w	r2, [r3, #640]	@ 0x280
	snake->direction = 0;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284
	snake->food_eaten = 0;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290

	// randomly generate the first food
	int food_row = rand() % 4;
 8000cbc:	f002 ff9e 	bl	8003bfc <rand>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	425a      	negs	r2, r3
 8000cc4:	f003 0303 	and.w	r3, r3, #3
 8000cc8:	f002 0203 	and.w	r2, r2, #3
 8000ccc:	bf58      	it	pl
 8000cce:	4253      	negpl	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
	int food_col = rand() % 20;
 8000cd2:	f002 ff93 	bl	8003bfc <rand>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d08 <snake_init+0xa0>)
 8000cda:	fb83 1302 	smull	r1, r3, r3, r2
 8000cde:	10d9      	asrs	r1, r3, #3
 8000ce0:	17d3      	asrs	r3, r2, #31
 8000ce2:	1ac9      	subs	r1, r1, r3
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	440b      	add	r3, r1
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	60fb      	str	r3, [r7, #12]

	snake->food[0] = food_row;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	f8c3 2288 	str.w	r2, [r3, #648]	@ 0x288
	snake->food[1] = food_col;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	f8c3 228c 	str.w	r2, [r3, #652]	@ 0x28c
}
 8000d00:	bf00      	nop
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	66666667 	.word	0x66666667

08000d0c <snake_update>:
 * 3. check if the head has eaten the food
 * 4. generate new food if it ate
 * 5. make the length longer by 1
 * 6. check if the head has collided with the body
 */
void snake_update (Snake * snake) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b088      	sub	sp, #32
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
	// 1. change direction of the head
  // this will be used to calculate the new head position
	int head[2];
	head[0] = snake->coordinates[0][0]; // row
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	613b      	str	r3, [r7, #16]
	head[1] = snake->coordinates[0][1]; // col
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	617b      	str	r3, [r7, #20]

	switch(snake->direction){
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f8d3 3284 	ldr.w	r3, [r3, #644]	@ 0x284
 8000d26:	2b03      	cmp	r3, #3
 8000d28:	d81a      	bhi.n	8000d60 <snake_update+0x54>
 8000d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8000d30 <snake_update+0x24>)
 8000d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d30:	08000d41 	.word	0x08000d41
 8000d34:	08000d49 	.word	0x08000d49
 8000d38:	08000d51 	.word	0x08000d51
 8000d3c:	08000d59 	.word	0x08000d59
		case(0): // up
			head[0] = head[0] - 1;
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	613b      	str	r3, [r7, #16]
			break;
 8000d46:	e00b      	b.n	8000d60 <snake_update+0x54>
		case(1): // down
			head[0] = head[0] + 1;
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	613b      	str	r3, [r7, #16]
			break;
 8000d4e:	e007      	b.n	8000d60 <snake_update+0x54>
		case(2): // right
			head[1] = head[1] + 1;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	3301      	adds	r3, #1
 8000d54:	617b      	str	r3, [r7, #20]
			break;
 8000d56:	e003      	b.n	8000d60 <snake_update+0x54>
		case(3): // left
			head[1] = head[1] - 1;
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	617b      	str	r3, [r7, #20]
			break;
 8000d5e:	bf00      	nop
	}
	// 2. check if the head has gone out of the bound
	// if it goes out of bound it is game over
	if (head[0] < 0 || head[0] > 3 || head[1] < 0 || head[1] > 19) {
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	db08      	blt.n	8000d78 <snake_update+0x6c>
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	2b03      	cmp	r3, #3
 8000d6a:	dc05      	bgt.n	8000d78 <snake_update+0x6c>
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	db02      	blt.n	8000d78 <snake_update+0x6c>
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	2b13      	cmp	r3, #19
 8000d76:	dd03      	ble.n	8000d80 <snake_update+0x74>
		snake->game_status = 2; // game over
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2202      	movs	r2, #2
 8000d7c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
	}

	// 3. check if the head has eaten the food
	generate_food(snake);
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f000 f88b 	bl	8000e9c <generate_food>

	if (snake->size > 1) {
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	dd44      	ble.n	8000e1a <snake_update+0x10e>
		int length = snake->size;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 8000d96:	61bb      	str	r3, [r7, #24]
		int last_coord[2];
		last_coord[0] = snake->coordinates[length-2][0];
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	1e9a      	subs	r2, r3, #2
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000da2:	60bb      	str	r3, [r7, #8]
		last_coord[1] = snake->coordinates[length-2][1];
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	3b02      	subs	r3, #2
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	00db      	lsls	r3, r3, #3
 8000dac:	4413      	add	r3, r2
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	60fb      	str	r3, [r7, #12]

		for (int i = length-1; i >= 1; i--) {
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	3b01      	subs	r3, #1
 8000db6:	61fb      	str	r3, [r7, #28]
 8000db8:	e016      	b.n	8000de8 <snake_update+0xdc>
			snake->coordinates[i][0] = snake->coordinates[i-1][0];
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	1e5a      	subs	r2, r3, #1
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f853 1032 	ldr.w	r1, [r3, r2, lsl #3]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	69fa      	ldr	r2, [r7, #28]
 8000dc8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
			snake->coordinates[i][1] = snake->coordinates[i-1][1];
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	00db      	lsls	r3, r3, #3
 8000dd4:	4413      	add	r3, r2
 8000dd6:	685a      	ldr	r2, [r3, #4]
 8000dd8:	6879      	ldr	r1, [r7, #4]
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	440b      	add	r3, r1
 8000de0:	605a      	str	r2, [r3, #4]
		for (int i = length-1; i >= 1; i--) {
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3b01      	subs	r3, #1
 8000de6:	61fb      	str	r3, [r7, #28]
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	dce5      	bgt.n	8000dba <snake_update+0xae>
		}

		if (snake->food_eaten == 1) {
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f8d3 3290 	ldr.w	r3, [r3, #656]	@ 0x290
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d110      	bne.n	8000e1a <snake_update+0x10e>
			snake->coordinates[length-1][0] = last_coord[0];
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	1e5a      	subs	r2, r3, #1
 8000dfc:	68b9      	ldr	r1, [r7, #8]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
			snake->coordinates[length-1][1] = last_coord[1];
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	68fa      	ldr	r2, [r7, #12]
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	00db      	lsls	r3, r3, #3
 8000e0e:	440b      	add	r3, r1
 8000e10:	605a      	str	r2, [r3, #4]
			snake->food_eaten = 0;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
		}
	}

	snake->coordinates[0][0] = head[0];
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	601a      	str	r2, [r3, #0]
	snake->coordinates[0][1] = head[1];
 8000e20:	697a      	ldr	r2, [r7, #20]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	605a      	str	r2, [r3, #4]

	// 6. check if the head has collided with the body
  if (collision(snake, head[0], head[1]) == 0){
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	697a      	ldr	r2, [r7, #20]
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f000 f80b 	bl	8000e48 <collision>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d103      	bne.n	8000e40 <snake_update+0x134>
    snake->game_status = 2;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2202      	movs	r2, #2
 8000e3c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  }
}
 8000e40:	bf00      	nop
 8000e42:	3720      	adds	r7, #32
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <collision>:

int collision (Snake * snake, int row, int col) {
 8000e48:	b480      	push	{r7}
 8000e4a:	b087      	sub	sp, #28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
	for(int i = 1; i < snake->size; i++) {
 8000e54:	2301      	movs	r3, #1
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	e013      	b.n	8000e82 <collision+0x3a>
		if (row == snake->coordinates[i][0] &&
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	697a      	ldr	r2, [r7, #20]
 8000e5e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d109      	bne.n	8000e7c <collision+0x34>
		    col == snake->coordinates[i][1]){
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	00db      	lsls	r3, r3, #3
 8000e6e:	4413      	add	r3, r2
 8000e70:	685b      	ldr	r3, [r3, #4]
		if (row == snake->coordinates[i][0] &&
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d101      	bne.n	8000e7c <collision+0x34>
		    return 0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	e009      	b.n	8000e90 <collision+0x48>
	for(int i = 1; i < snake->size; i++) {
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	617b      	str	r3, [r7, #20]
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 8000e88:	697a      	ldr	r2, [r7, #20]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	dbe5      	blt.n	8000e5a <collision+0x12>
		}
	}
	return 1;
 8000e8e:	2301      	movs	r3, #1
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	371c      	adds	r7, #28
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <generate_food>:

// generate food and also check if the snake has eaten the food
void generate_food (Snake * snake) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
	// generate food if the food has been eaten
	if (snake->coordinates[0][0] == snake->food[0] && snake->coordinates[0][1] == snake->food[1]) {
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f8d3 3288 	ldr.w	r3, [r3, #648]	@ 0x288
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d13b      	bne.n	8000f2a <generate_food+0x8e>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685a      	ldr	r2, [r3, #4]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d134      	bne.n	8000f2a <generate_food+0x8e>
		int food_row, food_col;
	  do {
		  food_row = rand() % 4;
 8000ec0:	f002 fe9c 	bl	8003bfc <rand>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	425a      	negs	r2, r3
 8000ec8:	f003 0303 	and.w	r3, r3, #3
 8000ecc:	f002 0203 	and.w	r2, r2, #3
 8000ed0:	bf58      	it	pl
 8000ed2:	4253      	negpl	r3, r2
 8000ed4:	60fb      	str	r3, [r7, #12]
		  food_col = rand() % 20;
 8000ed6:	f002 fe91 	bl	8003bfc <rand>
 8000eda:	4602      	mov	r2, r0
 8000edc:	4b15      	ldr	r3, [pc, #84]	@ (8000f34 <generate_food+0x98>)
 8000ede:	fb83 1302 	smull	r1, r3, r3, r2
 8000ee2:	10d9      	asrs	r1, r3, #3
 8000ee4:	17d3      	asrs	r3, r2, #31
 8000ee6:	1ac9      	subs	r1, r1, r3
 8000ee8:	460b      	mov	r3, r1
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	440b      	add	r3, r1
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	60bb      	str	r3, [r7, #8]
		} while (collision(snake, food_row, food_col) == 0);
 8000ef4:	68ba      	ldr	r2, [r7, #8]
 8000ef6:	68f9      	ldr	r1, [r7, #12]
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f7ff ffa5 	bl	8000e48 <collision>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d0dd      	beq.n	8000ec0 <generate_food+0x24>

		snake->food[0] = food_row;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	f8c3 2288 	str.w	r2, [r3, #648]	@ 0x288
		snake->food[1] = food_col;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	f8c3 228c 	str.w	r2, [r3, #652]	@ 0x28c

		snake->food_eaten = 1;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2201      	movs	r2, #1
 8000f18:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
		snake->size++;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 8000f22:	1c5a      	adds	r2, r3, #1
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f8c3 2280 	str.w	r2, [r3, #640]	@ 0x280
	}
}
 8000f2a:	bf00      	nop
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	66666667 	.word	0x66666667

08000f38 <display>:

void display (Snake * snake) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	clear_screen();
 8000f40:	f000 f834 	bl	8000fac <clear_screen>
	// food
	lcd_cursor_pos(snake->food[0], snake->food[1]);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f8d3 2288 	ldr.w	r2, [r3, #648]	@ 0x288
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000f50:	4619      	mov	r1, r3
 8000f52:	4610      	mov	r0, r2
 8000f54:	f7ff fba9 	bl	80006aa <lcd_cursor_pos>
	lcd_send_string("-");
 8000f58:	4812      	ldr	r0, [pc, #72]	@ (8000fa4 <display+0x6c>)
 8000f5a:	f7ff fbd4 	bl	8000706 <lcd_send_string>

	// snake
	for (int i = 0; i < snake->size; i++) {
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
 8000f62:	e014      	b.n	8000f8e <display+0x56>
		int row = snake->coordinates[i][0];
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	697a      	ldr	r2, [r7, #20]
 8000f68:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000f6c:	613b      	str	r3, [r7, #16]
		int col = snake->coordinates[i][1];
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	00db      	lsls	r3, r3, #3
 8000f74:	4413      	add	r3, r2
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	60fb      	str	r3, [r7, #12]
		lcd_cursor_pos(row, col);
 8000f7a:	68f9      	ldr	r1, [r7, #12]
 8000f7c:	6938      	ldr	r0, [r7, #16]
 8000f7e:	f7ff fb94 	bl	80006aa <lcd_cursor_pos>
		lcd_send_string(".");
 8000f82:	4809      	ldr	r0, [pc, #36]	@ (8000fa8 <display+0x70>)
 8000f84:	f7ff fbbf 	bl	8000706 <lcd_send_string>
	for (int i = 0; i < snake->size; i++) {
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 8000f94:	697a      	ldr	r2, [r7, #20]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	dbe4      	blt.n	8000f64 <display+0x2c>
	}
}
 8000f9a:	bf00      	nop
 8000f9c:	bf00      	nop
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	0800500c 	.word	0x0800500c
 8000fa8:	08005010 	.word	0x08005010

08000fac <clear_screen>:

void clear_screen() {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
	lcd_clear_display();
 8000fb2:	f7ff fbbd 	bl	8000730 <lcd_clear_display>
	// for some reason, my lcd won't clear the bottom right part of the screen
	// so i have to manually send a blank space to clear them
	for (int col = 9; col <= 19; col++) {
 8000fb6:	2309      	movs	r3, #9
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	e009      	b.n	8000fd0 <clear_screen+0x24>
		lcd_cursor_pos(3, col);
 8000fbc:	6879      	ldr	r1, [r7, #4]
 8000fbe:	2003      	movs	r0, #3
 8000fc0:	f7ff fb73 	bl	80006aa <lcd_cursor_pos>
		lcd_send_data(' ');
 8000fc4:	2020      	movs	r0, #32
 8000fc6:	f7ff fb03 	bl	80005d0 <lcd_send_data>
	for (int col = 9; col <= 19; col++) {
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b13      	cmp	r3, #19
 8000fd4:	ddf2      	ble.n	8000fbc <clear_screen+0x10>
	}
}
 8000fd6:	bf00      	nop
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	4b10      	ldr	r3, [pc, #64]	@ (800102c <HAL_MspInit+0x4c>)
 8000fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fee:	4a0f      	ldr	r2, [pc, #60]	@ (800102c <HAL_MspInit+0x4c>)
 8000ff0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ff4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800102c <HAL_MspInit+0x4c>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ffa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	603b      	str	r3, [r7, #0]
 8001006:	4b09      	ldr	r3, [pc, #36]	@ (800102c <HAL_MspInit+0x4c>)
 8001008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100a:	4a08      	ldr	r2, [pc, #32]	@ (800102c <HAL_MspInit+0x4c>)
 800100c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001010:	6413      	str	r3, [r2, #64]	@ 0x40
 8001012:	4b06      	ldr	r3, [pc, #24]	@ (800102c <HAL_MspInit+0x4c>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001016:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800101a:	603b      	str	r3, [r7, #0]
 800101c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	40023800 	.word	0x40023800

08001030 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	@ 0x28
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a19      	ldr	r2, [pc, #100]	@ (80010b4 <HAL_I2C_MspInit+0x84>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d12b      	bne.n	80010aa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
 8001056:	4b18      	ldr	r3, [pc, #96]	@ (80010b8 <HAL_I2C_MspInit+0x88>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	4a17      	ldr	r2, [pc, #92]	@ (80010b8 <HAL_I2C_MspInit+0x88>)
 800105c:	f043 0302 	orr.w	r3, r3, #2
 8001060:	6313      	str	r3, [r2, #48]	@ 0x30
 8001062:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <HAL_I2C_MspInit+0x88>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800106e:	23c0      	movs	r3, #192	@ 0xc0
 8001070:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001072:	2312      	movs	r3, #18
 8001074:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107a:	2303      	movs	r3, #3
 800107c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800107e:	2304      	movs	r3, #4
 8001080:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	4619      	mov	r1, r3
 8001088:	480c      	ldr	r0, [pc, #48]	@ (80010bc <HAL_I2C_MspInit+0x8c>)
 800108a:	f000 fb87 	bl	800179c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	4b09      	ldr	r3, [pc, #36]	@ (80010b8 <HAL_I2C_MspInit+0x88>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001096:	4a08      	ldr	r2, [pc, #32]	@ (80010b8 <HAL_I2C_MspInit+0x88>)
 8001098:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800109c:	6413      	str	r3, [r2, #64]	@ 0x40
 800109e:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <HAL_I2C_MspInit+0x88>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80010aa:	bf00      	nop
 80010ac:	3728      	adds	r7, #40	@ 0x28
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40005400 	.word	0x40005400
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40020400 	.word	0x40020400

080010c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a0e      	ldr	r2, [pc, #56]	@ (8001108 <HAL_TIM_Base_MspInit+0x48>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d115      	bne.n	80010fe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	4b0d      	ldr	r3, [pc, #52]	@ (800110c <HAL_TIM_Base_MspInit+0x4c>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010da:	4a0c      	ldr	r2, [pc, #48]	@ (800110c <HAL_TIM_Base_MspInit+0x4c>)
 80010dc:	f043 0302 	orr.w	r3, r3, #2
 80010e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80010e2:	4b0a      	ldr	r3, [pc, #40]	@ (800110c <HAL_TIM_Base_MspInit+0x4c>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2100      	movs	r1, #0
 80010f2:	201d      	movs	r0, #29
 80010f4:	f000 fb1b 	bl	800172e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010f8:	201d      	movs	r0, #29
 80010fa:	f000 fb34 	bl	8001766 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40000400 	.word	0x40000400
 800110c:	40023800 	.word	0x40023800

08001110 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08a      	sub	sp, #40	@ 0x28
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a19      	ldr	r2, [pc, #100]	@ (8001194 <HAL_UART_MspInit+0x84>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d12b      	bne.n	800118a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	4b18      	ldr	r3, [pc, #96]	@ (8001198 <HAL_UART_MspInit+0x88>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113a:	4a17      	ldr	r2, [pc, #92]	@ (8001198 <HAL_UART_MspInit+0x88>)
 800113c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001140:	6413      	str	r3, [r2, #64]	@ 0x40
 8001142:	4b15      	ldr	r3, [pc, #84]	@ (8001198 <HAL_UART_MspInit+0x88>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	4b11      	ldr	r3, [pc, #68]	@ (8001198 <HAL_UART_MspInit+0x88>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	4a10      	ldr	r2, [pc, #64]	@ (8001198 <HAL_UART_MspInit+0x88>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	6313      	str	r3, [r2, #48]	@ 0x30
 800115e:	4b0e      	ldr	r3, [pc, #56]	@ (8001198 <HAL_UART_MspInit+0x88>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800116a:	230c      	movs	r3, #12
 800116c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	2302      	movs	r3, #2
 8001170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800117a:	2307      	movs	r3, #7
 800117c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	4619      	mov	r1, r3
 8001184:	4805      	ldr	r0, [pc, #20]	@ (800119c <HAL_UART_MspInit+0x8c>)
 8001186:	f000 fb09 	bl	800179c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800118a:	bf00      	nop
 800118c:	3728      	adds	r7, #40	@ 0x28
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40004400 	.word	0x40004400
 8001198:	40023800 	.word	0x40023800
 800119c:	40020000 	.word	0x40020000

080011a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011a4:	bf00      	nop
 80011a6:	e7fd      	b.n	80011a4 <NMI_Handler+0x4>

080011a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ac:	bf00      	nop
 80011ae:	e7fd      	b.n	80011ac <HardFault_Handler+0x4>

080011b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b4:	bf00      	nop
 80011b6:	e7fd      	b.n	80011b4 <MemManage_Handler+0x4>

080011b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011bc:	bf00      	nop
 80011be:	e7fd      	b.n	80011bc <BusFault_Handler+0x4>

080011c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c4:	bf00      	nop
 80011c6:	e7fd      	b.n	80011c4 <UsageFault_Handler+0x4>

080011c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f6:	f000 f97b 	bl	80014f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}

080011fe <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001202:	2002      	movs	r0, #2
 8001204:	f000 fc80 	bl	8001b08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}

0800120c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001210:	4802      	ldr	r0, [pc, #8]	@ (800121c <TIM3_IRQHandler+0x10>)
 8001212:	f001 fe79 	bl	8002f08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200000d8 	.word	0x200000d8

08001220 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001224:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001228:	f000 fc6e 	bl	8001b08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800122c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001230:	f000 fc6a 	bl	8001b08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001234:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001238:	f000 fc66 	bl	8001b08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800123c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001240:	f000 fc62 	bl	8001b08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}

08001248 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return 1;
 800124c:	2301      	movs	r3, #1
}
 800124e:	4618      	mov	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <_kill>:

int _kill(int pid, int sig)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001262:	f002 feab 	bl	8003fbc <__errno>
 8001266:	4603      	mov	r3, r0
 8001268:	2216      	movs	r2, #22
 800126a:	601a      	str	r2, [r3, #0]
  return -1;
 800126c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <_exit>:

void _exit (int status)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001280:	f04f 31ff 	mov.w	r1, #4294967295
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff ffe7 	bl	8001258 <_kill>
  while (1) {}    /* Make sure we hang here */
 800128a:	bf00      	nop
 800128c:	e7fd      	b.n	800128a <_exit+0x12>

0800128e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b086      	sub	sp, #24
 8001292:	af00      	add	r7, sp, #0
 8001294:	60f8      	str	r0, [r7, #12]
 8001296:	60b9      	str	r1, [r7, #8]
 8001298:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	e00a      	b.n	80012b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012a0:	f3af 8000 	nop.w
 80012a4:	4601      	mov	r1, r0
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	1c5a      	adds	r2, r3, #1
 80012aa:	60ba      	str	r2, [r7, #8]
 80012ac:	b2ca      	uxtb	r2, r1
 80012ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	3301      	adds	r3, #1
 80012b4:	617b      	str	r3, [r7, #20]
 80012b6:	697a      	ldr	r2, [r7, #20]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	dbf0      	blt.n	80012a0 <_read+0x12>
  }

  return len;
 80012be:	687b      	ldr	r3, [r7, #4]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
 80012d8:	e009      	b.n	80012ee <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	1c5a      	adds	r2, r3, #1
 80012de:	60ba      	str	r2, [r7, #8]
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	3301      	adds	r3, #1
 80012ec:	617b      	str	r3, [r7, #20]
 80012ee:	697a      	ldr	r2, [r7, #20]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	dbf1      	blt.n	80012da <_write+0x12>
  }
  return len;
 80012f6:	687b      	ldr	r3, [r7, #4]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <_close>:

int _close(int file)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001308:	f04f 33ff 	mov.w	r3, #4294967295
}
 800130c:	4618      	mov	r0, r3
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001328:	605a      	str	r2, [r3, #4]
  return 0;
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <_isatty>:

int _isatty(int file)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001340:	2301      	movs	r3, #1
}
 8001342:	4618      	mov	r0, r3
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800134e:	b480      	push	{r7}
 8001350:	b085      	sub	sp, #20
 8001352:	af00      	add	r7, sp, #0
 8001354:	60f8      	str	r0, [r7, #12]
 8001356:	60b9      	str	r1, [r7, #8]
 8001358:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800135a:	2300      	movs	r3, #0
}
 800135c:	4618      	mov	r0, r3
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001370:	4a14      	ldr	r2, [pc, #80]	@ (80013c4 <_sbrk+0x5c>)
 8001372:	4b15      	ldr	r3, [pc, #84]	@ (80013c8 <_sbrk+0x60>)
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800137c:	4b13      	ldr	r3, [pc, #76]	@ (80013cc <_sbrk+0x64>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d102      	bne.n	800138a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001384:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <_sbrk+0x64>)
 8001386:	4a12      	ldr	r2, [pc, #72]	@ (80013d0 <_sbrk+0x68>)
 8001388:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800138a:	4b10      	ldr	r3, [pc, #64]	@ (80013cc <_sbrk+0x64>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4413      	add	r3, r2
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	429a      	cmp	r2, r3
 8001396:	d207      	bcs.n	80013a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001398:	f002 fe10 	bl	8003fbc <__errno>
 800139c:	4603      	mov	r3, r0
 800139e:	220c      	movs	r2, #12
 80013a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295
 80013a6:	e009      	b.n	80013bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013a8:	4b08      	ldr	r3, [pc, #32]	@ (80013cc <_sbrk+0x64>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ae:	4b07      	ldr	r3, [pc, #28]	@ (80013cc <_sbrk+0x64>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4413      	add	r3, r2
 80013b6:	4a05      	ldr	r2, [pc, #20]	@ (80013cc <_sbrk+0x64>)
 80013b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ba:	68fb      	ldr	r3, [r7, #12]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20018000 	.word	0x20018000
 80013c8:	00000400 	.word	0x00000400
 80013cc:	20000400 	.word	0x20000400
 80013d0:	20000558 	.word	0x20000558

080013d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013d8:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <SystemInit+0x20>)
 80013da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013de:	4a05      	ldr	r2, [pc, #20]	@ (80013f4 <SystemInit+0x20>)
 80013e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80013f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001430 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013fc:	f7ff ffea 	bl	80013d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001400:	480c      	ldr	r0, [pc, #48]	@ (8001434 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001402:	490d      	ldr	r1, [pc, #52]	@ (8001438 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001404:	4a0d      	ldr	r2, [pc, #52]	@ (800143c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001408:	e002      	b.n	8001410 <LoopCopyDataInit>

0800140a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800140a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800140c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800140e:	3304      	adds	r3, #4

08001410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001414:	d3f9      	bcc.n	800140a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001416:	4a0a      	ldr	r2, [pc, #40]	@ (8001440 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001418:	4c0a      	ldr	r4, [pc, #40]	@ (8001444 <LoopFillZerobss+0x22>)
  movs r3, #0
 800141a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800141c:	e001      	b.n	8001422 <LoopFillZerobss>

0800141e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800141e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001420:	3204      	adds	r2, #4

08001422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001424:	d3fb      	bcc.n	800141e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001426:	f002 fdcf 	bl	8003fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800142a:	f7ff f999 	bl	8000760 <main>
  bx  lr    
 800142e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001430:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001434:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001438:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800143c:	0800511c 	.word	0x0800511c
  ldr r2, =_sbss
 8001440:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001444:	20000554 	.word	0x20000554

08001448 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001448:	e7fe      	b.n	8001448 <ADC_IRQHandler>
	...

0800144c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001450:	4b0e      	ldr	r3, [pc, #56]	@ (800148c <HAL_Init+0x40>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a0d      	ldr	r2, [pc, #52]	@ (800148c <HAL_Init+0x40>)
 8001456:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800145a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800145c:	4b0b      	ldr	r3, [pc, #44]	@ (800148c <HAL_Init+0x40>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a0a      	ldr	r2, [pc, #40]	@ (800148c <HAL_Init+0x40>)
 8001462:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001466:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001468:	4b08      	ldr	r3, [pc, #32]	@ (800148c <HAL_Init+0x40>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a07      	ldr	r2, [pc, #28]	@ (800148c <HAL_Init+0x40>)
 800146e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001472:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001474:	2003      	movs	r0, #3
 8001476:	f000 f94f 	bl	8001718 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800147a:	2000      	movs	r0, #0
 800147c:	f000 f808 	bl	8001490 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001480:	f7ff fdae 	bl	8000fe0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40023c00 	.word	0x40023c00

08001490 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001498:	4b12      	ldr	r3, [pc, #72]	@ (80014e4 <HAL_InitTick+0x54>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4b12      	ldr	r3, [pc, #72]	@ (80014e8 <HAL_InitTick+0x58>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	4619      	mov	r1, r3
 80014a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ae:	4618      	mov	r0, r3
 80014b0:	f000 f967 	bl	8001782 <HAL_SYSTICK_Config>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e00e      	b.n	80014dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2b0f      	cmp	r3, #15
 80014c2:	d80a      	bhi.n	80014da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014c4:	2200      	movs	r2, #0
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	f04f 30ff 	mov.w	r0, #4294967295
 80014cc:	f000 f92f 	bl	800172e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014d0:	4a06      	ldr	r2, [pc, #24]	@ (80014ec <HAL_InitTick+0x5c>)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014d6:	2300      	movs	r3, #0
 80014d8:	e000      	b.n	80014dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000000 	.word	0x20000000
 80014e8:	20000008 	.word	0x20000008
 80014ec:	20000004 	.word	0x20000004

080014f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014f4:	4b06      	ldr	r3, [pc, #24]	@ (8001510 <HAL_IncTick+0x20>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <HAL_IncTick+0x24>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4413      	add	r3, r2
 8001500:	4a04      	ldr	r2, [pc, #16]	@ (8001514 <HAL_IncTick+0x24>)
 8001502:	6013      	str	r3, [r2, #0]
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	20000008 	.word	0x20000008
 8001514:	20000404 	.word	0x20000404

08001518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return uwTick;
 800151c:	4b03      	ldr	r3, [pc, #12]	@ (800152c <HAL_GetTick+0x14>)
 800151e:	681b      	ldr	r3, [r3, #0]
}
 8001520:	4618      	mov	r0, r3
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	20000404 	.word	0x20000404

08001530 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001538:	f7ff ffee 	bl	8001518 <HAL_GetTick>
 800153c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001548:	d005      	beq.n	8001556 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800154a:	4b0a      	ldr	r3, [pc, #40]	@ (8001574 <HAL_Delay+0x44>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	461a      	mov	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4413      	add	r3, r2
 8001554:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001556:	bf00      	nop
 8001558:	f7ff ffde 	bl	8001518 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	429a      	cmp	r2, r3
 8001566:	d8f7      	bhi.n	8001558 <HAL_Delay+0x28>
  {
  }
}
 8001568:	bf00      	nop
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000008 	.word	0x20000008

08001578 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001588:	4b0c      	ldr	r3, [pc, #48]	@ (80015bc <__NVIC_SetPriorityGrouping+0x44>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800158e:	68ba      	ldr	r2, [r7, #8]
 8001590:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001594:	4013      	ands	r3, r2
 8001596:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015aa:	4a04      	ldr	r2, [pc, #16]	@ (80015bc <__NVIC_SetPriorityGrouping+0x44>)
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	60d3      	str	r3, [r2, #12]
}
 80015b0:	bf00      	nop
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c4:	4b04      	ldr	r3, [pc, #16]	@ (80015d8 <__NVIC_GetPriorityGrouping+0x18>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	0a1b      	lsrs	r3, r3, #8
 80015ca:	f003 0307 	and.w	r3, r3, #7
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	db0b      	blt.n	8001606 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	f003 021f 	and.w	r2, r3, #31
 80015f4:	4907      	ldr	r1, [pc, #28]	@ (8001614 <__NVIC_EnableIRQ+0x38>)
 80015f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fa:	095b      	lsrs	r3, r3, #5
 80015fc:	2001      	movs	r0, #1
 80015fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	e000e100 	.word	0xe000e100

08001618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	6039      	str	r1, [r7, #0]
 8001622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001628:	2b00      	cmp	r3, #0
 800162a:	db0a      	blt.n	8001642 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	b2da      	uxtb	r2, r3
 8001630:	490c      	ldr	r1, [pc, #48]	@ (8001664 <__NVIC_SetPriority+0x4c>)
 8001632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001636:	0112      	lsls	r2, r2, #4
 8001638:	b2d2      	uxtb	r2, r2
 800163a:	440b      	add	r3, r1
 800163c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001640:	e00a      	b.n	8001658 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	b2da      	uxtb	r2, r3
 8001646:	4908      	ldr	r1, [pc, #32]	@ (8001668 <__NVIC_SetPriority+0x50>)
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	f003 030f 	and.w	r3, r3, #15
 800164e:	3b04      	subs	r3, #4
 8001650:	0112      	lsls	r2, r2, #4
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	440b      	add	r3, r1
 8001656:	761a      	strb	r2, [r3, #24]
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000e100 	.word	0xe000e100
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800166c:	b480      	push	{r7}
 800166e:	b089      	sub	sp, #36	@ 0x24
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	f1c3 0307 	rsb	r3, r3, #7
 8001686:	2b04      	cmp	r3, #4
 8001688:	bf28      	it	cs
 800168a:	2304      	movcs	r3, #4
 800168c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3304      	adds	r3, #4
 8001692:	2b06      	cmp	r3, #6
 8001694:	d902      	bls.n	800169c <NVIC_EncodePriority+0x30>
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3b03      	subs	r3, #3
 800169a:	e000      	b.n	800169e <NVIC_EncodePriority+0x32>
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a0:	f04f 32ff 	mov.w	r2, #4294967295
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43da      	mvns	r2, r3
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	401a      	ands	r2, r3
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b4:	f04f 31ff 	mov.w	r1, #4294967295
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	fa01 f303 	lsl.w	r3, r1, r3
 80016be:	43d9      	mvns	r1, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c4:	4313      	orrs	r3, r2
         );
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3724      	adds	r7, #36	@ 0x24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
	...

080016d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3b01      	subs	r3, #1
 80016e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016e4:	d301      	bcc.n	80016ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016e6:	2301      	movs	r3, #1
 80016e8:	e00f      	b.n	800170a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001714 <SysTick_Config+0x40>)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016f2:	210f      	movs	r1, #15
 80016f4:	f04f 30ff 	mov.w	r0, #4294967295
 80016f8:	f7ff ff8e 	bl	8001618 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016fc:	4b05      	ldr	r3, [pc, #20]	@ (8001714 <SysTick_Config+0x40>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001702:	4b04      	ldr	r3, [pc, #16]	@ (8001714 <SysTick_Config+0x40>)
 8001704:	2207      	movs	r2, #7
 8001706:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	e000e010 	.word	0xe000e010

08001718 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff ff29 	bl	8001578 <__NVIC_SetPriorityGrouping>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800172e:	b580      	push	{r7, lr}
 8001730:	b086      	sub	sp, #24
 8001732:	af00      	add	r7, sp, #0
 8001734:	4603      	mov	r3, r0
 8001736:	60b9      	str	r1, [r7, #8]
 8001738:	607a      	str	r2, [r7, #4]
 800173a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001740:	f7ff ff3e 	bl	80015c0 <__NVIC_GetPriorityGrouping>
 8001744:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	68b9      	ldr	r1, [r7, #8]
 800174a:	6978      	ldr	r0, [r7, #20]
 800174c:	f7ff ff8e 	bl	800166c <NVIC_EncodePriority>
 8001750:	4602      	mov	r2, r0
 8001752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001756:	4611      	mov	r1, r2
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ff5d 	bl	8001618 <__NVIC_SetPriority>
}
 800175e:	bf00      	nop
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	4603      	mov	r3, r0
 800176e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ff31 	bl	80015dc <__NVIC_EnableIRQ>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff ffa2 	bl	80016d4 <SysTick_Config>
 8001790:	4603      	mov	r3, r0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800179c:	b480      	push	{r7}
 800179e:	b089      	sub	sp, #36	@ 0x24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017b2:	2300      	movs	r3, #0
 80017b4:	61fb      	str	r3, [r7, #28]
 80017b6:	e159      	b.n	8001a6c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017b8:	2201      	movs	r2, #1
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	697a      	ldr	r2, [r7, #20]
 80017c8:	4013      	ands	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	f040 8148 	bne.w	8001a66 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f003 0303 	and.w	r3, r3, #3
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d005      	beq.n	80017ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d130      	bne.n	8001850 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	2203      	movs	r2, #3
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43db      	mvns	r3, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4013      	ands	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	68da      	ldr	r2, [r3, #12]
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	4313      	orrs	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001824:	2201      	movs	r2, #1
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	091b      	lsrs	r3, r3, #4
 800183a:	f003 0201 	and.w	r2, r3, #1
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4313      	orrs	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 0303 	and.w	r3, r3, #3
 8001858:	2b03      	cmp	r3, #3
 800185a:	d017      	beq.n	800188c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	2203      	movs	r2, #3
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	689a      	ldr	r2, [r3, #8]
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 0303 	and.w	r3, r3, #3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d123      	bne.n	80018e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	08da      	lsrs	r2, r3, #3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3208      	adds	r2, #8
 80018a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	f003 0307 	and.w	r3, r3, #7
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	220f      	movs	r2, #15
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	691a      	ldr	r2, [r3, #16]
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	08da      	lsrs	r2, r3, #3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	3208      	adds	r2, #8
 80018da:	69b9      	ldr	r1, [r7, #24]
 80018dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	2203      	movs	r2, #3
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4013      	ands	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 0203 	and.w	r2, r3, #3
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4313      	orrs	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800191c:	2b00      	cmp	r3, #0
 800191e:	f000 80a2 	beq.w	8001a66 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	4b57      	ldr	r3, [pc, #348]	@ (8001a84 <HAL_GPIO_Init+0x2e8>)
 8001928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800192a:	4a56      	ldr	r2, [pc, #344]	@ (8001a84 <HAL_GPIO_Init+0x2e8>)
 800192c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001930:	6453      	str	r3, [r2, #68]	@ 0x44
 8001932:	4b54      	ldr	r3, [pc, #336]	@ (8001a84 <HAL_GPIO_Init+0x2e8>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001936:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800193e:	4a52      	ldr	r2, [pc, #328]	@ (8001a88 <HAL_GPIO_Init+0x2ec>)
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	089b      	lsrs	r3, r3, #2
 8001944:	3302      	adds	r3, #2
 8001946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800194a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	f003 0303 	and.w	r3, r3, #3
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	220f      	movs	r2, #15
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43db      	mvns	r3, r3
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	4013      	ands	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a49      	ldr	r2, [pc, #292]	@ (8001a8c <HAL_GPIO_Init+0x2f0>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d019      	beq.n	800199e <HAL_GPIO_Init+0x202>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a48      	ldr	r2, [pc, #288]	@ (8001a90 <HAL_GPIO_Init+0x2f4>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d013      	beq.n	800199a <HAL_GPIO_Init+0x1fe>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a47      	ldr	r2, [pc, #284]	@ (8001a94 <HAL_GPIO_Init+0x2f8>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d00d      	beq.n	8001996 <HAL_GPIO_Init+0x1fa>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a46      	ldr	r2, [pc, #280]	@ (8001a98 <HAL_GPIO_Init+0x2fc>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d007      	beq.n	8001992 <HAL_GPIO_Init+0x1f6>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a45      	ldr	r2, [pc, #276]	@ (8001a9c <HAL_GPIO_Init+0x300>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d101      	bne.n	800198e <HAL_GPIO_Init+0x1f2>
 800198a:	2304      	movs	r3, #4
 800198c:	e008      	b.n	80019a0 <HAL_GPIO_Init+0x204>
 800198e:	2307      	movs	r3, #7
 8001990:	e006      	b.n	80019a0 <HAL_GPIO_Init+0x204>
 8001992:	2303      	movs	r3, #3
 8001994:	e004      	b.n	80019a0 <HAL_GPIO_Init+0x204>
 8001996:	2302      	movs	r3, #2
 8001998:	e002      	b.n	80019a0 <HAL_GPIO_Init+0x204>
 800199a:	2301      	movs	r3, #1
 800199c:	e000      	b.n	80019a0 <HAL_GPIO_Init+0x204>
 800199e:	2300      	movs	r3, #0
 80019a0:	69fa      	ldr	r2, [r7, #28]
 80019a2:	f002 0203 	and.w	r2, r2, #3
 80019a6:	0092      	lsls	r2, r2, #2
 80019a8:	4093      	lsls	r3, r2
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019b0:	4935      	ldr	r1, [pc, #212]	@ (8001a88 <HAL_GPIO_Init+0x2ec>)
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	089b      	lsrs	r3, r3, #2
 80019b6:	3302      	adds	r3, #2
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019be:	4b38      	ldr	r3, [pc, #224]	@ (8001aa0 <HAL_GPIO_Init+0x304>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4013      	ands	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019e2:	4a2f      	ldr	r2, [pc, #188]	@ (8001aa0 <HAL_GPIO_Init+0x304>)
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019e8:	4b2d      	ldr	r3, [pc, #180]	@ (8001aa0 <HAL_GPIO_Init+0x304>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4013      	ands	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a0c:	4a24      	ldr	r2, [pc, #144]	@ (8001aa0 <HAL_GPIO_Init+0x304>)
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a12:	4b23      	ldr	r3, [pc, #140]	@ (8001aa0 <HAL_GPIO_Init+0x304>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a36:	4a1a      	ldr	r2, [pc, #104]	@ (8001aa0 <HAL_GPIO_Init+0x304>)
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a3c:	4b18      	ldr	r3, [pc, #96]	@ (8001aa0 <HAL_GPIO_Init+0x304>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	43db      	mvns	r3, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a60:	4a0f      	ldr	r2, [pc, #60]	@ (8001aa0 <HAL_GPIO_Init+0x304>)
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	61fb      	str	r3, [r7, #28]
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	2b0f      	cmp	r3, #15
 8001a70:	f67f aea2 	bls.w	80017b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a74:	bf00      	nop
 8001a76:	bf00      	nop
 8001a78:	3724      	adds	r7, #36	@ 0x24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40013800 	.word	0x40013800
 8001a8c:	40020000 	.word	0x40020000
 8001a90:	40020400 	.word	0x40020400
 8001a94:	40020800 	.word	0x40020800
 8001a98:	40020c00 	.word	0x40020c00
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40013c00 	.word	0x40013c00

08001aa4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	460b      	mov	r3, r1
 8001aae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	691a      	ldr	r2, [r3, #16]
 8001ab4:	887b      	ldrh	r3, [r7, #2]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d002      	beq.n	8001ac2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001abc:	2301      	movs	r3, #1
 8001abe:	73fb      	strb	r3, [r7, #15]
 8001ac0:	e001      	b.n	8001ac6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	460b      	mov	r3, r1
 8001ade:	807b      	strh	r3, [r7, #2]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ae4:	787b      	ldrb	r3, [r7, #1]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aea:	887a      	ldrh	r2, [r7, #2]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001af0:	e003      	b.n	8001afa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001af2:	887b      	ldrh	r3, [r7, #2]
 8001af4:	041a      	lsls	r2, r3, #16
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	619a      	str	r2, [r3, #24]
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001b12:	4b08      	ldr	r3, [pc, #32]	@ (8001b34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b14:	695a      	ldr	r2, [r3, #20]
 8001b16:	88fb      	ldrh	r3, [r7, #6]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d006      	beq.n	8001b2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b1e:	4a05      	ldr	r2, [pc, #20]	@ (8001b34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b20:	88fb      	ldrh	r3, [r7, #6]
 8001b22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b24:	88fb      	ldrh	r3, [r7, #6]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff f868 	bl	8000bfc <HAL_GPIO_EXTI_Callback>
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40013c00 	.word	0x40013c00

08001b38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e12b      	b.n	8001da2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d106      	bne.n	8001b64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff fa66 	bl	8001030 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2224      	movs	r2, #36	@ 0x24
 8001b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 0201 	bic.w	r2, r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b9c:	f001 f8da 	bl	8002d54 <HAL_RCC_GetPCLK1Freq>
 8001ba0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	4a81      	ldr	r2, [pc, #516]	@ (8001dac <HAL_I2C_Init+0x274>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d807      	bhi.n	8001bbc <HAL_I2C_Init+0x84>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4a80      	ldr	r2, [pc, #512]	@ (8001db0 <HAL_I2C_Init+0x278>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	bf94      	ite	ls
 8001bb4:	2301      	movls	r3, #1
 8001bb6:	2300      	movhi	r3, #0
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	e006      	b.n	8001bca <HAL_I2C_Init+0x92>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4a7d      	ldr	r2, [pc, #500]	@ (8001db4 <HAL_I2C_Init+0x27c>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	bf94      	ite	ls
 8001bc4:	2301      	movls	r3, #1
 8001bc6:	2300      	movhi	r3, #0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e0e7      	b.n	8001da2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	4a78      	ldr	r2, [pc, #480]	@ (8001db8 <HAL_I2C_Init+0x280>)
 8001bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bda:	0c9b      	lsrs	r3, r3, #18
 8001bdc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68ba      	ldr	r2, [r7, #8]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	4a6a      	ldr	r2, [pc, #424]	@ (8001dac <HAL_I2C_Init+0x274>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d802      	bhi.n	8001c0c <HAL_I2C_Init+0xd4>
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	e009      	b.n	8001c20 <HAL_I2C_Init+0xe8>
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001c12:	fb02 f303 	mul.w	r3, r2, r3
 8001c16:	4a69      	ldr	r2, [pc, #420]	@ (8001dbc <HAL_I2C_Init+0x284>)
 8001c18:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1c:	099b      	lsrs	r3, r3, #6
 8001c1e:	3301      	adds	r3, #1
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	430b      	orrs	r3, r1
 8001c26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001c32:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	495c      	ldr	r1, [pc, #368]	@ (8001dac <HAL_I2C_Init+0x274>)
 8001c3c:	428b      	cmp	r3, r1
 8001c3e:	d819      	bhi.n	8001c74 <HAL_I2C_Init+0x13c>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	1e59      	subs	r1, r3, #1
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c4e:	1c59      	adds	r1, r3, #1
 8001c50:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001c54:	400b      	ands	r3, r1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00a      	beq.n	8001c70 <HAL_I2C_Init+0x138>
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	1e59      	subs	r1, r3, #1
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c68:	3301      	adds	r3, #1
 8001c6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c6e:	e051      	b.n	8001d14 <HAL_I2C_Init+0x1dc>
 8001c70:	2304      	movs	r3, #4
 8001c72:	e04f      	b.n	8001d14 <HAL_I2C_Init+0x1dc>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d111      	bne.n	8001ca0 <HAL_I2C_Init+0x168>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	1e58      	subs	r0, r3, #1
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6859      	ldr	r1, [r3, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	440b      	add	r3, r1
 8001c8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c8e:	3301      	adds	r3, #1
 8001c90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	bf0c      	ite	eq
 8001c98:	2301      	moveq	r3, #1
 8001c9a:	2300      	movne	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	e012      	b.n	8001cc6 <HAL_I2C_Init+0x18e>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	1e58      	subs	r0, r3, #1
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6859      	ldr	r1, [r3, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	440b      	add	r3, r1
 8001cae:	0099      	lsls	r1, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	bf0c      	ite	eq
 8001cc0:	2301      	moveq	r3, #1
 8001cc2:	2300      	movne	r3, #0
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_I2C_Init+0x196>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e022      	b.n	8001d14 <HAL_I2C_Init+0x1dc>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d10e      	bne.n	8001cf4 <HAL_I2C_Init+0x1bc>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	1e58      	subs	r0, r3, #1
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6859      	ldr	r1, [r3, #4]
 8001cde:	460b      	mov	r3, r1
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	440b      	add	r3, r1
 8001ce4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ce8:	3301      	adds	r3, #1
 8001cea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cf2:	e00f      	b.n	8001d14 <HAL_I2C_Init+0x1dc>
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	1e58      	subs	r0, r3, #1
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6859      	ldr	r1, [r3, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	440b      	add	r3, r1
 8001d02:	0099      	lsls	r1, r3, #2
 8001d04:	440b      	add	r3, r1
 8001d06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	6809      	ldr	r1, [r1, #0]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	69da      	ldr	r2, [r3, #28]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a1b      	ldr	r3, [r3, #32]
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	430a      	orrs	r2, r1
 8001d36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001d42:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6911      	ldr	r1, [r2, #16]
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	68d2      	ldr	r2, [r2, #12]
 8001d4e:	4311      	orrs	r1, r2
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	6812      	ldr	r2, [r2, #0]
 8001d54:	430b      	orrs	r3, r1
 8001d56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	695a      	ldr	r2, [r3, #20]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f042 0201 	orr.w	r2, r2, #1
 8001d82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	000186a0 	.word	0x000186a0
 8001db0:	001e847f 	.word	0x001e847f
 8001db4:	003d08ff 	.word	0x003d08ff
 8001db8:	431bde83 	.word	0x431bde83
 8001dbc:	10624dd3 	.word	0x10624dd3

08001dc0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b088      	sub	sp, #32
 8001dc4:	af02      	add	r7, sp, #8
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	607a      	str	r2, [r7, #4]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	460b      	mov	r3, r1
 8001dce:	817b      	strh	r3, [r7, #10]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001dd4:	f7ff fba0 	bl	8001518 <HAL_GetTick>
 8001dd8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b20      	cmp	r3, #32
 8001de4:	f040 80e0 	bne.w	8001fa8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	2319      	movs	r3, #25
 8001dee:	2201      	movs	r2, #1
 8001df0:	4970      	ldr	r1, [pc, #448]	@ (8001fb4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f000 f964 	bl	80020c0 <I2C_WaitOnFlagUntilTimeout>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	e0d3      	b.n	8001faa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d101      	bne.n	8001e10 <HAL_I2C_Master_Transmit+0x50>
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	e0cc      	b.n	8001faa <HAL_I2C_Master_Transmit+0x1ea>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d007      	beq.n	8001e36 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f042 0201 	orr.w	r2, r2, #1
 8001e34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2221      	movs	r2, #33	@ 0x21
 8001e4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2210      	movs	r2, #16
 8001e52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	893a      	ldrh	r2, [r7, #8]
 8001e66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	4a50      	ldr	r2, [pc, #320]	@ (8001fb8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001e76:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e78:	8979      	ldrh	r1, [r7, #10]
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	6a3a      	ldr	r2, [r7, #32]
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f000 f89c 	bl	8001fbc <I2C_MasterRequestWrite>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e08d      	b.n	8001faa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e8e:	2300      	movs	r3, #0
 8001e90:	613b      	str	r3, [r7, #16]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	695b      	ldr	r3, [r3, #20]
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ea4:	e066      	b.n	8001f74 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	6a39      	ldr	r1, [r7, #32]
 8001eaa:	68f8      	ldr	r0, [r7, #12]
 8001eac:	f000 fa22 	bl	80022f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00d      	beq.n	8001ed2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	d107      	bne.n	8001ece <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ecc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e06b      	b.n	8001faa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed6:	781a      	ldrb	r2, [r3, #0]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee2:	1c5a      	adds	r2, r3, #1
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001efa:	3b01      	subs	r3, #1
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	695b      	ldr	r3, [r3, #20]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	2b04      	cmp	r3, #4
 8001f0e:	d11b      	bne.n	8001f48 <HAL_I2C_Master_Transmit+0x188>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d017      	beq.n	8001f48 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1c:	781a      	ldrb	r2, [r3, #0]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f28:	1c5a      	adds	r2, r3, #1
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	3b01      	subs	r3, #1
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f40:	3b01      	subs	r3, #1
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	6a39      	ldr	r1, [r7, #32]
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f000 fa19 	bl	8002384 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00d      	beq.n	8001f74 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5c:	2b04      	cmp	r3, #4
 8001f5e:	d107      	bne.n	8001f70 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f6e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e01a      	b.n	8001faa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d194      	bne.n	8001ea6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2220      	movs	r2, #32
 8001f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	e000      	b.n	8001faa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001fa8:	2302      	movs	r3, #2
  }
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	00100002 	.word	0x00100002
 8001fb8:	ffff0000 	.word	0xffff0000

08001fbc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b088      	sub	sp, #32
 8001fc0:	af02      	add	r7, sp, #8
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	607a      	str	r2, [r7, #4]
 8001fc6:	603b      	str	r3, [r7, #0]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d006      	beq.n	8001fe6 <I2C_MasterRequestWrite+0x2a>
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d003      	beq.n	8001fe6 <I2C_MasterRequestWrite+0x2a>
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001fe4:	d108      	bne.n	8001ff8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	e00b      	b.n	8002010 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffc:	2b12      	cmp	r3, #18
 8001ffe:	d107      	bne.n	8002010 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800200e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f000 f84f 	bl	80020c0 <I2C_WaitOnFlagUntilTimeout>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00d      	beq.n	8002044 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002032:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002036:	d103      	bne.n	8002040 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800203e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e035      	b.n	80020b0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800204c:	d108      	bne.n	8002060 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800204e:	897b      	ldrh	r3, [r7, #10]
 8002050:	b2db      	uxtb	r3, r3
 8002052:	461a      	mov	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800205c:	611a      	str	r2, [r3, #16]
 800205e:	e01b      	b.n	8002098 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002060:	897b      	ldrh	r3, [r7, #10]
 8002062:	11db      	asrs	r3, r3, #7
 8002064:	b2db      	uxtb	r3, r3
 8002066:	f003 0306 	and.w	r3, r3, #6
 800206a:	b2db      	uxtb	r3, r3
 800206c:	f063 030f 	orn	r3, r3, #15
 8002070:	b2da      	uxtb	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	490e      	ldr	r1, [pc, #56]	@ (80020b8 <I2C_MasterRequestWrite+0xfc>)
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f000 f898 	bl	80021b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e010      	b.n	80020b0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800208e:	897b      	ldrh	r3, [r7, #10]
 8002090:	b2da      	uxtb	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	4907      	ldr	r1, [pc, #28]	@ (80020bc <I2C_MasterRequestWrite+0x100>)
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f000 f888 	bl	80021b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e000      	b.n	80020b0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	00010008 	.word	0x00010008
 80020bc:	00010002 	.word	0x00010002

080020c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	603b      	str	r3, [r7, #0]
 80020cc:	4613      	mov	r3, r2
 80020ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020d0:	e048      	b.n	8002164 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d8:	d044      	beq.n	8002164 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020da:	f7ff fa1d 	bl	8001518 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d302      	bcc.n	80020f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d139      	bne.n	8002164 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	0c1b      	lsrs	r3, r3, #16
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d10d      	bne.n	8002116 <I2C_WaitOnFlagUntilTimeout+0x56>
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	695b      	ldr	r3, [r3, #20]
 8002100:	43da      	mvns	r2, r3
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	4013      	ands	r3, r2
 8002106:	b29b      	uxth	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	bf0c      	ite	eq
 800210c:	2301      	moveq	r3, #1
 800210e:	2300      	movne	r3, #0
 8002110:	b2db      	uxtb	r3, r3
 8002112:	461a      	mov	r2, r3
 8002114:	e00c      	b.n	8002130 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	43da      	mvns	r2, r3
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	4013      	ands	r3, r2
 8002122:	b29b      	uxth	r3, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	bf0c      	ite	eq
 8002128:	2301      	moveq	r3, #1
 800212a:	2300      	movne	r3, #0
 800212c:	b2db      	uxtb	r3, r3
 800212e:	461a      	mov	r2, r3
 8002130:	79fb      	ldrb	r3, [r7, #7]
 8002132:	429a      	cmp	r2, r3
 8002134:	d116      	bne.n	8002164 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2220      	movs	r2, #32
 8002140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002150:	f043 0220 	orr.w	r2, r3, #32
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e023      	b.n	80021ac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	0c1b      	lsrs	r3, r3, #16
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b01      	cmp	r3, #1
 800216c:	d10d      	bne.n	800218a <I2C_WaitOnFlagUntilTimeout+0xca>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	43da      	mvns	r2, r3
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	4013      	ands	r3, r2
 800217a:	b29b      	uxth	r3, r3
 800217c:	2b00      	cmp	r3, #0
 800217e:	bf0c      	ite	eq
 8002180:	2301      	moveq	r3, #1
 8002182:	2300      	movne	r3, #0
 8002184:	b2db      	uxtb	r3, r3
 8002186:	461a      	mov	r2, r3
 8002188:	e00c      	b.n	80021a4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	43da      	mvns	r2, r3
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	4013      	ands	r3, r2
 8002196:	b29b      	uxth	r3, r3
 8002198:	2b00      	cmp	r3, #0
 800219a:	bf0c      	ite	eq
 800219c:	2301      	moveq	r3, #1
 800219e:	2300      	movne	r3, #0
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	461a      	mov	r2, r3
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d093      	beq.n	80020d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
 80021c0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021c2:	e071      	b.n	80022a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021d2:	d123      	bne.n	800221c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021e2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80021ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2220      	movs	r2, #32
 80021f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002208:	f043 0204 	orr.w	r2, r3, #4
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e067      	b.n	80022ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002222:	d041      	beq.n	80022a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002224:	f7ff f978 	bl	8001518 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	429a      	cmp	r2, r3
 8002232:	d302      	bcc.n	800223a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d136      	bne.n	80022a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	0c1b      	lsrs	r3, r3, #16
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b01      	cmp	r3, #1
 8002242:	d10c      	bne.n	800225e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	43da      	mvns	r2, r3
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	4013      	ands	r3, r2
 8002250:	b29b      	uxth	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	bf14      	ite	ne
 8002256:	2301      	movne	r3, #1
 8002258:	2300      	moveq	r3, #0
 800225a:	b2db      	uxtb	r3, r3
 800225c:	e00b      	b.n	8002276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	43da      	mvns	r2, r3
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	4013      	ands	r3, r2
 800226a:	b29b      	uxth	r3, r3
 800226c:	2b00      	cmp	r3, #0
 800226e:	bf14      	ite	ne
 8002270:	2301      	movne	r3, #1
 8002272:	2300      	moveq	r3, #0
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d016      	beq.n	80022a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2220      	movs	r2, #32
 8002284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002294:	f043 0220 	orr.w	r2, r3, #32
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e021      	b.n	80022ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	0c1b      	lsrs	r3, r3, #16
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d10c      	bne.n	80022cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	43da      	mvns	r2, r3
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	4013      	ands	r3, r2
 80022be:	b29b      	uxth	r3, r3
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	bf14      	ite	ne
 80022c4:	2301      	movne	r3, #1
 80022c6:	2300      	moveq	r3, #0
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	e00b      	b.n	80022e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	43da      	mvns	r2, r3
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	4013      	ands	r3, r2
 80022d8:	b29b      	uxth	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	bf14      	ite	ne
 80022de:	2301      	movne	r3, #1
 80022e0:	2300      	moveq	r3, #0
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f47f af6d 	bne.w	80021c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002300:	e034      	b.n	800236c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f000 f886 	bl	8002414 <I2C_IsAcknowledgeFailed>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e034      	b.n	800237c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002318:	d028      	beq.n	800236c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800231a:	f7ff f8fd 	bl	8001518 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	68ba      	ldr	r2, [r7, #8]
 8002326:	429a      	cmp	r2, r3
 8002328:	d302      	bcc.n	8002330 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d11d      	bne.n	800236c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800233a:	2b80      	cmp	r3, #128	@ 0x80
 800233c:	d016      	beq.n	800236c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2220      	movs	r2, #32
 8002348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002358:	f043 0220 	orr.w	r2, r3, #32
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e007      	b.n	800237c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002376:	2b80      	cmp	r3, #128	@ 0x80
 8002378:	d1c3      	bne.n	8002302 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002390:	e034      	b.n	80023fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f000 f83e 	bl	8002414 <I2C_IsAcknowledgeFailed>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e034      	b.n	800240c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a8:	d028      	beq.n	80023fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023aa:	f7ff f8b5 	bl	8001518 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d302      	bcc.n	80023c0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d11d      	bne.n	80023fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d016      	beq.n	80023fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2220      	movs	r2, #32
 80023d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e8:	f043 0220 	orr.w	r2, r3, #32
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e007      	b.n	800240c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	f003 0304 	and.w	r3, r3, #4
 8002406:	2b04      	cmp	r3, #4
 8002408:	d1c3      	bne.n	8002392 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002426:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800242a:	d11b      	bne.n	8002464 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002434:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2220      	movs	r2, #32
 8002440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002450:	f043 0204 	orr.w	r2, r3, #4
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e000      	b.n	8002466 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
	...

08002474 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e267      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d075      	beq.n	800257e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002492:	4b88      	ldr	r3, [pc, #544]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 030c 	and.w	r3, r3, #12
 800249a:	2b04      	cmp	r3, #4
 800249c:	d00c      	beq.n	80024b8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800249e:	4b85      	ldr	r3, [pc, #532]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80024a6:	2b08      	cmp	r3, #8
 80024a8:	d112      	bne.n	80024d0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024aa:	4b82      	ldr	r3, [pc, #520]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024b6:	d10b      	bne.n	80024d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b8:	4b7e      	ldr	r3, [pc, #504]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d05b      	beq.n	800257c <HAL_RCC_OscConfig+0x108>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d157      	bne.n	800257c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e242      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024d8:	d106      	bne.n	80024e8 <HAL_RCC_OscConfig+0x74>
 80024da:	4b76      	ldr	r3, [pc, #472]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a75      	ldr	r2, [pc, #468]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 80024e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024e4:	6013      	str	r3, [r2, #0]
 80024e6:	e01d      	b.n	8002524 <HAL_RCC_OscConfig+0xb0>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024f0:	d10c      	bne.n	800250c <HAL_RCC_OscConfig+0x98>
 80024f2:	4b70      	ldr	r3, [pc, #448]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a6f      	ldr	r2, [pc, #444]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 80024f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	4b6d      	ldr	r3, [pc, #436]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a6c      	ldr	r2, [pc, #432]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002504:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	e00b      	b.n	8002524 <HAL_RCC_OscConfig+0xb0>
 800250c:	4b69      	ldr	r3, [pc, #420]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a68      	ldr	r2, [pc, #416]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002512:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002516:	6013      	str	r3, [r2, #0]
 8002518:	4b66      	ldr	r3, [pc, #408]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a65      	ldr	r2, [pc, #404]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 800251e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002522:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d013      	beq.n	8002554 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252c:	f7fe fff4 	bl	8001518 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002534:	f7fe fff0 	bl	8001518 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b64      	cmp	r3, #100	@ 0x64
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e207      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002546:	4b5b      	ldr	r3, [pc, #364]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f0      	beq.n	8002534 <HAL_RCC_OscConfig+0xc0>
 8002552:	e014      	b.n	800257e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002554:	f7fe ffe0 	bl	8001518 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800255c:	f7fe ffdc 	bl	8001518 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b64      	cmp	r3, #100	@ 0x64
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e1f3      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800256e:	4b51      	ldr	r3, [pc, #324]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f0      	bne.n	800255c <HAL_RCC_OscConfig+0xe8>
 800257a:	e000      	b.n	800257e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800257c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d063      	beq.n	8002652 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800258a:	4b4a      	ldr	r3, [pc, #296]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 030c 	and.w	r3, r3, #12
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00b      	beq.n	80025ae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002596:	4b47      	ldr	r3, [pc, #284]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800259e:	2b08      	cmp	r3, #8
 80025a0:	d11c      	bne.n	80025dc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025a2:	4b44      	ldr	r3, [pc, #272]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d116      	bne.n	80025dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ae:	4b41      	ldr	r3, [pc, #260]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d005      	beq.n	80025c6 <HAL_RCC_OscConfig+0x152>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d001      	beq.n	80025c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e1c7      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c6:	4b3b      	ldr	r3, [pc, #236]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	4937      	ldr	r1, [pc, #220]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025da:	e03a      	b.n	8002652 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d020      	beq.n	8002626 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025e4:	4b34      	ldr	r3, [pc, #208]	@ (80026b8 <HAL_RCC_OscConfig+0x244>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ea:	f7fe ff95 	bl	8001518 <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025f2:	f7fe ff91 	bl	8001518 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e1a8      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002604:	4b2b      	ldr	r3, [pc, #172]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0f0      	beq.n	80025f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002610:	4b28      	ldr	r3, [pc, #160]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	4925      	ldr	r1, [pc, #148]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002620:	4313      	orrs	r3, r2
 8002622:	600b      	str	r3, [r1, #0]
 8002624:	e015      	b.n	8002652 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002626:	4b24      	ldr	r3, [pc, #144]	@ (80026b8 <HAL_RCC_OscConfig+0x244>)
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262c:	f7fe ff74 	bl	8001518 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002634:	f7fe ff70 	bl	8001518 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e187      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002646:	4b1b      	ldr	r3, [pc, #108]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f0      	bne.n	8002634 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	2b00      	cmp	r3, #0
 800265c:	d036      	beq.n	80026cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d016      	beq.n	8002694 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002666:	4b15      	ldr	r3, [pc, #84]	@ (80026bc <HAL_RCC_OscConfig+0x248>)
 8002668:	2201      	movs	r2, #1
 800266a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266c:	f7fe ff54 	bl	8001518 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002674:	f7fe ff50 	bl	8001518 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e167      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002686:	4b0b      	ldr	r3, [pc, #44]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002688:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0f0      	beq.n	8002674 <HAL_RCC_OscConfig+0x200>
 8002692:	e01b      	b.n	80026cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002694:	4b09      	ldr	r3, [pc, #36]	@ (80026bc <HAL_RCC_OscConfig+0x248>)
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800269a:	f7fe ff3d 	bl	8001518 <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026a0:	e00e      	b.n	80026c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026a2:	f7fe ff39 	bl	8001518 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d907      	bls.n	80026c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e150      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
 80026b4:	40023800 	.word	0x40023800
 80026b8:	42470000 	.word	0x42470000
 80026bc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c0:	4b88      	ldr	r3, [pc, #544]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 80026c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1ea      	bne.n	80026a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 8097 	beq.w	8002808 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026da:	2300      	movs	r3, #0
 80026dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026de:	4b81      	ldr	r3, [pc, #516]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10f      	bne.n	800270a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	4b7d      	ldr	r3, [pc, #500]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f2:	4a7c      	ldr	r2, [pc, #496]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 80026f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80026fa:	4b7a      	ldr	r3, [pc, #488]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002702:	60bb      	str	r3, [r7, #8]
 8002704:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002706:	2301      	movs	r3, #1
 8002708:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800270a:	4b77      	ldr	r3, [pc, #476]	@ (80028e8 <HAL_RCC_OscConfig+0x474>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002712:	2b00      	cmp	r3, #0
 8002714:	d118      	bne.n	8002748 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002716:	4b74      	ldr	r3, [pc, #464]	@ (80028e8 <HAL_RCC_OscConfig+0x474>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a73      	ldr	r2, [pc, #460]	@ (80028e8 <HAL_RCC_OscConfig+0x474>)
 800271c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002720:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002722:	f7fe fef9 	bl	8001518 <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800272a:	f7fe fef5 	bl	8001518 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e10c      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800273c:	4b6a      	ldr	r3, [pc, #424]	@ (80028e8 <HAL_RCC_OscConfig+0x474>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0f0      	beq.n	800272a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d106      	bne.n	800275e <HAL_RCC_OscConfig+0x2ea>
 8002750:	4b64      	ldr	r3, [pc, #400]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002754:	4a63      	ldr	r2, [pc, #396]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002756:	f043 0301 	orr.w	r3, r3, #1
 800275a:	6713      	str	r3, [r2, #112]	@ 0x70
 800275c:	e01c      	b.n	8002798 <HAL_RCC_OscConfig+0x324>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2b05      	cmp	r3, #5
 8002764:	d10c      	bne.n	8002780 <HAL_RCC_OscConfig+0x30c>
 8002766:	4b5f      	ldr	r3, [pc, #380]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800276a:	4a5e      	ldr	r2, [pc, #376]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 800276c:	f043 0304 	orr.w	r3, r3, #4
 8002770:	6713      	str	r3, [r2, #112]	@ 0x70
 8002772:	4b5c      	ldr	r3, [pc, #368]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002776:	4a5b      	ldr	r2, [pc, #364]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	6713      	str	r3, [r2, #112]	@ 0x70
 800277e:	e00b      	b.n	8002798 <HAL_RCC_OscConfig+0x324>
 8002780:	4b58      	ldr	r3, [pc, #352]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002784:	4a57      	ldr	r2, [pc, #348]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002786:	f023 0301 	bic.w	r3, r3, #1
 800278a:	6713      	str	r3, [r2, #112]	@ 0x70
 800278c:	4b55      	ldr	r3, [pc, #340]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 800278e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002790:	4a54      	ldr	r2, [pc, #336]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002792:	f023 0304 	bic.w	r3, r3, #4
 8002796:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d015      	beq.n	80027cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a0:	f7fe feba 	bl	8001518 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a6:	e00a      	b.n	80027be <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a8:	f7fe feb6 	bl	8001518 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e0cb      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027be:	4b49      	ldr	r3, [pc, #292]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 80027c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d0ee      	beq.n	80027a8 <HAL_RCC_OscConfig+0x334>
 80027ca:	e014      	b.n	80027f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027cc:	f7fe fea4 	bl	8001518 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027d2:	e00a      	b.n	80027ea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d4:	f7fe fea0 	bl	8001518 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e0b5      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ea:	4b3e      	ldr	r3, [pc, #248]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 80027ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1ee      	bne.n	80027d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027f6:	7dfb      	ldrb	r3, [r7, #23]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d105      	bne.n	8002808 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027fc:	4b39      	ldr	r3, [pc, #228]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 80027fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002800:	4a38      	ldr	r2, [pc, #224]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002802:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002806:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	2b00      	cmp	r3, #0
 800280e:	f000 80a1 	beq.w	8002954 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002812:	4b34      	ldr	r3, [pc, #208]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 030c 	and.w	r3, r3, #12
 800281a:	2b08      	cmp	r3, #8
 800281c:	d05c      	beq.n	80028d8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d141      	bne.n	80028aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002826:	4b31      	ldr	r3, [pc, #196]	@ (80028ec <HAL_RCC_OscConfig+0x478>)
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282c:	f7fe fe74 	bl	8001518 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002834:	f7fe fe70 	bl	8001518 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e087      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002846:	4b27      	ldr	r3, [pc, #156]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f0      	bne.n	8002834 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69da      	ldr	r2, [r3, #28]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002860:	019b      	lsls	r3, r3, #6
 8002862:	431a      	orrs	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002868:	085b      	lsrs	r3, r3, #1
 800286a:	3b01      	subs	r3, #1
 800286c:	041b      	lsls	r3, r3, #16
 800286e:	431a      	orrs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002874:	061b      	lsls	r3, r3, #24
 8002876:	491b      	ldr	r1, [pc, #108]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002878:	4313      	orrs	r3, r2
 800287a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800287c:	4b1b      	ldr	r3, [pc, #108]	@ (80028ec <HAL_RCC_OscConfig+0x478>)
 800287e:	2201      	movs	r2, #1
 8002880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002882:	f7fe fe49 	bl	8001518 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800288a:	f7fe fe45 	bl	8001518 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e05c      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800289c:	4b11      	ldr	r3, [pc, #68]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0f0      	beq.n	800288a <HAL_RCC_OscConfig+0x416>
 80028a8:	e054      	b.n	8002954 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028aa:	4b10      	ldr	r3, [pc, #64]	@ (80028ec <HAL_RCC_OscConfig+0x478>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b0:	f7fe fe32 	bl	8001518 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b8:	f7fe fe2e 	bl	8001518 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e045      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ca:	4b06      	ldr	r3, [pc, #24]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1f0      	bne.n	80028b8 <HAL_RCC_OscConfig+0x444>
 80028d6:	e03d      	b.n	8002954 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d107      	bne.n	80028f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e038      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
 80028e4:	40023800 	.word	0x40023800
 80028e8:	40007000 	.word	0x40007000
 80028ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002960 <HAL_RCC_OscConfig+0x4ec>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d028      	beq.n	8002950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002908:	429a      	cmp	r2, r3
 800290a:	d121      	bne.n	8002950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002916:	429a      	cmp	r2, r3
 8002918:	d11a      	bne.n	8002950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002920:	4013      	ands	r3, r2
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002926:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002928:	4293      	cmp	r3, r2
 800292a:	d111      	bne.n	8002950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002936:	085b      	lsrs	r3, r3, #1
 8002938:	3b01      	subs	r3, #1
 800293a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800293c:	429a      	cmp	r2, r3
 800293e:	d107      	bne.n	8002950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800294c:	429a      	cmp	r2, r3
 800294e:	d001      	beq.n	8002954 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e000      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3718      	adds	r7, #24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40023800 	.word	0x40023800

08002964 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e0cc      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002978:	4b68      	ldr	r3, [pc, #416]	@ (8002b1c <HAL_RCC_ClockConfig+0x1b8>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d90c      	bls.n	80029a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002986:	4b65      	ldr	r3, [pc, #404]	@ (8002b1c <HAL_RCC_ClockConfig+0x1b8>)
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800298e:	4b63      	ldr	r3, [pc, #396]	@ (8002b1c <HAL_RCC_ClockConfig+0x1b8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	429a      	cmp	r2, r3
 800299a:	d001      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e0b8      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d020      	beq.n	80029ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029b8:	4b59      	ldr	r3, [pc, #356]	@ (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	4a58      	ldr	r2, [pc, #352]	@ (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 80029be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80029c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0308 	and.w	r3, r3, #8
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d005      	beq.n	80029dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029d0:	4b53      	ldr	r3, [pc, #332]	@ (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	4a52      	ldr	r2, [pc, #328]	@ (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 80029d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029dc:	4b50      	ldr	r3, [pc, #320]	@ (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	494d      	ldr	r1, [pc, #308]	@ (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d044      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d107      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a02:	4b47      	ldr	r3, [pc, #284]	@ (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d119      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e07f      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d003      	beq.n	8002a22 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a1e:	2b03      	cmp	r3, #3
 8002a20:	d107      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a22:	4b3f      	ldr	r3, [pc, #252]	@ (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d109      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e06f      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a32:	4b3b      	ldr	r3, [pc, #236]	@ (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e067      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a42:	4b37      	ldr	r3, [pc, #220]	@ (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f023 0203 	bic.w	r2, r3, #3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	4934      	ldr	r1, [pc, #208]	@ (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a54:	f7fe fd60 	bl	8001518 <HAL_GetTick>
 8002a58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a5a:	e00a      	b.n	8002a72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a5c:	f7fe fd5c 	bl	8001518 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e04f      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a72:	4b2b      	ldr	r3, [pc, #172]	@ (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 020c 	and.w	r2, r3, #12
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d1eb      	bne.n	8002a5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a84:	4b25      	ldr	r3, [pc, #148]	@ (8002b1c <HAL_RCC_ClockConfig+0x1b8>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d20c      	bcs.n	8002aac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a92:	4b22      	ldr	r3, [pc, #136]	@ (8002b1c <HAL_RCC_ClockConfig+0x1b8>)
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a9a:	4b20      	ldr	r3, [pc, #128]	@ (8002b1c <HAL_RCC_ClockConfig+0x1b8>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d001      	beq.n	8002aac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e032      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d008      	beq.n	8002aca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ab8:	4b19      	ldr	r3, [pc, #100]	@ (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	4916      	ldr	r1, [pc, #88]	@ (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0308 	and.w	r3, r3, #8
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d009      	beq.n	8002aea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ad6:	4b12      	ldr	r3, [pc, #72]	@ (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	490e      	ldr	r1, [pc, #56]	@ (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002aea:	f000 f821 	bl	8002b30 <HAL_RCC_GetSysClockFreq>
 8002aee:	4602      	mov	r2, r0
 8002af0:	4b0b      	ldr	r3, [pc, #44]	@ (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	091b      	lsrs	r3, r3, #4
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	490a      	ldr	r1, [pc, #40]	@ (8002b24 <HAL_RCC_ClockConfig+0x1c0>)
 8002afc:	5ccb      	ldrb	r3, [r1, r3]
 8002afe:	fa22 f303 	lsr.w	r3, r2, r3
 8002b02:	4a09      	ldr	r2, [pc, #36]	@ (8002b28 <HAL_RCC_ClockConfig+0x1c4>)
 8002b04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002b06:	4b09      	ldr	r3, [pc, #36]	@ (8002b2c <HAL_RCC_ClockConfig+0x1c8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fe fcc0 	bl	8001490 <HAL_InitTick>

  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40023c00 	.word	0x40023c00
 8002b20:	40023800 	.word	0x40023800
 8002b24:	08005014 	.word	0x08005014
 8002b28:	20000000 	.word	0x20000000
 8002b2c:	20000004 	.word	0x20000004

08002b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b34:	b094      	sub	sp, #80	@ 0x50
 8002b36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b48:	4b79      	ldr	r3, [pc, #484]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 030c 	and.w	r3, r3, #12
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d00d      	beq.n	8002b70 <HAL_RCC_GetSysClockFreq+0x40>
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	f200 80e1 	bhi.w	8002d1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d002      	beq.n	8002b64 <HAL_RCC_GetSysClockFreq+0x34>
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d003      	beq.n	8002b6a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b62:	e0db      	b.n	8002d1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b64:	4b73      	ldr	r3, [pc, #460]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b66:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b68:	e0db      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b6a:	4b73      	ldr	r3, [pc, #460]	@ (8002d38 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b6c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b6e:	e0d8      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b70:	4b6f      	ldr	r3, [pc, #444]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b78:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b7a:	4b6d      	ldr	r3, [pc, #436]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d063      	beq.n	8002c4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b86:	4b6a      	ldr	r3, [pc, #424]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	099b      	lsrs	r3, r3, #6
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b90:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b98:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002ba2:	4622      	mov	r2, r4
 8002ba4:	462b      	mov	r3, r5
 8002ba6:	f04f 0000 	mov.w	r0, #0
 8002baa:	f04f 0100 	mov.w	r1, #0
 8002bae:	0159      	lsls	r1, r3, #5
 8002bb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bb4:	0150      	lsls	r0, r2, #5
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	460b      	mov	r3, r1
 8002bba:	4621      	mov	r1, r4
 8002bbc:	1a51      	subs	r1, r2, r1
 8002bbe:	6139      	str	r1, [r7, #16]
 8002bc0:	4629      	mov	r1, r5
 8002bc2:	eb63 0301 	sbc.w	r3, r3, r1
 8002bc6:	617b      	str	r3, [r7, #20]
 8002bc8:	f04f 0200 	mov.w	r2, #0
 8002bcc:	f04f 0300 	mov.w	r3, #0
 8002bd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bd4:	4659      	mov	r1, fp
 8002bd6:	018b      	lsls	r3, r1, #6
 8002bd8:	4651      	mov	r1, sl
 8002bda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bde:	4651      	mov	r1, sl
 8002be0:	018a      	lsls	r2, r1, #6
 8002be2:	4651      	mov	r1, sl
 8002be4:	ebb2 0801 	subs.w	r8, r2, r1
 8002be8:	4659      	mov	r1, fp
 8002bea:	eb63 0901 	sbc.w	r9, r3, r1
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	f04f 0300 	mov.w	r3, #0
 8002bf6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c02:	4690      	mov	r8, r2
 8002c04:	4699      	mov	r9, r3
 8002c06:	4623      	mov	r3, r4
 8002c08:	eb18 0303 	adds.w	r3, r8, r3
 8002c0c:	60bb      	str	r3, [r7, #8]
 8002c0e:	462b      	mov	r3, r5
 8002c10:	eb49 0303 	adc.w	r3, r9, r3
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	f04f 0200 	mov.w	r2, #0
 8002c1a:	f04f 0300 	mov.w	r3, #0
 8002c1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c22:	4629      	mov	r1, r5
 8002c24:	024b      	lsls	r3, r1, #9
 8002c26:	4621      	mov	r1, r4
 8002c28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c2c:	4621      	mov	r1, r4
 8002c2e:	024a      	lsls	r2, r1, #9
 8002c30:	4610      	mov	r0, r2
 8002c32:	4619      	mov	r1, r3
 8002c34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c36:	2200      	movs	r2, #0
 8002c38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c40:	f7fd fb1e 	bl	8000280 <__aeabi_uldivmod>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	4613      	mov	r3, r2
 8002c4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c4c:	e058      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c4e:	4b38      	ldr	r3, [pc, #224]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	099b      	lsrs	r3, r3, #6
 8002c54:	2200      	movs	r2, #0
 8002c56:	4618      	mov	r0, r3
 8002c58:	4611      	mov	r1, r2
 8002c5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c5e:	623b      	str	r3, [r7, #32]
 8002c60:	2300      	movs	r3, #0
 8002c62:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c68:	4642      	mov	r2, r8
 8002c6a:	464b      	mov	r3, r9
 8002c6c:	f04f 0000 	mov.w	r0, #0
 8002c70:	f04f 0100 	mov.w	r1, #0
 8002c74:	0159      	lsls	r1, r3, #5
 8002c76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c7a:	0150      	lsls	r0, r2, #5
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4641      	mov	r1, r8
 8002c82:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c86:	4649      	mov	r1, r9
 8002c88:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ca0:	ebb2 040a 	subs.w	r4, r2, sl
 8002ca4:	eb63 050b 	sbc.w	r5, r3, fp
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	00eb      	lsls	r3, r5, #3
 8002cb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cb6:	00e2      	lsls	r2, r4, #3
 8002cb8:	4614      	mov	r4, r2
 8002cba:	461d      	mov	r5, r3
 8002cbc:	4643      	mov	r3, r8
 8002cbe:	18e3      	adds	r3, r4, r3
 8002cc0:	603b      	str	r3, [r7, #0]
 8002cc2:	464b      	mov	r3, r9
 8002cc4:	eb45 0303 	adc.w	r3, r5, r3
 8002cc8:	607b      	str	r3, [r7, #4]
 8002cca:	f04f 0200 	mov.w	r2, #0
 8002cce:	f04f 0300 	mov.w	r3, #0
 8002cd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cd6:	4629      	mov	r1, r5
 8002cd8:	028b      	lsls	r3, r1, #10
 8002cda:	4621      	mov	r1, r4
 8002cdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ce0:	4621      	mov	r1, r4
 8002ce2:	028a      	lsls	r2, r1, #10
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cea:	2200      	movs	r2, #0
 8002cec:	61bb      	str	r3, [r7, #24]
 8002cee:	61fa      	str	r2, [r7, #28]
 8002cf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cf4:	f7fd fac4 	bl	8000280 <__aeabi_uldivmod>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d00:	4b0b      	ldr	r3, [pc, #44]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	0c1b      	lsrs	r3, r3, #16
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002d10:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d18:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d1a:	e002      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d1c:	4b05      	ldr	r3, [pc, #20]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d1e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3750      	adds	r7, #80	@ 0x50
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d2e:	bf00      	nop
 8002d30:	40023800 	.word	0x40023800
 8002d34:	00f42400 	.word	0x00f42400
 8002d38:	007a1200 	.word	0x007a1200

08002d3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d40:	4b03      	ldr	r3, [pc, #12]	@ (8002d50 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d42:	681b      	ldr	r3, [r3, #0]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	20000000 	.word	0x20000000

08002d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d58:	f7ff fff0 	bl	8002d3c <HAL_RCC_GetHCLKFreq>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	4b05      	ldr	r3, [pc, #20]	@ (8002d74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	0a9b      	lsrs	r3, r3, #10
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	4903      	ldr	r1, [pc, #12]	@ (8002d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d6a:	5ccb      	ldrb	r3, [r1, r3]
 8002d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40023800 	.word	0x40023800
 8002d78:	08005024 	.word	0x08005024

08002d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d80:	f7ff ffdc 	bl	8002d3c <HAL_RCC_GetHCLKFreq>
 8002d84:	4602      	mov	r2, r0
 8002d86:	4b05      	ldr	r3, [pc, #20]	@ (8002d9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	0b5b      	lsrs	r3, r3, #13
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	4903      	ldr	r1, [pc, #12]	@ (8002da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d92:	5ccb      	ldrb	r3, [r1, r3]
 8002d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	08005024 	.word	0x08005024

08002da4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e041      	b.n	8002e3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d106      	bne.n	8002dd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7fe f978 	bl	80010c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3304      	adds	r3, #4
 8002de0:	4619      	mov	r1, r3
 8002de2:	4610      	mov	r0, r2
 8002de4:	f000 fa70 	bl	80032c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
	...

08002e44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d001      	beq.n	8002e5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e044      	b.n	8002ee6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68da      	ldr	r2, [r3, #12]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 0201 	orr.w	r2, r2, #1
 8002e72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a1e      	ldr	r2, [pc, #120]	@ (8002ef4 <HAL_TIM_Base_Start_IT+0xb0>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d018      	beq.n	8002eb0 <HAL_TIM_Base_Start_IT+0x6c>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e86:	d013      	beq.n	8002eb0 <HAL_TIM_Base_Start_IT+0x6c>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a1a      	ldr	r2, [pc, #104]	@ (8002ef8 <HAL_TIM_Base_Start_IT+0xb4>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d00e      	beq.n	8002eb0 <HAL_TIM_Base_Start_IT+0x6c>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a19      	ldr	r2, [pc, #100]	@ (8002efc <HAL_TIM_Base_Start_IT+0xb8>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d009      	beq.n	8002eb0 <HAL_TIM_Base_Start_IT+0x6c>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a17      	ldr	r2, [pc, #92]	@ (8002f00 <HAL_TIM_Base_Start_IT+0xbc>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d004      	beq.n	8002eb0 <HAL_TIM_Base_Start_IT+0x6c>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a16      	ldr	r2, [pc, #88]	@ (8002f04 <HAL_TIM_Base_Start_IT+0xc0>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d111      	bne.n	8002ed4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2b06      	cmp	r3, #6
 8002ec0:	d010      	beq.n	8002ee4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f042 0201 	orr.w	r2, r2, #1
 8002ed0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed2:	e007      	b.n	8002ee4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0201 	orr.w	r2, r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3714      	adds	r7, #20
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	40010000 	.word	0x40010000
 8002ef8:	40000400 	.word	0x40000400
 8002efc:	40000800 	.word	0x40000800
 8002f00:	40000c00 	.word	0x40000c00
 8002f04:	40014000 	.word	0x40014000

08002f08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d020      	beq.n	8002f6c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d01b      	beq.n	8002f6c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f06f 0202 	mvn.w	r2, #2
 8002f3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f999 	bl	800328a <HAL_TIM_IC_CaptureCallback>
 8002f58:	e005      	b.n	8002f66 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f98b 	bl	8003276 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 f99c 	bl	800329e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	f003 0304 	and.w	r3, r3, #4
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d020      	beq.n	8002fb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d01b      	beq.n	8002fb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f06f 0204 	mvn.w	r2, #4
 8002f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2202      	movs	r2, #2
 8002f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f973 	bl	800328a <HAL_TIM_IC_CaptureCallback>
 8002fa4:	e005      	b.n	8002fb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f965 	bl	8003276 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 f976 	bl	800329e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d020      	beq.n	8003004 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f003 0308 	and.w	r3, r3, #8
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d01b      	beq.n	8003004 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f06f 0208 	mvn.w	r2, #8
 8002fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2204      	movs	r2, #4
 8002fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f94d 	bl	800328a <HAL_TIM_IC_CaptureCallback>
 8002ff0:	e005      	b.n	8002ffe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f93f 	bl	8003276 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f950 	bl	800329e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	f003 0310 	and.w	r3, r3, #16
 800300a:	2b00      	cmp	r3, #0
 800300c:	d020      	beq.n	8003050 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f003 0310 	and.w	r3, r3, #16
 8003014:	2b00      	cmp	r3, #0
 8003016:	d01b      	beq.n	8003050 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f06f 0210 	mvn.w	r2, #16
 8003020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2208      	movs	r2, #8
 8003026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f927 	bl	800328a <HAL_TIM_IC_CaptureCallback>
 800303c:	e005      	b.n	800304a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f919 	bl	8003276 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 f92a 	bl	800329e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00c      	beq.n	8003074 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b00      	cmp	r3, #0
 8003062:	d007      	beq.n	8003074 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f06f 0201 	mvn.w	r2, #1
 800306c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7fd fda8 	bl	8000bc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00c      	beq.n	8003098 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003084:	2b00      	cmp	r3, #0
 8003086:	d007      	beq.n	8003098 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 fab6 	bl	8003604 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00c      	beq.n	80030bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d007      	beq.n	80030bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80030b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f8fb 	bl	80032b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f003 0320 	and.w	r3, r3, #32
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00c      	beq.n	80030e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f003 0320 	and.w	r3, r3, #32
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d007      	beq.n	80030e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f06f 0220 	mvn.w	r2, #32
 80030d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 fa88 	bl	80035f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030e0:	bf00      	nop
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030f2:	2300      	movs	r3, #0
 80030f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d101      	bne.n	8003104 <HAL_TIM_ConfigClockSource+0x1c>
 8003100:	2302      	movs	r3, #2
 8003102:	e0b4      	b.n	800326e <HAL_TIM_ConfigClockSource+0x186>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2202      	movs	r2, #2
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003122:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800312a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68ba      	ldr	r2, [r7, #8]
 8003132:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800313c:	d03e      	beq.n	80031bc <HAL_TIM_ConfigClockSource+0xd4>
 800313e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003142:	f200 8087 	bhi.w	8003254 <HAL_TIM_ConfigClockSource+0x16c>
 8003146:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800314a:	f000 8086 	beq.w	800325a <HAL_TIM_ConfigClockSource+0x172>
 800314e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003152:	d87f      	bhi.n	8003254 <HAL_TIM_ConfigClockSource+0x16c>
 8003154:	2b70      	cmp	r3, #112	@ 0x70
 8003156:	d01a      	beq.n	800318e <HAL_TIM_ConfigClockSource+0xa6>
 8003158:	2b70      	cmp	r3, #112	@ 0x70
 800315a:	d87b      	bhi.n	8003254 <HAL_TIM_ConfigClockSource+0x16c>
 800315c:	2b60      	cmp	r3, #96	@ 0x60
 800315e:	d050      	beq.n	8003202 <HAL_TIM_ConfigClockSource+0x11a>
 8003160:	2b60      	cmp	r3, #96	@ 0x60
 8003162:	d877      	bhi.n	8003254 <HAL_TIM_ConfigClockSource+0x16c>
 8003164:	2b50      	cmp	r3, #80	@ 0x50
 8003166:	d03c      	beq.n	80031e2 <HAL_TIM_ConfigClockSource+0xfa>
 8003168:	2b50      	cmp	r3, #80	@ 0x50
 800316a:	d873      	bhi.n	8003254 <HAL_TIM_ConfigClockSource+0x16c>
 800316c:	2b40      	cmp	r3, #64	@ 0x40
 800316e:	d058      	beq.n	8003222 <HAL_TIM_ConfigClockSource+0x13a>
 8003170:	2b40      	cmp	r3, #64	@ 0x40
 8003172:	d86f      	bhi.n	8003254 <HAL_TIM_ConfigClockSource+0x16c>
 8003174:	2b30      	cmp	r3, #48	@ 0x30
 8003176:	d064      	beq.n	8003242 <HAL_TIM_ConfigClockSource+0x15a>
 8003178:	2b30      	cmp	r3, #48	@ 0x30
 800317a:	d86b      	bhi.n	8003254 <HAL_TIM_ConfigClockSource+0x16c>
 800317c:	2b20      	cmp	r3, #32
 800317e:	d060      	beq.n	8003242 <HAL_TIM_ConfigClockSource+0x15a>
 8003180:	2b20      	cmp	r3, #32
 8003182:	d867      	bhi.n	8003254 <HAL_TIM_ConfigClockSource+0x16c>
 8003184:	2b00      	cmp	r3, #0
 8003186:	d05c      	beq.n	8003242 <HAL_TIM_ConfigClockSource+0x15a>
 8003188:	2b10      	cmp	r3, #16
 800318a:	d05a      	beq.n	8003242 <HAL_TIM_ConfigClockSource+0x15a>
 800318c:	e062      	b.n	8003254 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800319e:	f000 f999 	bl	80034d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80031b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	609a      	str	r2, [r3, #8]
      break;
 80031ba:	e04f      	b.n	800325c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031cc:	f000 f982 	bl	80034d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031de:	609a      	str	r2, [r3, #8]
      break;
 80031e0:	e03c      	b.n	800325c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ee:	461a      	mov	r2, r3
 80031f0:	f000 f8f6 	bl	80033e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2150      	movs	r1, #80	@ 0x50
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 f94f 	bl	800349e <TIM_ITRx_SetConfig>
      break;
 8003200:	e02c      	b.n	800325c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800320e:	461a      	mov	r2, r3
 8003210:	f000 f915 	bl	800343e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2160      	movs	r1, #96	@ 0x60
 800321a:	4618      	mov	r0, r3
 800321c:	f000 f93f 	bl	800349e <TIM_ITRx_SetConfig>
      break;
 8003220:	e01c      	b.n	800325c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800322e:	461a      	mov	r2, r3
 8003230:	f000 f8d6 	bl	80033e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2140      	movs	r1, #64	@ 0x40
 800323a:	4618      	mov	r0, r3
 800323c:	f000 f92f 	bl	800349e <TIM_ITRx_SetConfig>
      break;
 8003240:	e00c      	b.n	800325c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4619      	mov	r1, r3
 800324c:	4610      	mov	r0, r2
 800324e:	f000 f926 	bl	800349e <TIM_ITRx_SetConfig>
      break;
 8003252:	e003      	b.n	800325c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	73fb      	strb	r3, [r7, #15]
      break;
 8003258:	e000      	b.n	800325c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800325a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800326c:	7bfb      	ldrb	r3, [r7, #15]
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003276:	b480      	push	{r7}
 8003278:	b083      	sub	sp, #12
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800329e:	b480      	push	{r7}
 80032a0:	b083      	sub	sp, #12
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b083      	sub	sp, #12
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032ba:	bf00      	nop
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
	...

080032c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a3a      	ldr	r2, [pc, #232]	@ (80033c4 <TIM_Base_SetConfig+0xfc>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d00f      	beq.n	8003300 <TIM_Base_SetConfig+0x38>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032e6:	d00b      	beq.n	8003300 <TIM_Base_SetConfig+0x38>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a37      	ldr	r2, [pc, #220]	@ (80033c8 <TIM_Base_SetConfig+0x100>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d007      	beq.n	8003300 <TIM_Base_SetConfig+0x38>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a36      	ldr	r2, [pc, #216]	@ (80033cc <TIM_Base_SetConfig+0x104>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d003      	beq.n	8003300 <TIM_Base_SetConfig+0x38>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a35      	ldr	r2, [pc, #212]	@ (80033d0 <TIM_Base_SetConfig+0x108>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d108      	bne.n	8003312 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003306:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	4313      	orrs	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a2b      	ldr	r2, [pc, #172]	@ (80033c4 <TIM_Base_SetConfig+0xfc>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d01b      	beq.n	8003352 <TIM_Base_SetConfig+0x8a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003320:	d017      	beq.n	8003352 <TIM_Base_SetConfig+0x8a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a28      	ldr	r2, [pc, #160]	@ (80033c8 <TIM_Base_SetConfig+0x100>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d013      	beq.n	8003352 <TIM_Base_SetConfig+0x8a>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a27      	ldr	r2, [pc, #156]	@ (80033cc <TIM_Base_SetConfig+0x104>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d00f      	beq.n	8003352 <TIM_Base_SetConfig+0x8a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a26      	ldr	r2, [pc, #152]	@ (80033d0 <TIM_Base_SetConfig+0x108>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d00b      	beq.n	8003352 <TIM_Base_SetConfig+0x8a>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a25      	ldr	r2, [pc, #148]	@ (80033d4 <TIM_Base_SetConfig+0x10c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d007      	beq.n	8003352 <TIM_Base_SetConfig+0x8a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a24      	ldr	r2, [pc, #144]	@ (80033d8 <TIM_Base_SetConfig+0x110>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d003      	beq.n	8003352 <TIM_Base_SetConfig+0x8a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a23      	ldr	r2, [pc, #140]	@ (80033dc <TIM_Base_SetConfig+0x114>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d108      	bne.n	8003364 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003358:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	4313      	orrs	r3, r2
 8003362:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	4313      	orrs	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	689a      	ldr	r2, [r3, #8]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a0e      	ldr	r2, [pc, #56]	@ (80033c4 <TIM_Base_SetConfig+0xfc>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d103      	bne.n	8003398 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	691a      	ldr	r2, [r3, #16]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d105      	bne.n	80033b6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	f023 0201 	bic.w	r2, r3, #1
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	611a      	str	r2, [r3, #16]
  }
}
 80033b6:	bf00      	nop
 80033b8:	3714      	adds	r7, #20
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	40010000 	.word	0x40010000
 80033c8:	40000400 	.word	0x40000400
 80033cc:	40000800 	.word	0x40000800
 80033d0:	40000c00 	.word	0x40000c00
 80033d4:	40014000 	.word	0x40014000
 80033d8:	40014400 	.word	0x40014400
 80033dc:	40014800 	.word	0x40014800

080033e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b087      	sub	sp, #28
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	f023 0201 	bic.w	r2, r3, #1
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800340a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	011b      	lsls	r3, r3, #4
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	4313      	orrs	r3, r2
 8003414:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f023 030a 	bic.w	r3, r3, #10
 800341c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	4313      	orrs	r3, r2
 8003424:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	621a      	str	r2, [r3, #32]
}
 8003432:	bf00      	nop
 8003434:	371c      	adds	r7, #28
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800343e:	b480      	push	{r7}
 8003440:	b087      	sub	sp, #28
 8003442:	af00      	add	r7, sp, #0
 8003444:	60f8      	str	r0, [r7, #12]
 8003446:	60b9      	str	r1, [r7, #8]
 8003448:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	f023 0210 	bic.w	r2, r3, #16
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003468:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	031b      	lsls	r3, r3, #12
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	4313      	orrs	r3, r2
 8003472:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800347a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	4313      	orrs	r3, r2
 8003484:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	621a      	str	r2, [r3, #32]
}
 8003492:	bf00      	nop
 8003494:	371c      	adds	r7, #28
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800349e:	b480      	push	{r7}
 80034a0:	b085      	sub	sp, #20
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
 80034a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	f043 0307 	orr.w	r3, r3, #7
 80034c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	609a      	str	r2, [r3, #8]
}
 80034c8:	bf00      	nop
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b087      	sub	sp, #28
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
 80034e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80034ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	021a      	lsls	r2, r3, #8
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	431a      	orrs	r2, r3
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	4313      	orrs	r3, r2
 8003500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	609a      	str	r2, [r3, #8]
}
 8003508:	bf00      	nop
 800350a:	371c      	adds	r7, #28
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003524:	2b01      	cmp	r3, #1
 8003526:	d101      	bne.n	800352c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003528:	2302      	movs	r3, #2
 800352a:	e050      	b.n	80035ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2202      	movs	r2, #2
 8003538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003552:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	4313      	orrs	r3, r2
 800355c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a1c      	ldr	r2, [pc, #112]	@ (80035dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d018      	beq.n	80035a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003578:	d013      	beq.n	80035a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a18      	ldr	r2, [pc, #96]	@ (80035e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d00e      	beq.n	80035a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a16      	ldr	r2, [pc, #88]	@ (80035e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d009      	beq.n	80035a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a15      	ldr	r2, [pc, #84]	@ (80035e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d004      	beq.n	80035a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a13      	ldr	r2, [pc, #76]	@ (80035ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d10c      	bne.n	80035bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68ba      	ldr	r2, [r7, #8]
 80035ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	40010000 	.word	0x40010000
 80035e0:	40000400 	.word	0x40000400
 80035e4:	40000800 	.word	0x40000800
 80035e8:	40000c00 	.word	0x40000c00
 80035ec:	40014000 	.word	0x40014000

080035f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e042      	b.n	80036b0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d106      	bne.n	8003644 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7fd fd66 	bl	8001110 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2224      	movs	r2, #36	@ 0x24
 8003648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800365a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 f82b 	bl	80036b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	691a      	ldr	r2, [r3, #16]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003670:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	695a      	ldr	r2, [r3, #20]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003680:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68da      	ldr	r2, [r3, #12]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003690:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2220      	movs	r2, #32
 800369c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036bc:	b0c0      	sub	sp, #256	@ 0x100
 80036be:	af00      	add	r7, sp, #0
 80036c0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80036d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036d4:	68d9      	ldr	r1, [r3, #12]
 80036d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	ea40 0301 	orr.w	r3, r0, r1
 80036e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	431a      	orrs	r2, r3
 80036f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	431a      	orrs	r2, r3
 80036f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	4313      	orrs	r3, r2
 8003700:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003710:	f021 010c 	bic.w	r1, r1, #12
 8003714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800371e:	430b      	orrs	r3, r1
 8003720:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800372e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003732:	6999      	ldr	r1, [r3, #24]
 8003734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	ea40 0301 	orr.w	r3, r0, r1
 800373e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	4b8f      	ldr	r3, [pc, #572]	@ (8003984 <UART_SetConfig+0x2cc>)
 8003748:	429a      	cmp	r2, r3
 800374a:	d005      	beq.n	8003758 <UART_SetConfig+0xa0>
 800374c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	4b8d      	ldr	r3, [pc, #564]	@ (8003988 <UART_SetConfig+0x2d0>)
 8003754:	429a      	cmp	r2, r3
 8003756:	d104      	bne.n	8003762 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003758:	f7ff fb10 	bl	8002d7c <HAL_RCC_GetPCLK2Freq>
 800375c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003760:	e003      	b.n	800376a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003762:	f7ff faf7 	bl	8002d54 <HAL_RCC_GetPCLK1Freq>
 8003766:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800376a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003774:	f040 810c 	bne.w	8003990 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003778:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800377c:	2200      	movs	r2, #0
 800377e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003782:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003786:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800378a:	4622      	mov	r2, r4
 800378c:	462b      	mov	r3, r5
 800378e:	1891      	adds	r1, r2, r2
 8003790:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003792:	415b      	adcs	r3, r3
 8003794:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003796:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800379a:	4621      	mov	r1, r4
 800379c:	eb12 0801 	adds.w	r8, r2, r1
 80037a0:	4629      	mov	r1, r5
 80037a2:	eb43 0901 	adc.w	r9, r3, r1
 80037a6:	f04f 0200 	mov.w	r2, #0
 80037aa:	f04f 0300 	mov.w	r3, #0
 80037ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037ba:	4690      	mov	r8, r2
 80037bc:	4699      	mov	r9, r3
 80037be:	4623      	mov	r3, r4
 80037c0:	eb18 0303 	adds.w	r3, r8, r3
 80037c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80037c8:	462b      	mov	r3, r5
 80037ca:	eb49 0303 	adc.w	r3, r9, r3
 80037ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80037d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80037de:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80037e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80037e6:	460b      	mov	r3, r1
 80037e8:	18db      	adds	r3, r3, r3
 80037ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80037ec:	4613      	mov	r3, r2
 80037ee:	eb42 0303 	adc.w	r3, r2, r3
 80037f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80037f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80037f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80037fc:	f7fc fd40 	bl	8000280 <__aeabi_uldivmod>
 8003800:	4602      	mov	r2, r0
 8003802:	460b      	mov	r3, r1
 8003804:	4b61      	ldr	r3, [pc, #388]	@ (800398c <UART_SetConfig+0x2d4>)
 8003806:	fba3 2302 	umull	r2, r3, r3, r2
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	011c      	lsls	r4, r3, #4
 800380e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003812:	2200      	movs	r2, #0
 8003814:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003818:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800381c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003820:	4642      	mov	r2, r8
 8003822:	464b      	mov	r3, r9
 8003824:	1891      	adds	r1, r2, r2
 8003826:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003828:	415b      	adcs	r3, r3
 800382a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800382c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003830:	4641      	mov	r1, r8
 8003832:	eb12 0a01 	adds.w	sl, r2, r1
 8003836:	4649      	mov	r1, r9
 8003838:	eb43 0b01 	adc.w	fp, r3, r1
 800383c:	f04f 0200 	mov.w	r2, #0
 8003840:	f04f 0300 	mov.w	r3, #0
 8003844:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003848:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800384c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003850:	4692      	mov	sl, r2
 8003852:	469b      	mov	fp, r3
 8003854:	4643      	mov	r3, r8
 8003856:	eb1a 0303 	adds.w	r3, sl, r3
 800385a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800385e:	464b      	mov	r3, r9
 8003860:	eb4b 0303 	adc.w	r3, fp, r3
 8003864:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003874:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003878:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800387c:	460b      	mov	r3, r1
 800387e:	18db      	adds	r3, r3, r3
 8003880:	643b      	str	r3, [r7, #64]	@ 0x40
 8003882:	4613      	mov	r3, r2
 8003884:	eb42 0303 	adc.w	r3, r2, r3
 8003888:	647b      	str	r3, [r7, #68]	@ 0x44
 800388a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800388e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003892:	f7fc fcf5 	bl	8000280 <__aeabi_uldivmod>
 8003896:	4602      	mov	r2, r0
 8003898:	460b      	mov	r3, r1
 800389a:	4611      	mov	r1, r2
 800389c:	4b3b      	ldr	r3, [pc, #236]	@ (800398c <UART_SetConfig+0x2d4>)
 800389e:	fba3 2301 	umull	r2, r3, r3, r1
 80038a2:	095b      	lsrs	r3, r3, #5
 80038a4:	2264      	movs	r2, #100	@ 0x64
 80038a6:	fb02 f303 	mul.w	r3, r2, r3
 80038aa:	1acb      	subs	r3, r1, r3
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80038b2:	4b36      	ldr	r3, [pc, #216]	@ (800398c <UART_SetConfig+0x2d4>)
 80038b4:	fba3 2302 	umull	r2, r3, r3, r2
 80038b8:	095b      	lsrs	r3, r3, #5
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80038c0:	441c      	add	r4, r3
 80038c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038c6:	2200      	movs	r2, #0
 80038c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038cc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80038d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80038d4:	4642      	mov	r2, r8
 80038d6:	464b      	mov	r3, r9
 80038d8:	1891      	adds	r1, r2, r2
 80038da:	63b9      	str	r1, [r7, #56]	@ 0x38
 80038dc:	415b      	adcs	r3, r3
 80038de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80038e4:	4641      	mov	r1, r8
 80038e6:	1851      	adds	r1, r2, r1
 80038e8:	6339      	str	r1, [r7, #48]	@ 0x30
 80038ea:	4649      	mov	r1, r9
 80038ec:	414b      	adcs	r3, r1
 80038ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80038f0:	f04f 0200 	mov.w	r2, #0
 80038f4:	f04f 0300 	mov.w	r3, #0
 80038f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80038fc:	4659      	mov	r1, fp
 80038fe:	00cb      	lsls	r3, r1, #3
 8003900:	4651      	mov	r1, sl
 8003902:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003906:	4651      	mov	r1, sl
 8003908:	00ca      	lsls	r2, r1, #3
 800390a:	4610      	mov	r0, r2
 800390c:	4619      	mov	r1, r3
 800390e:	4603      	mov	r3, r0
 8003910:	4642      	mov	r2, r8
 8003912:	189b      	adds	r3, r3, r2
 8003914:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003918:	464b      	mov	r3, r9
 800391a:	460a      	mov	r2, r1
 800391c:	eb42 0303 	adc.w	r3, r2, r3
 8003920:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003930:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003934:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003938:	460b      	mov	r3, r1
 800393a:	18db      	adds	r3, r3, r3
 800393c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800393e:	4613      	mov	r3, r2
 8003940:	eb42 0303 	adc.w	r3, r2, r3
 8003944:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003946:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800394a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800394e:	f7fc fc97 	bl	8000280 <__aeabi_uldivmod>
 8003952:	4602      	mov	r2, r0
 8003954:	460b      	mov	r3, r1
 8003956:	4b0d      	ldr	r3, [pc, #52]	@ (800398c <UART_SetConfig+0x2d4>)
 8003958:	fba3 1302 	umull	r1, r3, r3, r2
 800395c:	095b      	lsrs	r3, r3, #5
 800395e:	2164      	movs	r1, #100	@ 0x64
 8003960:	fb01 f303 	mul.w	r3, r1, r3
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	3332      	adds	r3, #50	@ 0x32
 800396a:	4a08      	ldr	r2, [pc, #32]	@ (800398c <UART_SetConfig+0x2d4>)
 800396c:	fba2 2303 	umull	r2, r3, r2, r3
 8003970:	095b      	lsrs	r3, r3, #5
 8003972:	f003 0207 	and.w	r2, r3, #7
 8003976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4422      	add	r2, r4
 800397e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003980:	e106      	b.n	8003b90 <UART_SetConfig+0x4d8>
 8003982:	bf00      	nop
 8003984:	40011000 	.word	0x40011000
 8003988:	40011400 	.word	0x40011400
 800398c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003990:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003994:	2200      	movs	r2, #0
 8003996:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800399a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800399e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80039a2:	4642      	mov	r2, r8
 80039a4:	464b      	mov	r3, r9
 80039a6:	1891      	adds	r1, r2, r2
 80039a8:	6239      	str	r1, [r7, #32]
 80039aa:	415b      	adcs	r3, r3
 80039ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80039ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039b2:	4641      	mov	r1, r8
 80039b4:	1854      	adds	r4, r2, r1
 80039b6:	4649      	mov	r1, r9
 80039b8:	eb43 0501 	adc.w	r5, r3, r1
 80039bc:	f04f 0200 	mov.w	r2, #0
 80039c0:	f04f 0300 	mov.w	r3, #0
 80039c4:	00eb      	lsls	r3, r5, #3
 80039c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039ca:	00e2      	lsls	r2, r4, #3
 80039cc:	4614      	mov	r4, r2
 80039ce:	461d      	mov	r5, r3
 80039d0:	4643      	mov	r3, r8
 80039d2:	18e3      	adds	r3, r4, r3
 80039d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80039d8:	464b      	mov	r3, r9
 80039da:	eb45 0303 	adc.w	r3, r5, r3
 80039de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80039e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80039ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80039f2:	f04f 0200 	mov.w	r2, #0
 80039f6:	f04f 0300 	mov.w	r3, #0
 80039fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80039fe:	4629      	mov	r1, r5
 8003a00:	008b      	lsls	r3, r1, #2
 8003a02:	4621      	mov	r1, r4
 8003a04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a08:	4621      	mov	r1, r4
 8003a0a:	008a      	lsls	r2, r1, #2
 8003a0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003a10:	f7fc fc36 	bl	8000280 <__aeabi_uldivmod>
 8003a14:	4602      	mov	r2, r0
 8003a16:	460b      	mov	r3, r1
 8003a18:	4b60      	ldr	r3, [pc, #384]	@ (8003b9c <UART_SetConfig+0x4e4>)
 8003a1a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a1e:	095b      	lsrs	r3, r3, #5
 8003a20:	011c      	lsls	r4, r3, #4
 8003a22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a26:	2200      	movs	r2, #0
 8003a28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a2c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003a30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003a34:	4642      	mov	r2, r8
 8003a36:	464b      	mov	r3, r9
 8003a38:	1891      	adds	r1, r2, r2
 8003a3a:	61b9      	str	r1, [r7, #24]
 8003a3c:	415b      	adcs	r3, r3
 8003a3e:	61fb      	str	r3, [r7, #28]
 8003a40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a44:	4641      	mov	r1, r8
 8003a46:	1851      	adds	r1, r2, r1
 8003a48:	6139      	str	r1, [r7, #16]
 8003a4a:	4649      	mov	r1, r9
 8003a4c:	414b      	adcs	r3, r1
 8003a4e:	617b      	str	r3, [r7, #20]
 8003a50:	f04f 0200 	mov.w	r2, #0
 8003a54:	f04f 0300 	mov.w	r3, #0
 8003a58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a5c:	4659      	mov	r1, fp
 8003a5e:	00cb      	lsls	r3, r1, #3
 8003a60:	4651      	mov	r1, sl
 8003a62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a66:	4651      	mov	r1, sl
 8003a68:	00ca      	lsls	r2, r1, #3
 8003a6a:	4610      	mov	r0, r2
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4603      	mov	r3, r0
 8003a70:	4642      	mov	r2, r8
 8003a72:	189b      	adds	r3, r3, r2
 8003a74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a78:	464b      	mov	r3, r9
 8003a7a:	460a      	mov	r2, r1
 8003a7c:	eb42 0303 	adc.w	r3, r2, r3
 8003a80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a8e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003a90:	f04f 0200 	mov.w	r2, #0
 8003a94:	f04f 0300 	mov.w	r3, #0
 8003a98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003a9c:	4649      	mov	r1, r9
 8003a9e:	008b      	lsls	r3, r1, #2
 8003aa0:	4641      	mov	r1, r8
 8003aa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aa6:	4641      	mov	r1, r8
 8003aa8:	008a      	lsls	r2, r1, #2
 8003aaa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003aae:	f7fc fbe7 	bl	8000280 <__aeabi_uldivmod>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	4611      	mov	r1, r2
 8003ab8:	4b38      	ldr	r3, [pc, #224]	@ (8003b9c <UART_SetConfig+0x4e4>)
 8003aba:	fba3 2301 	umull	r2, r3, r3, r1
 8003abe:	095b      	lsrs	r3, r3, #5
 8003ac0:	2264      	movs	r2, #100	@ 0x64
 8003ac2:	fb02 f303 	mul.w	r3, r2, r3
 8003ac6:	1acb      	subs	r3, r1, r3
 8003ac8:	011b      	lsls	r3, r3, #4
 8003aca:	3332      	adds	r3, #50	@ 0x32
 8003acc:	4a33      	ldr	r2, [pc, #204]	@ (8003b9c <UART_SetConfig+0x4e4>)
 8003ace:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad2:	095b      	lsrs	r3, r3, #5
 8003ad4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ad8:	441c      	add	r4, r3
 8003ada:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ade:	2200      	movs	r2, #0
 8003ae0:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ae2:	677a      	str	r2, [r7, #116]	@ 0x74
 8003ae4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003ae8:	4642      	mov	r2, r8
 8003aea:	464b      	mov	r3, r9
 8003aec:	1891      	adds	r1, r2, r2
 8003aee:	60b9      	str	r1, [r7, #8]
 8003af0:	415b      	adcs	r3, r3
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003af8:	4641      	mov	r1, r8
 8003afa:	1851      	adds	r1, r2, r1
 8003afc:	6039      	str	r1, [r7, #0]
 8003afe:	4649      	mov	r1, r9
 8003b00:	414b      	adcs	r3, r1
 8003b02:	607b      	str	r3, [r7, #4]
 8003b04:	f04f 0200 	mov.w	r2, #0
 8003b08:	f04f 0300 	mov.w	r3, #0
 8003b0c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b10:	4659      	mov	r1, fp
 8003b12:	00cb      	lsls	r3, r1, #3
 8003b14:	4651      	mov	r1, sl
 8003b16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b1a:	4651      	mov	r1, sl
 8003b1c:	00ca      	lsls	r2, r1, #3
 8003b1e:	4610      	mov	r0, r2
 8003b20:	4619      	mov	r1, r3
 8003b22:	4603      	mov	r3, r0
 8003b24:	4642      	mov	r2, r8
 8003b26:	189b      	adds	r3, r3, r2
 8003b28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b2a:	464b      	mov	r3, r9
 8003b2c:	460a      	mov	r2, r1
 8003b2e:	eb42 0303 	adc.w	r3, r2, r3
 8003b32:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b3e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003b40:	f04f 0200 	mov.w	r2, #0
 8003b44:	f04f 0300 	mov.w	r3, #0
 8003b48:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003b4c:	4649      	mov	r1, r9
 8003b4e:	008b      	lsls	r3, r1, #2
 8003b50:	4641      	mov	r1, r8
 8003b52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b56:	4641      	mov	r1, r8
 8003b58:	008a      	lsls	r2, r1, #2
 8003b5a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003b5e:	f7fc fb8f 	bl	8000280 <__aeabi_uldivmod>
 8003b62:	4602      	mov	r2, r0
 8003b64:	460b      	mov	r3, r1
 8003b66:	4b0d      	ldr	r3, [pc, #52]	@ (8003b9c <UART_SetConfig+0x4e4>)
 8003b68:	fba3 1302 	umull	r1, r3, r3, r2
 8003b6c:	095b      	lsrs	r3, r3, #5
 8003b6e:	2164      	movs	r1, #100	@ 0x64
 8003b70:	fb01 f303 	mul.w	r3, r1, r3
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	011b      	lsls	r3, r3, #4
 8003b78:	3332      	adds	r3, #50	@ 0x32
 8003b7a:	4a08      	ldr	r2, [pc, #32]	@ (8003b9c <UART_SetConfig+0x4e4>)
 8003b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b80:	095b      	lsrs	r3, r3, #5
 8003b82:	f003 020f 	and.w	r2, r3, #15
 8003b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4422      	add	r2, r4
 8003b8e:	609a      	str	r2, [r3, #8]
}
 8003b90:	bf00      	nop
 8003b92:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003b96:	46bd      	mov	sp, r7
 8003b98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b9c:	51eb851f 	.word	0x51eb851f

08003ba0 <srand>:
 8003ba0:	b538      	push	{r3, r4, r5, lr}
 8003ba2:	4b10      	ldr	r3, [pc, #64]	@ (8003be4 <srand+0x44>)
 8003ba4:	681d      	ldr	r5, [r3, #0]
 8003ba6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003ba8:	4604      	mov	r4, r0
 8003baa:	b9b3      	cbnz	r3, 8003bda <srand+0x3a>
 8003bac:	2018      	movs	r0, #24
 8003bae:	f000 fa9b 	bl	80040e8 <malloc>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	6328      	str	r0, [r5, #48]	@ 0x30
 8003bb6:	b920      	cbnz	r0, 8003bc2 <srand+0x22>
 8003bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8003be8 <srand+0x48>)
 8003bba:	480c      	ldr	r0, [pc, #48]	@ (8003bec <srand+0x4c>)
 8003bbc:	2146      	movs	r1, #70	@ 0x46
 8003bbe:	f000 fa2b 	bl	8004018 <__assert_func>
 8003bc2:	490b      	ldr	r1, [pc, #44]	@ (8003bf0 <srand+0x50>)
 8003bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf4 <srand+0x54>)
 8003bc6:	e9c0 1300 	strd	r1, r3, [r0]
 8003bca:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf8 <srand+0x58>)
 8003bcc:	6083      	str	r3, [r0, #8]
 8003bce:	230b      	movs	r3, #11
 8003bd0:	8183      	strh	r3, [r0, #12]
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	2001      	movs	r0, #1
 8003bd6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003bda:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003bdc:	2200      	movs	r2, #0
 8003bde:	611c      	str	r4, [r3, #16]
 8003be0:	615a      	str	r2, [r3, #20]
 8003be2:	bd38      	pop	{r3, r4, r5, pc}
 8003be4:	20000018 	.word	0x20000018
 8003be8:	0800502c 	.word	0x0800502c
 8003bec:	08005043 	.word	0x08005043
 8003bf0:	abcd330e 	.word	0xabcd330e
 8003bf4:	e66d1234 	.word	0xe66d1234
 8003bf8:	0005deec 	.word	0x0005deec

08003bfc <rand>:
 8003bfc:	4b16      	ldr	r3, [pc, #88]	@ (8003c58 <rand+0x5c>)
 8003bfe:	b510      	push	{r4, lr}
 8003c00:	681c      	ldr	r4, [r3, #0]
 8003c02:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003c04:	b9b3      	cbnz	r3, 8003c34 <rand+0x38>
 8003c06:	2018      	movs	r0, #24
 8003c08:	f000 fa6e 	bl	80040e8 <malloc>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	6320      	str	r0, [r4, #48]	@ 0x30
 8003c10:	b920      	cbnz	r0, 8003c1c <rand+0x20>
 8003c12:	4b12      	ldr	r3, [pc, #72]	@ (8003c5c <rand+0x60>)
 8003c14:	4812      	ldr	r0, [pc, #72]	@ (8003c60 <rand+0x64>)
 8003c16:	2152      	movs	r1, #82	@ 0x52
 8003c18:	f000 f9fe 	bl	8004018 <__assert_func>
 8003c1c:	4911      	ldr	r1, [pc, #68]	@ (8003c64 <rand+0x68>)
 8003c1e:	4b12      	ldr	r3, [pc, #72]	@ (8003c68 <rand+0x6c>)
 8003c20:	e9c0 1300 	strd	r1, r3, [r0]
 8003c24:	4b11      	ldr	r3, [pc, #68]	@ (8003c6c <rand+0x70>)
 8003c26:	6083      	str	r3, [r0, #8]
 8003c28:	230b      	movs	r3, #11
 8003c2a:	8183      	strh	r3, [r0, #12]
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	2001      	movs	r0, #1
 8003c30:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003c34:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003c36:	480e      	ldr	r0, [pc, #56]	@ (8003c70 <rand+0x74>)
 8003c38:	690b      	ldr	r3, [r1, #16]
 8003c3a:	694c      	ldr	r4, [r1, #20]
 8003c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8003c74 <rand+0x78>)
 8003c3e:	4358      	muls	r0, r3
 8003c40:	fb02 0004 	mla	r0, r2, r4, r0
 8003c44:	fba3 3202 	umull	r3, r2, r3, r2
 8003c48:	3301      	adds	r3, #1
 8003c4a:	eb40 0002 	adc.w	r0, r0, r2
 8003c4e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8003c52:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003c56:	bd10      	pop	{r4, pc}
 8003c58:	20000018 	.word	0x20000018
 8003c5c:	0800502c 	.word	0x0800502c
 8003c60:	08005043 	.word	0x08005043
 8003c64:	abcd330e 	.word	0xabcd330e
 8003c68:	e66d1234 	.word	0xe66d1234
 8003c6c:	0005deec 	.word	0x0005deec
 8003c70:	5851f42d 	.word	0x5851f42d
 8003c74:	4c957f2d 	.word	0x4c957f2d

08003c78 <std>:
 8003c78:	2300      	movs	r3, #0
 8003c7a:	b510      	push	{r4, lr}
 8003c7c:	4604      	mov	r4, r0
 8003c7e:	e9c0 3300 	strd	r3, r3, [r0]
 8003c82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c86:	6083      	str	r3, [r0, #8]
 8003c88:	8181      	strh	r1, [r0, #12]
 8003c8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8003c8c:	81c2      	strh	r2, [r0, #14]
 8003c8e:	6183      	str	r3, [r0, #24]
 8003c90:	4619      	mov	r1, r3
 8003c92:	2208      	movs	r2, #8
 8003c94:	305c      	adds	r0, #92	@ 0x5c
 8003c96:	f000 f914 	bl	8003ec2 <memset>
 8003c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003cd0 <std+0x58>)
 8003c9c:	6263      	str	r3, [r4, #36]	@ 0x24
 8003c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003cd4 <std+0x5c>)
 8003ca0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8003cd8 <std+0x60>)
 8003ca4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8003cdc <std+0x64>)
 8003ca8:	6323      	str	r3, [r4, #48]	@ 0x30
 8003caa:	4b0d      	ldr	r3, [pc, #52]	@ (8003ce0 <std+0x68>)
 8003cac:	6224      	str	r4, [r4, #32]
 8003cae:	429c      	cmp	r4, r3
 8003cb0:	d006      	beq.n	8003cc0 <std+0x48>
 8003cb2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003cb6:	4294      	cmp	r4, r2
 8003cb8:	d002      	beq.n	8003cc0 <std+0x48>
 8003cba:	33d0      	adds	r3, #208	@ 0xd0
 8003cbc:	429c      	cmp	r4, r3
 8003cbe:	d105      	bne.n	8003ccc <std+0x54>
 8003cc0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cc8:	f000 b9a2 	b.w	8004010 <__retarget_lock_init_recursive>
 8003ccc:	bd10      	pop	{r4, pc}
 8003cce:	bf00      	nop
 8003cd0:	08003e3d 	.word	0x08003e3d
 8003cd4:	08003e5f 	.word	0x08003e5f
 8003cd8:	08003e97 	.word	0x08003e97
 8003cdc:	08003ebb 	.word	0x08003ebb
 8003ce0:	20000408 	.word	0x20000408

08003ce4 <stdio_exit_handler>:
 8003ce4:	4a02      	ldr	r2, [pc, #8]	@ (8003cf0 <stdio_exit_handler+0xc>)
 8003ce6:	4903      	ldr	r1, [pc, #12]	@ (8003cf4 <stdio_exit_handler+0x10>)
 8003ce8:	4803      	ldr	r0, [pc, #12]	@ (8003cf8 <stdio_exit_handler+0x14>)
 8003cea:	f000 b869 	b.w	8003dc0 <_fwalk_sglue>
 8003cee:	bf00      	nop
 8003cf0:	2000000c 	.word	0x2000000c
 8003cf4:	08004929 	.word	0x08004929
 8003cf8:	2000001c 	.word	0x2000001c

08003cfc <cleanup_stdio>:
 8003cfc:	6841      	ldr	r1, [r0, #4]
 8003cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8003d30 <cleanup_stdio+0x34>)
 8003d00:	4299      	cmp	r1, r3
 8003d02:	b510      	push	{r4, lr}
 8003d04:	4604      	mov	r4, r0
 8003d06:	d001      	beq.n	8003d0c <cleanup_stdio+0x10>
 8003d08:	f000 fe0e 	bl	8004928 <_fflush_r>
 8003d0c:	68a1      	ldr	r1, [r4, #8]
 8003d0e:	4b09      	ldr	r3, [pc, #36]	@ (8003d34 <cleanup_stdio+0x38>)
 8003d10:	4299      	cmp	r1, r3
 8003d12:	d002      	beq.n	8003d1a <cleanup_stdio+0x1e>
 8003d14:	4620      	mov	r0, r4
 8003d16:	f000 fe07 	bl	8004928 <_fflush_r>
 8003d1a:	68e1      	ldr	r1, [r4, #12]
 8003d1c:	4b06      	ldr	r3, [pc, #24]	@ (8003d38 <cleanup_stdio+0x3c>)
 8003d1e:	4299      	cmp	r1, r3
 8003d20:	d004      	beq.n	8003d2c <cleanup_stdio+0x30>
 8003d22:	4620      	mov	r0, r4
 8003d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d28:	f000 bdfe 	b.w	8004928 <_fflush_r>
 8003d2c:	bd10      	pop	{r4, pc}
 8003d2e:	bf00      	nop
 8003d30:	20000408 	.word	0x20000408
 8003d34:	20000470 	.word	0x20000470
 8003d38:	200004d8 	.word	0x200004d8

08003d3c <global_stdio_init.part.0>:
 8003d3c:	b510      	push	{r4, lr}
 8003d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8003d6c <global_stdio_init.part.0+0x30>)
 8003d40:	4c0b      	ldr	r4, [pc, #44]	@ (8003d70 <global_stdio_init.part.0+0x34>)
 8003d42:	4a0c      	ldr	r2, [pc, #48]	@ (8003d74 <global_stdio_init.part.0+0x38>)
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	4620      	mov	r0, r4
 8003d48:	2200      	movs	r2, #0
 8003d4a:	2104      	movs	r1, #4
 8003d4c:	f7ff ff94 	bl	8003c78 <std>
 8003d50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003d54:	2201      	movs	r2, #1
 8003d56:	2109      	movs	r1, #9
 8003d58:	f7ff ff8e 	bl	8003c78 <std>
 8003d5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003d60:	2202      	movs	r2, #2
 8003d62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d66:	2112      	movs	r1, #18
 8003d68:	f7ff bf86 	b.w	8003c78 <std>
 8003d6c:	20000540 	.word	0x20000540
 8003d70:	20000408 	.word	0x20000408
 8003d74:	08003ce5 	.word	0x08003ce5

08003d78 <__sfp_lock_acquire>:
 8003d78:	4801      	ldr	r0, [pc, #4]	@ (8003d80 <__sfp_lock_acquire+0x8>)
 8003d7a:	f000 b94a 	b.w	8004012 <__retarget_lock_acquire_recursive>
 8003d7e:	bf00      	nop
 8003d80:	20000549 	.word	0x20000549

08003d84 <__sfp_lock_release>:
 8003d84:	4801      	ldr	r0, [pc, #4]	@ (8003d8c <__sfp_lock_release+0x8>)
 8003d86:	f000 b945 	b.w	8004014 <__retarget_lock_release_recursive>
 8003d8a:	bf00      	nop
 8003d8c:	20000549 	.word	0x20000549

08003d90 <__sinit>:
 8003d90:	b510      	push	{r4, lr}
 8003d92:	4604      	mov	r4, r0
 8003d94:	f7ff fff0 	bl	8003d78 <__sfp_lock_acquire>
 8003d98:	6a23      	ldr	r3, [r4, #32]
 8003d9a:	b11b      	cbz	r3, 8003da4 <__sinit+0x14>
 8003d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003da0:	f7ff bff0 	b.w	8003d84 <__sfp_lock_release>
 8003da4:	4b04      	ldr	r3, [pc, #16]	@ (8003db8 <__sinit+0x28>)
 8003da6:	6223      	str	r3, [r4, #32]
 8003da8:	4b04      	ldr	r3, [pc, #16]	@ (8003dbc <__sinit+0x2c>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1f5      	bne.n	8003d9c <__sinit+0xc>
 8003db0:	f7ff ffc4 	bl	8003d3c <global_stdio_init.part.0>
 8003db4:	e7f2      	b.n	8003d9c <__sinit+0xc>
 8003db6:	bf00      	nop
 8003db8:	08003cfd 	.word	0x08003cfd
 8003dbc:	20000540 	.word	0x20000540

08003dc0 <_fwalk_sglue>:
 8003dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003dc4:	4607      	mov	r7, r0
 8003dc6:	4688      	mov	r8, r1
 8003dc8:	4614      	mov	r4, r2
 8003dca:	2600      	movs	r6, #0
 8003dcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003dd0:	f1b9 0901 	subs.w	r9, r9, #1
 8003dd4:	d505      	bpl.n	8003de2 <_fwalk_sglue+0x22>
 8003dd6:	6824      	ldr	r4, [r4, #0]
 8003dd8:	2c00      	cmp	r4, #0
 8003dda:	d1f7      	bne.n	8003dcc <_fwalk_sglue+0xc>
 8003ddc:	4630      	mov	r0, r6
 8003dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003de2:	89ab      	ldrh	r3, [r5, #12]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d907      	bls.n	8003df8 <_fwalk_sglue+0x38>
 8003de8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003dec:	3301      	adds	r3, #1
 8003dee:	d003      	beq.n	8003df8 <_fwalk_sglue+0x38>
 8003df0:	4629      	mov	r1, r5
 8003df2:	4638      	mov	r0, r7
 8003df4:	47c0      	blx	r8
 8003df6:	4306      	orrs	r6, r0
 8003df8:	3568      	adds	r5, #104	@ 0x68
 8003dfa:	e7e9      	b.n	8003dd0 <_fwalk_sglue+0x10>

08003dfc <siprintf>:
 8003dfc:	b40e      	push	{r1, r2, r3}
 8003dfe:	b500      	push	{lr}
 8003e00:	b09c      	sub	sp, #112	@ 0x70
 8003e02:	ab1d      	add	r3, sp, #116	@ 0x74
 8003e04:	9002      	str	r0, [sp, #8]
 8003e06:	9006      	str	r0, [sp, #24]
 8003e08:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003e0c:	4809      	ldr	r0, [pc, #36]	@ (8003e34 <siprintf+0x38>)
 8003e0e:	9107      	str	r1, [sp, #28]
 8003e10:	9104      	str	r1, [sp, #16]
 8003e12:	4909      	ldr	r1, [pc, #36]	@ (8003e38 <siprintf+0x3c>)
 8003e14:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e18:	9105      	str	r1, [sp, #20]
 8003e1a:	6800      	ldr	r0, [r0, #0]
 8003e1c:	9301      	str	r3, [sp, #4]
 8003e1e:	a902      	add	r1, sp, #8
 8003e20:	f000 fa74 	bl	800430c <_svfiprintf_r>
 8003e24:	9b02      	ldr	r3, [sp, #8]
 8003e26:	2200      	movs	r2, #0
 8003e28:	701a      	strb	r2, [r3, #0]
 8003e2a:	b01c      	add	sp, #112	@ 0x70
 8003e2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e30:	b003      	add	sp, #12
 8003e32:	4770      	bx	lr
 8003e34:	20000018 	.word	0x20000018
 8003e38:	ffff0208 	.word	0xffff0208

08003e3c <__sread>:
 8003e3c:	b510      	push	{r4, lr}
 8003e3e:	460c      	mov	r4, r1
 8003e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e44:	f000 f896 	bl	8003f74 <_read_r>
 8003e48:	2800      	cmp	r0, #0
 8003e4a:	bfab      	itete	ge
 8003e4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003e4e:	89a3      	ldrhlt	r3, [r4, #12]
 8003e50:	181b      	addge	r3, r3, r0
 8003e52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003e56:	bfac      	ite	ge
 8003e58:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003e5a:	81a3      	strhlt	r3, [r4, #12]
 8003e5c:	bd10      	pop	{r4, pc}

08003e5e <__swrite>:
 8003e5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e62:	461f      	mov	r7, r3
 8003e64:	898b      	ldrh	r3, [r1, #12]
 8003e66:	05db      	lsls	r3, r3, #23
 8003e68:	4605      	mov	r5, r0
 8003e6a:	460c      	mov	r4, r1
 8003e6c:	4616      	mov	r6, r2
 8003e6e:	d505      	bpl.n	8003e7c <__swrite+0x1e>
 8003e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e74:	2302      	movs	r3, #2
 8003e76:	2200      	movs	r2, #0
 8003e78:	f000 f86a 	bl	8003f50 <_lseek_r>
 8003e7c:	89a3      	ldrh	r3, [r4, #12]
 8003e7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e86:	81a3      	strh	r3, [r4, #12]
 8003e88:	4632      	mov	r2, r6
 8003e8a:	463b      	mov	r3, r7
 8003e8c:	4628      	mov	r0, r5
 8003e8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e92:	f000 b881 	b.w	8003f98 <_write_r>

08003e96 <__sseek>:
 8003e96:	b510      	push	{r4, lr}
 8003e98:	460c      	mov	r4, r1
 8003e9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e9e:	f000 f857 	bl	8003f50 <_lseek_r>
 8003ea2:	1c43      	adds	r3, r0, #1
 8003ea4:	89a3      	ldrh	r3, [r4, #12]
 8003ea6:	bf15      	itete	ne
 8003ea8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003eaa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003eae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003eb2:	81a3      	strheq	r3, [r4, #12]
 8003eb4:	bf18      	it	ne
 8003eb6:	81a3      	strhne	r3, [r4, #12]
 8003eb8:	bd10      	pop	{r4, pc}

08003eba <__sclose>:
 8003eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ebe:	f000 b825 	b.w	8003f0c <_close_r>

08003ec2 <memset>:
 8003ec2:	4402      	add	r2, r0
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d100      	bne.n	8003ecc <memset+0xa>
 8003eca:	4770      	bx	lr
 8003ecc:	f803 1b01 	strb.w	r1, [r3], #1
 8003ed0:	e7f9      	b.n	8003ec6 <memset+0x4>
	...

08003ed4 <time>:
 8003ed4:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 8003ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8003f08 <time+0x34>)
 8003ed8:	f04f 36ff 	mov.w	r6, #4294967295
 8003edc:	f04f 37ff 	mov.w	r7, #4294967295
 8003ee0:	4669      	mov	r1, sp
 8003ee2:	4604      	mov	r4, r0
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	6818      	ldr	r0, [r3, #0]
 8003ee8:	e9cd 6700 	strd	r6, r7, [sp]
 8003eec:	f000 f81e 	bl	8003f2c <_gettimeofday_r>
 8003ef0:	2800      	cmp	r0, #0
 8003ef2:	bfb8      	it	lt
 8003ef4:	e9cd 6700 	strdlt	r6, r7, [sp]
 8003ef8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003efc:	b10c      	cbz	r4, 8003f02 <time+0x2e>
 8003efe:	e9c4 0100 	strd	r0, r1, [r4]
 8003f02:	b004      	add	sp, #16
 8003f04:	bdd0      	pop	{r4, r6, r7, pc}
 8003f06:	bf00      	nop
 8003f08:	20000018 	.word	0x20000018

08003f0c <_close_r>:
 8003f0c:	b538      	push	{r3, r4, r5, lr}
 8003f0e:	4d06      	ldr	r5, [pc, #24]	@ (8003f28 <_close_r+0x1c>)
 8003f10:	2300      	movs	r3, #0
 8003f12:	4604      	mov	r4, r0
 8003f14:	4608      	mov	r0, r1
 8003f16:	602b      	str	r3, [r5, #0]
 8003f18:	f7fd f9f2 	bl	8001300 <_close>
 8003f1c:	1c43      	adds	r3, r0, #1
 8003f1e:	d102      	bne.n	8003f26 <_close_r+0x1a>
 8003f20:	682b      	ldr	r3, [r5, #0]
 8003f22:	b103      	cbz	r3, 8003f26 <_close_r+0x1a>
 8003f24:	6023      	str	r3, [r4, #0]
 8003f26:	bd38      	pop	{r3, r4, r5, pc}
 8003f28:	20000544 	.word	0x20000544

08003f2c <_gettimeofday_r>:
 8003f2c:	b538      	push	{r3, r4, r5, lr}
 8003f2e:	4d07      	ldr	r5, [pc, #28]	@ (8003f4c <_gettimeofday_r+0x20>)
 8003f30:	2300      	movs	r3, #0
 8003f32:	4604      	mov	r4, r0
 8003f34:	4608      	mov	r0, r1
 8003f36:	4611      	mov	r1, r2
 8003f38:	602b      	str	r3, [r5, #0]
 8003f3a:	f001 f841 	bl	8004fc0 <_gettimeofday>
 8003f3e:	1c43      	adds	r3, r0, #1
 8003f40:	d102      	bne.n	8003f48 <_gettimeofday_r+0x1c>
 8003f42:	682b      	ldr	r3, [r5, #0]
 8003f44:	b103      	cbz	r3, 8003f48 <_gettimeofday_r+0x1c>
 8003f46:	6023      	str	r3, [r4, #0]
 8003f48:	bd38      	pop	{r3, r4, r5, pc}
 8003f4a:	bf00      	nop
 8003f4c:	20000544 	.word	0x20000544

08003f50 <_lseek_r>:
 8003f50:	b538      	push	{r3, r4, r5, lr}
 8003f52:	4d07      	ldr	r5, [pc, #28]	@ (8003f70 <_lseek_r+0x20>)
 8003f54:	4604      	mov	r4, r0
 8003f56:	4608      	mov	r0, r1
 8003f58:	4611      	mov	r1, r2
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	602a      	str	r2, [r5, #0]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	f7fd f9f5 	bl	800134e <_lseek>
 8003f64:	1c43      	adds	r3, r0, #1
 8003f66:	d102      	bne.n	8003f6e <_lseek_r+0x1e>
 8003f68:	682b      	ldr	r3, [r5, #0]
 8003f6a:	b103      	cbz	r3, 8003f6e <_lseek_r+0x1e>
 8003f6c:	6023      	str	r3, [r4, #0]
 8003f6e:	bd38      	pop	{r3, r4, r5, pc}
 8003f70:	20000544 	.word	0x20000544

08003f74 <_read_r>:
 8003f74:	b538      	push	{r3, r4, r5, lr}
 8003f76:	4d07      	ldr	r5, [pc, #28]	@ (8003f94 <_read_r+0x20>)
 8003f78:	4604      	mov	r4, r0
 8003f7a:	4608      	mov	r0, r1
 8003f7c:	4611      	mov	r1, r2
 8003f7e:	2200      	movs	r2, #0
 8003f80:	602a      	str	r2, [r5, #0]
 8003f82:	461a      	mov	r2, r3
 8003f84:	f7fd f983 	bl	800128e <_read>
 8003f88:	1c43      	adds	r3, r0, #1
 8003f8a:	d102      	bne.n	8003f92 <_read_r+0x1e>
 8003f8c:	682b      	ldr	r3, [r5, #0]
 8003f8e:	b103      	cbz	r3, 8003f92 <_read_r+0x1e>
 8003f90:	6023      	str	r3, [r4, #0]
 8003f92:	bd38      	pop	{r3, r4, r5, pc}
 8003f94:	20000544 	.word	0x20000544

08003f98 <_write_r>:
 8003f98:	b538      	push	{r3, r4, r5, lr}
 8003f9a:	4d07      	ldr	r5, [pc, #28]	@ (8003fb8 <_write_r+0x20>)
 8003f9c:	4604      	mov	r4, r0
 8003f9e:	4608      	mov	r0, r1
 8003fa0:	4611      	mov	r1, r2
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	602a      	str	r2, [r5, #0]
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	f7fd f98e 	bl	80012c8 <_write>
 8003fac:	1c43      	adds	r3, r0, #1
 8003fae:	d102      	bne.n	8003fb6 <_write_r+0x1e>
 8003fb0:	682b      	ldr	r3, [r5, #0]
 8003fb2:	b103      	cbz	r3, 8003fb6 <_write_r+0x1e>
 8003fb4:	6023      	str	r3, [r4, #0]
 8003fb6:	bd38      	pop	{r3, r4, r5, pc}
 8003fb8:	20000544 	.word	0x20000544

08003fbc <__errno>:
 8003fbc:	4b01      	ldr	r3, [pc, #4]	@ (8003fc4 <__errno+0x8>)
 8003fbe:	6818      	ldr	r0, [r3, #0]
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	20000018 	.word	0x20000018

08003fc8 <__libc_init_array>:
 8003fc8:	b570      	push	{r4, r5, r6, lr}
 8003fca:	4d0d      	ldr	r5, [pc, #52]	@ (8004000 <__libc_init_array+0x38>)
 8003fcc:	4c0d      	ldr	r4, [pc, #52]	@ (8004004 <__libc_init_array+0x3c>)
 8003fce:	1b64      	subs	r4, r4, r5
 8003fd0:	10a4      	asrs	r4, r4, #2
 8003fd2:	2600      	movs	r6, #0
 8003fd4:	42a6      	cmp	r6, r4
 8003fd6:	d109      	bne.n	8003fec <__libc_init_array+0x24>
 8003fd8:	4d0b      	ldr	r5, [pc, #44]	@ (8004008 <__libc_init_array+0x40>)
 8003fda:	4c0c      	ldr	r4, [pc, #48]	@ (800400c <__libc_init_array+0x44>)
 8003fdc:	f000 fff8 	bl	8004fd0 <_init>
 8003fe0:	1b64      	subs	r4, r4, r5
 8003fe2:	10a4      	asrs	r4, r4, #2
 8003fe4:	2600      	movs	r6, #0
 8003fe6:	42a6      	cmp	r6, r4
 8003fe8:	d105      	bne.n	8003ff6 <__libc_init_array+0x2e>
 8003fea:	bd70      	pop	{r4, r5, r6, pc}
 8003fec:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ff0:	4798      	blx	r3
 8003ff2:	3601      	adds	r6, #1
 8003ff4:	e7ee      	b.n	8003fd4 <__libc_init_array+0xc>
 8003ff6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ffa:	4798      	blx	r3
 8003ffc:	3601      	adds	r6, #1
 8003ffe:	e7f2      	b.n	8003fe6 <__libc_init_array+0x1e>
 8004000:	08005114 	.word	0x08005114
 8004004:	08005114 	.word	0x08005114
 8004008:	08005114 	.word	0x08005114
 800400c:	08005118 	.word	0x08005118

08004010 <__retarget_lock_init_recursive>:
 8004010:	4770      	bx	lr

08004012 <__retarget_lock_acquire_recursive>:
 8004012:	4770      	bx	lr

08004014 <__retarget_lock_release_recursive>:
 8004014:	4770      	bx	lr
	...

08004018 <__assert_func>:
 8004018:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800401a:	4614      	mov	r4, r2
 800401c:	461a      	mov	r2, r3
 800401e:	4b09      	ldr	r3, [pc, #36]	@ (8004044 <__assert_func+0x2c>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4605      	mov	r5, r0
 8004024:	68d8      	ldr	r0, [r3, #12]
 8004026:	b954      	cbnz	r4, 800403e <__assert_func+0x26>
 8004028:	4b07      	ldr	r3, [pc, #28]	@ (8004048 <__assert_func+0x30>)
 800402a:	461c      	mov	r4, r3
 800402c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004030:	9100      	str	r1, [sp, #0]
 8004032:	462b      	mov	r3, r5
 8004034:	4905      	ldr	r1, [pc, #20]	@ (800404c <__assert_func+0x34>)
 8004036:	f000 fc9f 	bl	8004978 <fiprintf>
 800403a:	f000 fce7 	bl	8004a0c <abort>
 800403e:	4b04      	ldr	r3, [pc, #16]	@ (8004050 <__assert_func+0x38>)
 8004040:	e7f4      	b.n	800402c <__assert_func+0x14>
 8004042:	bf00      	nop
 8004044:	20000018 	.word	0x20000018
 8004048:	080050d6 	.word	0x080050d6
 800404c:	080050a8 	.word	0x080050a8
 8004050:	0800509b 	.word	0x0800509b

08004054 <_free_r>:
 8004054:	b538      	push	{r3, r4, r5, lr}
 8004056:	4605      	mov	r5, r0
 8004058:	2900      	cmp	r1, #0
 800405a:	d041      	beq.n	80040e0 <_free_r+0x8c>
 800405c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004060:	1f0c      	subs	r4, r1, #4
 8004062:	2b00      	cmp	r3, #0
 8004064:	bfb8      	it	lt
 8004066:	18e4      	addlt	r4, r4, r3
 8004068:	f000 f8e8 	bl	800423c <__malloc_lock>
 800406c:	4a1d      	ldr	r2, [pc, #116]	@ (80040e4 <_free_r+0x90>)
 800406e:	6813      	ldr	r3, [r2, #0]
 8004070:	b933      	cbnz	r3, 8004080 <_free_r+0x2c>
 8004072:	6063      	str	r3, [r4, #4]
 8004074:	6014      	str	r4, [r2, #0]
 8004076:	4628      	mov	r0, r5
 8004078:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800407c:	f000 b8e4 	b.w	8004248 <__malloc_unlock>
 8004080:	42a3      	cmp	r3, r4
 8004082:	d908      	bls.n	8004096 <_free_r+0x42>
 8004084:	6820      	ldr	r0, [r4, #0]
 8004086:	1821      	adds	r1, r4, r0
 8004088:	428b      	cmp	r3, r1
 800408a:	bf01      	itttt	eq
 800408c:	6819      	ldreq	r1, [r3, #0]
 800408e:	685b      	ldreq	r3, [r3, #4]
 8004090:	1809      	addeq	r1, r1, r0
 8004092:	6021      	streq	r1, [r4, #0]
 8004094:	e7ed      	b.n	8004072 <_free_r+0x1e>
 8004096:	461a      	mov	r2, r3
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	b10b      	cbz	r3, 80040a0 <_free_r+0x4c>
 800409c:	42a3      	cmp	r3, r4
 800409e:	d9fa      	bls.n	8004096 <_free_r+0x42>
 80040a0:	6811      	ldr	r1, [r2, #0]
 80040a2:	1850      	adds	r0, r2, r1
 80040a4:	42a0      	cmp	r0, r4
 80040a6:	d10b      	bne.n	80040c0 <_free_r+0x6c>
 80040a8:	6820      	ldr	r0, [r4, #0]
 80040aa:	4401      	add	r1, r0
 80040ac:	1850      	adds	r0, r2, r1
 80040ae:	4283      	cmp	r3, r0
 80040b0:	6011      	str	r1, [r2, #0]
 80040b2:	d1e0      	bne.n	8004076 <_free_r+0x22>
 80040b4:	6818      	ldr	r0, [r3, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	6053      	str	r3, [r2, #4]
 80040ba:	4408      	add	r0, r1
 80040bc:	6010      	str	r0, [r2, #0]
 80040be:	e7da      	b.n	8004076 <_free_r+0x22>
 80040c0:	d902      	bls.n	80040c8 <_free_r+0x74>
 80040c2:	230c      	movs	r3, #12
 80040c4:	602b      	str	r3, [r5, #0]
 80040c6:	e7d6      	b.n	8004076 <_free_r+0x22>
 80040c8:	6820      	ldr	r0, [r4, #0]
 80040ca:	1821      	adds	r1, r4, r0
 80040cc:	428b      	cmp	r3, r1
 80040ce:	bf04      	itt	eq
 80040d0:	6819      	ldreq	r1, [r3, #0]
 80040d2:	685b      	ldreq	r3, [r3, #4]
 80040d4:	6063      	str	r3, [r4, #4]
 80040d6:	bf04      	itt	eq
 80040d8:	1809      	addeq	r1, r1, r0
 80040da:	6021      	streq	r1, [r4, #0]
 80040dc:	6054      	str	r4, [r2, #4]
 80040de:	e7ca      	b.n	8004076 <_free_r+0x22>
 80040e0:	bd38      	pop	{r3, r4, r5, pc}
 80040e2:	bf00      	nop
 80040e4:	20000550 	.word	0x20000550

080040e8 <malloc>:
 80040e8:	4b02      	ldr	r3, [pc, #8]	@ (80040f4 <malloc+0xc>)
 80040ea:	4601      	mov	r1, r0
 80040ec:	6818      	ldr	r0, [r3, #0]
 80040ee:	f000 b825 	b.w	800413c <_malloc_r>
 80040f2:	bf00      	nop
 80040f4:	20000018 	.word	0x20000018

080040f8 <sbrk_aligned>:
 80040f8:	b570      	push	{r4, r5, r6, lr}
 80040fa:	4e0f      	ldr	r6, [pc, #60]	@ (8004138 <sbrk_aligned+0x40>)
 80040fc:	460c      	mov	r4, r1
 80040fe:	6831      	ldr	r1, [r6, #0]
 8004100:	4605      	mov	r5, r0
 8004102:	b911      	cbnz	r1, 800410a <sbrk_aligned+0x12>
 8004104:	f000 fc64 	bl	80049d0 <_sbrk_r>
 8004108:	6030      	str	r0, [r6, #0]
 800410a:	4621      	mov	r1, r4
 800410c:	4628      	mov	r0, r5
 800410e:	f000 fc5f 	bl	80049d0 <_sbrk_r>
 8004112:	1c43      	adds	r3, r0, #1
 8004114:	d103      	bne.n	800411e <sbrk_aligned+0x26>
 8004116:	f04f 34ff 	mov.w	r4, #4294967295
 800411a:	4620      	mov	r0, r4
 800411c:	bd70      	pop	{r4, r5, r6, pc}
 800411e:	1cc4      	adds	r4, r0, #3
 8004120:	f024 0403 	bic.w	r4, r4, #3
 8004124:	42a0      	cmp	r0, r4
 8004126:	d0f8      	beq.n	800411a <sbrk_aligned+0x22>
 8004128:	1a21      	subs	r1, r4, r0
 800412a:	4628      	mov	r0, r5
 800412c:	f000 fc50 	bl	80049d0 <_sbrk_r>
 8004130:	3001      	adds	r0, #1
 8004132:	d1f2      	bne.n	800411a <sbrk_aligned+0x22>
 8004134:	e7ef      	b.n	8004116 <sbrk_aligned+0x1e>
 8004136:	bf00      	nop
 8004138:	2000054c 	.word	0x2000054c

0800413c <_malloc_r>:
 800413c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004140:	1ccd      	adds	r5, r1, #3
 8004142:	f025 0503 	bic.w	r5, r5, #3
 8004146:	3508      	adds	r5, #8
 8004148:	2d0c      	cmp	r5, #12
 800414a:	bf38      	it	cc
 800414c:	250c      	movcc	r5, #12
 800414e:	2d00      	cmp	r5, #0
 8004150:	4606      	mov	r6, r0
 8004152:	db01      	blt.n	8004158 <_malloc_r+0x1c>
 8004154:	42a9      	cmp	r1, r5
 8004156:	d904      	bls.n	8004162 <_malloc_r+0x26>
 8004158:	230c      	movs	r3, #12
 800415a:	6033      	str	r3, [r6, #0]
 800415c:	2000      	movs	r0, #0
 800415e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004162:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004238 <_malloc_r+0xfc>
 8004166:	f000 f869 	bl	800423c <__malloc_lock>
 800416a:	f8d8 3000 	ldr.w	r3, [r8]
 800416e:	461c      	mov	r4, r3
 8004170:	bb44      	cbnz	r4, 80041c4 <_malloc_r+0x88>
 8004172:	4629      	mov	r1, r5
 8004174:	4630      	mov	r0, r6
 8004176:	f7ff ffbf 	bl	80040f8 <sbrk_aligned>
 800417a:	1c43      	adds	r3, r0, #1
 800417c:	4604      	mov	r4, r0
 800417e:	d158      	bne.n	8004232 <_malloc_r+0xf6>
 8004180:	f8d8 4000 	ldr.w	r4, [r8]
 8004184:	4627      	mov	r7, r4
 8004186:	2f00      	cmp	r7, #0
 8004188:	d143      	bne.n	8004212 <_malloc_r+0xd6>
 800418a:	2c00      	cmp	r4, #0
 800418c:	d04b      	beq.n	8004226 <_malloc_r+0xea>
 800418e:	6823      	ldr	r3, [r4, #0]
 8004190:	4639      	mov	r1, r7
 8004192:	4630      	mov	r0, r6
 8004194:	eb04 0903 	add.w	r9, r4, r3
 8004198:	f000 fc1a 	bl	80049d0 <_sbrk_r>
 800419c:	4581      	cmp	r9, r0
 800419e:	d142      	bne.n	8004226 <_malloc_r+0xea>
 80041a0:	6821      	ldr	r1, [r4, #0]
 80041a2:	1a6d      	subs	r5, r5, r1
 80041a4:	4629      	mov	r1, r5
 80041a6:	4630      	mov	r0, r6
 80041a8:	f7ff ffa6 	bl	80040f8 <sbrk_aligned>
 80041ac:	3001      	adds	r0, #1
 80041ae:	d03a      	beq.n	8004226 <_malloc_r+0xea>
 80041b0:	6823      	ldr	r3, [r4, #0]
 80041b2:	442b      	add	r3, r5
 80041b4:	6023      	str	r3, [r4, #0]
 80041b6:	f8d8 3000 	ldr.w	r3, [r8]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	bb62      	cbnz	r2, 8004218 <_malloc_r+0xdc>
 80041be:	f8c8 7000 	str.w	r7, [r8]
 80041c2:	e00f      	b.n	80041e4 <_malloc_r+0xa8>
 80041c4:	6822      	ldr	r2, [r4, #0]
 80041c6:	1b52      	subs	r2, r2, r5
 80041c8:	d420      	bmi.n	800420c <_malloc_r+0xd0>
 80041ca:	2a0b      	cmp	r2, #11
 80041cc:	d917      	bls.n	80041fe <_malloc_r+0xc2>
 80041ce:	1961      	adds	r1, r4, r5
 80041d0:	42a3      	cmp	r3, r4
 80041d2:	6025      	str	r5, [r4, #0]
 80041d4:	bf18      	it	ne
 80041d6:	6059      	strne	r1, [r3, #4]
 80041d8:	6863      	ldr	r3, [r4, #4]
 80041da:	bf08      	it	eq
 80041dc:	f8c8 1000 	streq.w	r1, [r8]
 80041e0:	5162      	str	r2, [r4, r5]
 80041e2:	604b      	str	r3, [r1, #4]
 80041e4:	4630      	mov	r0, r6
 80041e6:	f000 f82f 	bl	8004248 <__malloc_unlock>
 80041ea:	f104 000b 	add.w	r0, r4, #11
 80041ee:	1d23      	adds	r3, r4, #4
 80041f0:	f020 0007 	bic.w	r0, r0, #7
 80041f4:	1ac2      	subs	r2, r0, r3
 80041f6:	bf1c      	itt	ne
 80041f8:	1a1b      	subne	r3, r3, r0
 80041fa:	50a3      	strne	r3, [r4, r2]
 80041fc:	e7af      	b.n	800415e <_malloc_r+0x22>
 80041fe:	6862      	ldr	r2, [r4, #4]
 8004200:	42a3      	cmp	r3, r4
 8004202:	bf0c      	ite	eq
 8004204:	f8c8 2000 	streq.w	r2, [r8]
 8004208:	605a      	strne	r2, [r3, #4]
 800420a:	e7eb      	b.n	80041e4 <_malloc_r+0xa8>
 800420c:	4623      	mov	r3, r4
 800420e:	6864      	ldr	r4, [r4, #4]
 8004210:	e7ae      	b.n	8004170 <_malloc_r+0x34>
 8004212:	463c      	mov	r4, r7
 8004214:	687f      	ldr	r7, [r7, #4]
 8004216:	e7b6      	b.n	8004186 <_malloc_r+0x4a>
 8004218:	461a      	mov	r2, r3
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	42a3      	cmp	r3, r4
 800421e:	d1fb      	bne.n	8004218 <_malloc_r+0xdc>
 8004220:	2300      	movs	r3, #0
 8004222:	6053      	str	r3, [r2, #4]
 8004224:	e7de      	b.n	80041e4 <_malloc_r+0xa8>
 8004226:	230c      	movs	r3, #12
 8004228:	6033      	str	r3, [r6, #0]
 800422a:	4630      	mov	r0, r6
 800422c:	f000 f80c 	bl	8004248 <__malloc_unlock>
 8004230:	e794      	b.n	800415c <_malloc_r+0x20>
 8004232:	6005      	str	r5, [r0, #0]
 8004234:	e7d6      	b.n	80041e4 <_malloc_r+0xa8>
 8004236:	bf00      	nop
 8004238:	20000550 	.word	0x20000550

0800423c <__malloc_lock>:
 800423c:	4801      	ldr	r0, [pc, #4]	@ (8004244 <__malloc_lock+0x8>)
 800423e:	f7ff bee8 	b.w	8004012 <__retarget_lock_acquire_recursive>
 8004242:	bf00      	nop
 8004244:	20000548 	.word	0x20000548

08004248 <__malloc_unlock>:
 8004248:	4801      	ldr	r0, [pc, #4]	@ (8004250 <__malloc_unlock+0x8>)
 800424a:	f7ff bee3 	b.w	8004014 <__retarget_lock_release_recursive>
 800424e:	bf00      	nop
 8004250:	20000548 	.word	0x20000548

08004254 <__ssputs_r>:
 8004254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004258:	688e      	ldr	r6, [r1, #8]
 800425a:	461f      	mov	r7, r3
 800425c:	42be      	cmp	r6, r7
 800425e:	680b      	ldr	r3, [r1, #0]
 8004260:	4682      	mov	sl, r0
 8004262:	460c      	mov	r4, r1
 8004264:	4690      	mov	r8, r2
 8004266:	d82d      	bhi.n	80042c4 <__ssputs_r+0x70>
 8004268:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800426c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004270:	d026      	beq.n	80042c0 <__ssputs_r+0x6c>
 8004272:	6965      	ldr	r5, [r4, #20]
 8004274:	6909      	ldr	r1, [r1, #16]
 8004276:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800427a:	eba3 0901 	sub.w	r9, r3, r1
 800427e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004282:	1c7b      	adds	r3, r7, #1
 8004284:	444b      	add	r3, r9
 8004286:	106d      	asrs	r5, r5, #1
 8004288:	429d      	cmp	r5, r3
 800428a:	bf38      	it	cc
 800428c:	461d      	movcc	r5, r3
 800428e:	0553      	lsls	r3, r2, #21
 8004290:	d527      	bpl.n	80042e2 <__ssputs_r+0x8e>
 8004292:	4629      	mov	r1, r5
 8004294:	f7ff ff52 	bl	800413c <_malloc_r>
 8004298:	4606      	mov	r6, r0
 800429a:	b360      	cbz	r0, 80042f6 <__ssputs_r+0xa2>
 800429c:	6921      	ldr	r1, [r4, #16]
 800429e:	464a      	mov	r2, r9
 80042a0:	f000 fba6 	bl	80049f0 <memcpy>
 80042a4:	89a3      	ldrh	r3, [r4, #12]
 80042a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80042aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042ae:	81a3      	strh	r3, [r4, #12]
 80042b0:	6126      	str	r6, [r4, #16]
 80042b2:	6165      	str	r5, [r4, #20]
 80042b4:	444e      	add	r6, r9
 80042b6:	eba5 0509 	sub.w	r5, r5, r9
 80042ba:	6026      	str	r6, [r4, #0]
 80042bc:	60a5      	str	r5, [r4, #8]
 80042be:	463e      	mov	r6, r7
 80042c0:	42be      	cmp	r6, r7
 80042c2:	d900      	bls.n	80042c6 <__ssputs_r+0x72>
 80042c4:	463e      	mov	r6, r7
 80042c6:	6820      	ldr	r0, [r4, #0]
 80042c8:	4632      	mov	r2, r6
 80042ca:	4641      	mov	r1, r8
 80042cc:	f000 fb66 	bl	800499c <memmove>
 80042d0:	68a3      	ldr	r3, [r4, #8]
 80042d2:	1b9b      	subs	r3, r3, r6
 80042d4:	60a3      	str	r3, [r4, #8]
 80042d6:	6823      	ldr	r3, [r4, #0]
 80042d8:	4433      	add	r3, r6
 80042da:	6023      	str	r3, [r4, #0]
 80042dc:	2000      	movs	r0, #0
 80042de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042e2:	462a      	mov	r2, r5
 80042e4:	f000 fb99 	bl	8004a1a <_realloc_r>
 80042e8:	4606      	mov	r6, r0
 80042ea:	2800      	cmp	r0, #0
 80042ec:	d1e0      	bne.n	80042b0 <__ssputs_r+0x5c>
 80042ee:	6921      	ldr	r1, [r4, #16]
 80042f0:	4650      	mov	r0, sl
 80042f2:	f7ff feaf 	bl	8004054 <_free_r>
 80042f6:	230c      	movs	r3, #12
 80042f8:	f8ca 3000 	str.w	r3, [sl]
 80042fc:	89a3      	ldrh	r3, [r4, #12]
 80042fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004302:	81a3      	strh	r3, [r4, #12]
 8004304:	f04f 30ff 	mov.w	r0, #4294967295
 8004308:	e7e9      	b.n	80042de <__ssputs_r+0x8a>
	...

0800430c <_svfiprintf_r>:
 800430c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004310:	4698      	mov	r8, r3
 8004312:	898b      	ldrh	r3, [r1, #12]
 8004314:	061b      	lsls	r3, r3, #24
 8004316:	b09d      	sub	sp, #116	@ 0x74
 8004318:	4607      	mov	r7, r0
 800431a:	460d      	mov	r5, r1
 800431c:	4614      	mov	r4, r2
 800431e:	d510      	bpl.n	8004342 <_svfiprintf_r+0x36>
 8004320:	690b      	ldr	r3, [r1, #16]
 8004322:	b973      	cbnz	r3, 8004342 <_svfiprintf_r+0x36>
 8004324:	2140      	movs	r1, #64	@ 0x40
 8004326:	f7ff ff09 	bl	800413c <_malloc_r>
 800432a:	6028      	str	r0, [r5, #0]
 800432c:	6128      	str	r0, [r5, #16]
 800432e:	b930      	cbnz	r0, 800433e <_svfiprintf_r+0x32>
 8004330:	230c      	movs	r3, #12
 8004332:	603b      	str	r3, [r7, #0]
 8004334:	f04f 30ff 	mov.w	r0, #4294967295
 8004338:	b01d      	add	sp, #116	@ 0x74
 800433a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800433e:	2340      	movs	r3, #64	@ 0x40
 8004340:	616b      	str	r3, [r5, #20]
 8004342:	2300      	movs	r3, #0
 8004344:	9309      	str	r3, [sp, #36]	@ 0x24
 8004346:	2320      	movs	r3, #32
 8004348:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800434c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004350:	2330      	movs	r3, #48	@ 0x30
 8004352:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80044f0 <_svfiprintf_r+0x1e4>
 8004356:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800435a:	f04f 0901 	mov.w	r9, #1
 800435e:	4623      	mov	r3, r4
 8004360:	469a      	mov	sl, r3
 8004362:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004366:	b10a      	cbz	r2, 800436c <_svfiprintf_r+0x60>
 8004368:	2a25      	cmp	r2, #37	@ 0x25
 800436a:	d1f9      	bne.n	8004360 <_svfiprintf_r+0x54>
 800436c:	ebba 0b04 	subs.w	fp, sl, r4
 8004370:	d00b      	beq.n	800438a <_svfiprintf_r+0x7e>
 8004372:	465b      	mov	r3, fp
 8004374:	4622      	mov	r2, r4
 8004376:	4629      	mov	r1, r5
 8004378:	4638      	mov	r0, r7
 800437a:	f7ff ff6b 	bl	8004254 <__ssputs_r>
 800437e:	3001      	adds	r0, #1
 8004380:	f000 80a7 	beq.w	80044d2 <_svfiprintf_r+0x1c6>
 8004384:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004386:	445a      	add	r2, fp
 8004388:	9209      	str	r2, [sp, #36]	@ 0x24
 800438a:	f89a 3000 	ldrb.w	r3, [sl]
 800438e:	2b00      	cmp	r3, #0
 8004390:	f000 809f 	beq.w	80044d2 <_svfiprintf_r+0x1c6>
 8004394:	2300      	movs	r3, #0
 8004396:	f04f 32ff 	mov.w	r2, #4294967295
 800439a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800439e:	f10a 0a01 	add.w	sl, sl, #1
 80043a2:	9304      	str	r3, [sp, #16]
 80043a4:	9307      	str	r3, [sp, #28]
 80043a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80043aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80043ac:	4654      	mov	r4, sl
 80043ae:	2205      	movs	r2, #5
 80043b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043b4:	484e      	ldr	r0, [pc, #312]	@ (80044f0 <_svfiprintf_r+0x1e4>)
 80043b6:	f7fb ff13 	bl	80001e0 <memchr>
 80043ba:	9a04      	ldr	r2, [sp, #16]
 80043bc:	b9d8      	cbnz	r0, 80043f6 <_svfiprintf_r+0xea>
 80043be:	06d0      	lsls	r0, r2, #27
 80043c0:	bf44      	itt	mi
 80043c2:	2320      	movmi	r3, #32
 80043c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80043c8:	0711      	lsls	r1, r2, #28
 80043ca:	bf44      	itt	mi
 80043cc:	232b      	movmi	r3, #43	@ 0x2b
 80043ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80043d2:	f89a 3000 	ldrb.w	r3, [sl]
 80043d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80043d8:	d015      	beq.n	8004406 <_svfiprintf_r+0xfa>
 80043da:	9a07      	ldr	r2, [sp, #28]
 80043dc:	4654      	mov	r4, sl
 80043de:	2000      	movs	r0, #0
 80043e0:	f04f 0c0a 	mov.w	ip, #10
 80043e4:	4621      	mov	r1, r4
 80043e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043ea:	3b30      	subs	r3, #48	@ 0x30
 80043ec:	2b09      	cmp	r3, #9
 80043ee:	d94b      	bls.n	8004488 <_svfiprintf_r+0x17c>
 80043f0:	b1b0      	cbz	r0, 8004420 <_svfiprintf_r+0x114>
 80043f2:	9207      	str	r2, [sp, #28]
 80043f4:	e014      	b.n	8004420 <_svfiprintf_r+0x114>
 80043f6:	eba0 0308 	sub.w	r3, r0, r8
 80043fa:	fa09 f303 	lsl.w	r3, r9, r3
 80043fe:	4313      	orrs	r3, r2
 8004400:	9304      	str	r3, [sp, #16]
 8004402:	46a2      	mov	sl, r4
 8004404:	e7d2      	b.n	80043ac <_svfiprintf_r+0xa0>
 8004406:	9b03      	ldr	r3, [sp, #12]
 8004408:	1d19      	adds	r1, r3, #4
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	9103      	str	r1, [sp, #12]
 800440e:	2b00      	cmp	r3, #0
 8004410:	bfbb      	ittet	lt
 8004412:	425b      	neglt	r3, r3
 8004414:	f042 0202 	orrlt.w	r2, r2, #2
 8004418:	9307      	strge	r3, [sp, #28]
 800441a:	9307      	strlt	r3, [sp, #28]
 800441c:	bfb8      	it	lt
 800441e:	9204      	strlt	r2, [sp, #16]
 8004420:	7823      	ldrb	r3, [r4, #0]
 8004422:	2b2e      	cmp	r3, #46	@ 0x2e
 8004424:	d10a      	bne.n	800443c <_svfiprintf_r+0x130>
 8004426:	7863      	ldrb	r3, [r4, #1]
 8004428:	2b2a      	cmp	r3, #42	@ 0x2a
 800442a:	d132      	bne.n	8004492 <_svfiprintf_r+0x186>
 800442c:	9b03      	ldr	r3, [sp, #12]
 800442e:	1d1a      	adds	r2, r3, #4
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	9203      	str	r2, [sp, #12]
 8004434:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004438:	3402      	adds	r4, #2
 800443a:	9305      	str	r3, [sp, #20]
 800443c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004500 <_svfiprintf_r+0x1f4>
 8004440:	7821      	ldrb	r1, [r4, #0]
 8004442:	2203      	movs	r2, #3
 8004444:	4650      	mov	r0, sl
 8004446:	f7fb fecb 	bl	80001e0 <memchr>
 800444a:	b138      	cbz	r0, 800445c <_svfiprintf_r+0x150>
 800444c:	9b04      	ldr	r3, [sp, #16]
 800444e:	eba0 000a 	sub.w	r0, r0, sl
 8004452:	2240      	movs	r2, #64	@ 0x40
 8004454:	4082      	lsls	r2, r0
 8004456:	4313      	orrs	r3, r2
 8004458:	3401      	adds	r4, #1
 800445a:	9304      	str	r3, [sp, #16]
 800445c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004460:	4824      	ldr	r0, [pc, #144]	@ (80044f4 <_svfiprintf_r+0x1e8>)
 8004462:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004466:	2206      	movs	r2, #6
 8004468:	f7fb feba 	bl	80001e0 <memchr>
 800446c:	2800      	cmp	r0, #0
 800446e:	d036      	beq.n	80044de <_svfiprintf_r+0x1d2>
 8004470:	4b21      	ldr	r3, [pc, #132]	@ (80044f8 <_svfiprintf_r+0x1ec>)
 8004472:	bb1b      	cbnz	r3, 80044bc <_svfiprintf_r+0x1b0>
 8004474:	9b03      	ldr	r3, [sp, #12]
 8004476:	3307      	adds	r3, #7
 8004478:	f023 0307 	bic.w	r3, r3, #7
 800447c:	3308      	adds	r3, #8
 800447e:	9303      	str	r3, [sp, #12]
 8004480:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004482:	4433      	add	r3, r6
 8004484:	9309      	str	r3, [sp, #36]	@ 0x24
 8004486:	e76a      	b.n	800435e <_svfiprintf_r+0x52>
 8004488:	fb0c 3202 	mla	r2, ip, r2, r3
 800448c:	460c      	mov	r4, r1
 800448e:	2001      	movs	r0, #1
 8004490:	e7a8      	b.n	80043e4 <_svfiprintf_r+0xd8>
 8004492:	2300      	movs	r3, #0
 8004494:	3401      	adds	r4, #1
 8004496:	9305      	str	r3, [sp, #20]
 8004498:	4619      	mov	r1, r3
 800449a:	f04f 0c0a 	mov.w	ip, #10
 800449e:	4620      	mov	r0, r4
 80044a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044a4:	3a30      	subs	r2, #48	@ 0x30
 80044a6:	2a09      	cmp	r2, #9
 80044a8:	d903      	bls.n	80044b2 <_svfiprintf_r+0x1a6>
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d0c6      	beq.n	800443c <_svfiprintf_r+0x130>
 80044ae:	9105      	str	r1, [sp, #20]
 80044b0:	e7c4      	b.n	800443c <_svfiprintf_r+0x130>
 80044b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80044b6:	4604      	mov	r4, r0
 80044b8:	2301      	movs	r3, #1
 80044ba:	e7f0      	b.n	800449e <_svfiprintf_r+0x192>
 80044bc:	ab03      	add	r3, sp, #12
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	462a      	mov	r2, r5
 80044c2:	4b0e      	ldr	r3, [pc, #56]	@ (80044fc <_svfiprintf_r+0x1f0>)
 80044c4:	a904      	add	r1, sp, #16
 80044c6:	4638      	mov	r0, r7
 80044c8:	f3af 8000 	nop.w
 80044cc:	1c42      	adds	r2, r0, #1
 80044ce:	4606      	mov	r6, r0
 80044d0:	d1d6      	bne.n	8004480 <_svfiprintf_r+0x174>
 80044d2:	89ab      	ldrh	r3, [r5, #12]
 80044d4:	065b      	lsls	r3, r3, #25
 80044d6:	f53f af2d 	bmi.w	8004334 <_svfiprintf_r+0x28>
 80044da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80044dc:	e72c      	b.n	8004338 <_svfiprintf_r+0x2c>
 80044de:	ab03      	add	r3, sp, #12
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	462a      	mov	r2, r5
 80044e4:	4b05      	ldr	r3, [pc, #20]	@ (80044fc <_svfiprintf_r+0x1f0>)
 80044e6:	a904      	add	r1, sp, #16
 80044e8:	4638      	mov	r0, r7
 80044ea:	f000 f879 	bl	80045e0 <_printf_i>
 80044ee:	e7ed      	b.n	80044cc <_svfiprintf_r+0x1c0>
 80044f0:	080050d7 	.word	0x080050d7
 80044f4:	080050e1 	.word	0x080050e1
 80044f8:	00000000 	.word	0x00000000
 80044fc:	08004255 	.word	0x08004255
 8004500:	080050dd 	.word	0x080050dd

08004504 <_printf_common>:
 8004504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004508:	4616      	mov	r6, r2
 800450a:	4698      	mov	r8, r3
 800450c:	688a      	ldr	r2, [r1, #8]
 800450e:	690b      	ldr	r3, [r1, #16]
 8004510:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004514:	4293      	cmp	r3, r2
 8004516:	bfb8      	it	lt
 8004518:	4613      	movlt	r3, r2
 800451a:	6033      	str	r3, [r6, #0]
 800451c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004520:	4607      	mov	r7, r0
 8004522:	460c      	mov	r4, r1
 8004524:	b10a      	cbz	r2, 800452a <_printf_common+0x26>
 8004526:	3301      	adds	r3, #1
 8004528:	6033      	str	r3, [r6, #0]
 800452a:	6823      	ldr	r3, [r4, #0]
 800452c:	0699      	lsls	r1, r3, #26
 800452e:	bf42      	ittt	mi
 8004530:	6833      	ldrmi	r3, [r6, #0]
 8004532:	3302      	addmi	r3, #2
 8004534:	6033      	strmi	r3, [r6, #0]
 8004536:	6825      	ldr	r5, [r4, #0]
 8004538:	f015 0506 	ands.w	r5, r5, #6
 800453c:	d106      	bne.n	800454c <_printf_common+0x48>
 800453e:	f104 0a19 	add.w	sl, r4, #25
 8004542:	68e3      	ldr	r3, [r4, #12]
 8004544:	6832      	ldr	r2, [r6, #0]
 8004546:	1a9b      	subs	r3, r3, r2
 8004548:	42ab      	cmp	r3, r5
 800454a:	dc26      	bgt.n	800459a <_printf_common+0x96>
 800454c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004550:	6822      	ldr	r2, [r4, #0]
 8004552:	3b00      	subs	r3, #0
 8004554:	bf18      	it	ne
 8004556:	2301      	movne	r3, #1
 8004558:	0692      	lsls	r2, r2, #26
 800455a:	d42b      	bmi.n	80045b4 <_printf_common+0xb0>
 800455c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004560:	4641      	mov	r1, r8
 8004562:	4638      	mov	r0, r7
 8004564:	47c8      	blx	r9
 8004566:	3001      	adds	r0, #1
 8004568:	d01e      	beq.n	80045a8 <_printf_common+0xa4>
 800456a:	6823      	ldr	r3, [r4, #0]
 800456c:	6922      	ldr	r2, [r4, #16]
 800456e:	f003 0306 	and.w	r3, r3, #6
 8004572:	2b04      	cmp	r3, #4
 8004574:	bf02      	ittt	eq
 8004576:	68e5      	ldreq	r5, [r4, #12]
 8004578:	6833      	ldreq	r3, [r6, #0]
 800457a:	1aed      	subeq	r5, r5, r3
 800457c:	68a3      	ldr	r3, [r4, #8]
 800457e:	bf0c      	ite	eq
 8004580:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004584:	2500      	movne	r5, #0
 8004586:	4293      	cmp	r3, r2
 8004588:	bfc4      	itt	gt
 800458a:	1a9b      	subgt	r3, r3, r2
 800458c:	18ed      	addgt	r5, r5, r3
 800458e:	2600      	movs	r6, #0
 8004590:	341a      	adds	r4, #26
 8004592:	42b5      	cmp	r5, r6
 8004594:	d11a      	bne.n	80045cc <_printf_common+0xc8>
 8004596:	2000      	movs	r0, #0
 8004598:	e008      	b.n	80045ac <_printf_common+0xa8>
 800459a:	2301      	movs	r3, #1
 800459c:	4652      	mov	r2, sl
 800459e:	4641      	mov	r1, r8
 80045a0:	4638      	mov	r0, r7
 80045a2:	47c8      	blx	r9
 80045a4:	3001      	adds	r0, #1
 80045a6:	d103      	bne.n	80045b0 <_printf_common+0xac>
 80045a8:	f04f 30ff 	mov.w	r0, #4294967295
 80045ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045b0:	3501      	adds	r5, #1
 80045b2:	e7c6      	b.n	8004542 <_printf_common+0x3e>
 80045b4:	18e1      	adds	r1, r4, r3
 80045b6:	1c5a      	adds	r2, r3, #1
 80045b8:	2030      	movs	r0, #48	@ 0x30
 80045ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80045be:	4422      	add	r2, r4
 80045c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80045c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80045c8:	3302      	adds	r3, #2
 80045ca:	e7c7      	b.n	800455c <_printf_common+0x58>
 80045cc:	2301      	movs	r3, #1
 80045ce:	4622      	mov	r2, r4
 80045d0:	4641      	mov	r1, r8
 80045d2:	4638      	mov	r0, r7
 80045d4:	47c8      	blx	r9
 80045d6:	3001      	adds	r0, #1
 80045d8:	d0e6      	beq.n	80045a8 <_printf_common+0xa4>
 80045da:	3601      	adds	r6, #1
 80045dc:	e7d9      	b.n	8004592 <_printf_common+0x8e>
	...

080045e0 <_printf_i>:
 80045e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045e4:	7e0f      	ldrb	r7, [r1, #24]
 80045e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80045e8:	2f78      	cmp	r7, #120	@ 0x78
 80045ea:	4691      	mov	r9, r2
 80045ec:	4680      	mov	r8, r0
 80045ee:	460c      	mov	r4, r1
 80045f0:	469a      	mov	sl, r3
 80045f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80045f6:	d807      	bhi.n	8004608 <_printf_i+0x28>
 80045f8:	2f62      	cmp	r7, #98	@ 0x62
 80045fa:	d80a      	bhi.n	8004612 <_printf_i+0x32>
 80045fc:	2f00      	cmp	r7, #0
 80045fe:	f000 80d2 	beq.w	80047a6 <_printf_i+0x1c6>
 8004602:	2f58      	cmp	r7, #88	@ 0x58
 8004604:	f000 80b9 	beq.w	800477a <_printf_i+0x19a>
 8004608:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800460c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004610:	e03a      	b.n	8004688 <_printf_i+0xa8>
 8004612:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004616:	2b15      	cmp	r3, #21
 8004618:	d8f6      	bhi.n	8004608 <_printf_i+0x28>
 800461a:	a101      	add	r1, pc, #4	@ (adr r1, 8004620 <_printf_i+0x40>)
 800461c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004620:	08004679 	.word	0x08004679
 8004624:	0800468d 	.word	0x0800468d
 8004628:	08004609 	.word	0x08004609
 800462c:	08004609 	.word	0x08004609
 8004630:	08004609 	.word	0x08004609
 8004634:	08004609 	.word	0x08004609
 8004638:	0800468d 	.word	0x0800468d
 800463c:	08004609 	.word	0x08004609
 8004640:	08004609 	.word	0x08004609
 8004644:	08004609 	.word	0x08004609
 8004648:	08004609 	.word	0x08004609
 800464c:	0800478d 	.word	0x0800478d
 8004650:	080046b7 	.word	0x080046b7
 8004654:	08004747 	.word	0x08004747
 8004658:	08004609 	.word	0x08004609
 800465c:	08004609 	.word	0x08004609
 8004660:	080047af 	.word	0x080047af
 8004664:	08004609 	.word	0x08004609
 8004668:	080046b7 	.word	0x080046b7
 800466c:	08004609 	.word	0x08004609
 8004670:	08004609 	.word	0x08004609
 8004674:	0800474f 	.word	0x0800474f
 8004678:	6833      	ldr	r3, [r6, #0]
 800467a:	1d1a      	adds	r2, r3, #4
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6032      	str	r2, [r6, #0]
 8004680:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004684:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004688:	2301      	movs	r3, #1
 800468a:	e09d      	b.n	80047c8 <_printf_i+0x1e8>
 800468c:	6833      	ldr	r3, [r6, #0]
 800468e:	6820      	ldr	r0, [r4, #0]
 8004690:	1d19      	adds	r1, r3, #4
 8004692:	6031      	str	r1, [r6, #0]
 8004694:	0606      	lsls	r6, r0, #24
 8004696:	d501      	bpl.n	800469c <_printf_i+0xbc>
 8004698:	681d      	ldr	r5, [r3, #0]
 800469a:	e003      	b.n	80046a4 <_printf_i+0xc4>
 800469c:	0645      	lsls	r5, r0, #25
 800469e:	d5fb      	bpl.n	8004698 <_printf_i+0xb8>
 80046a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80046a4:	2d00      	cmp	r5, #0
 80046a6:	da03      	bge.n	80046b0 <_printf_i+0xd0>
 80046a8:	232d      	movs	r3, #45	@ 0x2d
 80046aa:	426d      	negs	r5, r5
 80046ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046b0:	4859      	ldr	r0, [pc, #356]	@ (8004818 <_printf_i+0x238>)
 80046b2:	230a      	movs	r3, #10
 80046b4:	e011      	b.n	80046da <_printf_i+0xfa>
 80046b6:	6821      	ldr	r1, [r4, #0]
 80046b8:	6833      	ldr	r3, [r6, #0]
 80046ba:	0608      	lsls	r0, r1, #24
 80046bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80046c0:	d402      	bmi.n	80046c8 <_printf_i+0xe8>
 80046c2:	0649      	lsls	r1, r1, #25
 80046c4:	bf48      	it	mi
 80046c6:	b2ad      	uxthmi	r5, r5
 80046c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80046ca:	4853      	ldr	r0, [pc, #332]	@ (8004818 <_printf_i+0x238>)
 80046cc:	6033      	str	r3, [r6, #0]
 80046ce:	bf14      	ite	ne
 80046d0:	230a      	movne	r3, #10
 80046d2:	2308      	moveq	r3, #8
 80046d4:	2100      	movs	r1, #0
 80046d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80046da:	6866      	ldr	r6, [r4, #4]
 80046dc:	60a6      	str	r6, [r4, #8]
 80046de:	2e00      	cmp	r6, #0
 80046e0:	bfa2      	ittt	ge
 80046e2:	6821      	ldrge	r1, [r4, #0]
 80046e4:	f021 0104 	bicge.w	r1, r1, #4
 80046e8:	6021      	strge	r1, [r4, #0]
 80046ea:	b90d      	cbnz	r5, 80046f0 <_printf_i+0x110>
 80046ec:	2e00      	cmp	r6, #0
 80046ee:	d04b      	beq.n	8004788 <_printf_i+0x1a8>
 80046f0:	4616      	mov	r6, r2
 80046f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80046f6:	fb03 5711 	mls	r7, r3, r1, r5
 80046fa:	5dc7      	ldrb	r7, [r0, r7]
 80046fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004700:	462f      	mov	r7, r5
 8004702:	42bb      	cmp	r3, r7
 8004704:	460d      	mov	r5, r1
 8004706:	d9f4      	bls.n	80046f2 <_printf_i+0x112>
 8004708:	2b08      	cmp	r3, #8
 800470a:	d10b      	bne.n	8004724 <_printf_i+0x144>
 800470c:	6823      	ldr	r3, [r4, #0]
 800470e:	07df      	lsls	r7, r3, #31
 8004710:	d508      	bpl.n	8004724 <_printf_i+0x144>
 8004712:	6923      	ldr	r3, [r4, #16]
 8004714:	6861      	ldr	r1, [r4, #4]
 8004716:	4299      	cmp	r1, r3
 8004718:	bfde      	ittt	le
 800471a:	2330      	movle	r3, #48	@ 0x30
 800471c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004720:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004724:	1b92      	subs	r2, r2, r6
 8004726:	6122      	str	r2, [r4, #16]
 8004728:	f8cd a000 	str.w	sl, [sp]
 800472c:	464b      	mov	r3, r9
 800472e:	aa03      	add	r2, sp, #12
 8004730:	4621      	mov	r1, r4
 8004732:	4640      	mov	r0, r8
 8004734:	f7ff fee6 	bl	8004504 <_printf_common>
 8004738:	3001      	adds	r0, #1
 800473a:	d14a      	bne.n	80047d2 <_printf_i+0x1f2>
 800473c:	f04f 30ff 	mov.w	r0, #4294967295
 8004740:	b004      	add	sp, #16
 8004742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004746:	6823      	ldr	r3, [r4, #0]
 8004748:	f043 0320 	orr.w	r3, r3, #32
 800474c:	6023      	str	r3, [r4, #0]
 800474e:	4833      	ldr	r0, [pc, #204]	@ (800481c <_printf_i+0x23c>)
 8004750:	2778      	movs	r7, #120	@ 0x78
 8004752:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004756:	6823      	ldr	r3, [r4, #0]
 8004758:	6831      	ldr	r1, [r6, #0]
 800475a:	061f      	lsls	r7, r3, #24
 800475c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004760:	d402      	bmi.n	8004768 <_printf_i+0x188>
 8004762:	065f      	lsls	r7, r3, #25
 8004764:	bf48      	it	mi
 8004766:	b2ad      	uxthmi	r5, r5
 8004768:	6031      	str	r1, [r6, #0]
 800476a:	07d9      	lsls	r1, r3, #31
 800476c:	bf44      	itt	mi
 800476e:	f043 0320 	orrmi.w	r3, r3, #32
 8004772:	6023      	strmi	r3, [r4, #0]
 8004774:	b11d      	cbz	r5, 800477e <_printf_i+0x19e>
 8004776:	2310      	movs	r3, #16
 8004778:	e7ac      	b.n	80046d4 <_printf_i+0xf4>
 800477a:	4827      	ldr	r0, [pc, #156]	@ (8004818 <_printf_i+0x238>)
 800477c:	e7e9      	b.n	8004752 <_printf_i+0x172>
 800477e:	6823      	ldr	r3, [r4, #0]
 8004780:	f023 0320 	bic.w	r3, r3, #32
 8004784:	6023      	str	r3, [r4, #0]
 8004786:	e7f6      	b.n	8004776 <_printf_i+0x196>
 8004788:	4616      	mov	r6, r2
 800478a:	e7bd      	b.n	8004708 <_printf_i+0x128>
 800478c:	6833      	ldr	r3, [r6, #0]
 800478e:	6825      	ldr	r5, [r4, #0]
 8004790:	6961      	ldr	r1, [r4, #20]
 8004792:	1d18      	adds	r0, r3, #4
 8004794:	6030      	str	r0, [r6, #0]
 8004796:	062e      	lsls	r6, r5, #24
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	d501      	bpl.n	80047a0 <_printf_i+0x1c0>
 800479c:	6019      	str	r1, [r3, #0]
 800479e:	e002      	b.n	80047a6 <_printf_i+0x1c6>
 80047a0:	0668      	lsls	r0, r5, #25
 80047a2:	d5fb      	bpl.n	800479c <_printf_i+0x1bc>
 80047a4:	8019      	strh	r1, [r3, #0]
 80047a6:	2300      	movs	r3, #0
 80047a8:	6123      	str	r3, [r4, #16]
 80047aa:	4616      	mov	r6, r2
 80047ac:	e7bc      	b.n	8004728 <_printf_i+0x148>
 80047ae:	6833      	ldr	r3, [r6, #0]
 80047b0:	1d1a      	adds	r2, r3, #4
 80047b2:	6032      	str	r2, [r6, #0]
 80047b4:	681e      	ldr	r6, [r3, #0]
 80047b6:	6862      	ldr	r2, [r4, #4]
 80047b8:	2100      	movs	r1, #0
 80047ba:	4630      	mov	r0, r6
 80047bc:	f7fb fd10 	bl	80001e0 <memchr>
 80047c0:	b108      	cbz	r0, 80047c6 <_printf_i+0x1e6>
 80047c2:	1b80      	subs	r0, r0, r6
 80047c4:	6060      	str	r0, [r4, #4]
 80047c6:	6863      	ldr	r3, [r4, #4]
 80047c8:	6123      	str	r3, [r4, #16]
 80047ca:	2300      	movs	r3, #0
 80047cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047d0:	e7aa      	b.n	8004728 <_printf_i+0x148>
 80047d2:	6923      	ldr	r3, [r4, #16]
 80047d4:	4632      	mov	r2, r6
 80047d6:	4649      	mov	r1, r9
 80047d8:	4640      	mov	r0, r8
 80047da:	47d0      	blx	sl
 80047dc:	3001      	adds	r0, #1
 80047de:	d0ad      	beq.n	800473c <_printf_i+0x15c>
 80047e0:	6823      	ldr	r3, [r4, #0]
 80047e2:	079b      	lsls	r3, r3, #30
 80047e4:	d413      	bmi.n	800480e <_printf_i+0x22e>
 80047e6:	68e0      	ldr	r0, [r4, #12]
 80047e8:	9b03      	ldr	r3, [sp, #12]
 80047ea:	4298      	cmp	r0, r3
 80047ec:	bfb8      	it	lt
 80047ee:	4618      	movlt	r0, r3
 80047f0:	e7a6      	b.n	8004740 <_printf_i+0x160>
 80047f2:	2301      	movs	r3, #1
 80047f4:	4632      	mov	r2, r6
 80047f6:	4649      	mov	r1, r9
 80047f8:	4640      	mov	r0, r8
 80047fa:	47d0      	blx	sl
 80047fc:	3001      	adds	r0, #1
 80047fe:	d09d      	beq.n	800473c <_printf_i+0x15c>
 8004800:	3501      	adds	r5, #1
 8004802:	68e3      	ldr	r3, [r4, #12]
 8004804:	9903      	ldr	r1, [sp, #12]
 8004806:	1a5b      	subs	r3, r3, r1
 8004808:	42ab      	cmp	r3, r5
 800480a:	dcf2      	bgt.n	80047f2 <_printf_i+0x212>
 800480c:	e7eb      	b.n	80047e6 <_printf_i+0x206>
 800480e:	2500      	movs	r5, #0
 8004810:	f104 0619 	add.w	r6, r4, #25
 8004814:	e7f5      	b.n	8004802 <_printf_i+0x222>
 8004816:	bf00      	nop
 8004818:	080050e8 	.word	0x080050e8
 800481c:	080050f9 	.word	0x080050f9

08004820 <__sflush_r>:
 8004820:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004828:	0716      	lsls	r6, r2, #28
 800482a:	4605      	mov	r5, r0
 800482c:	460c      	mov	r4, r1
 800482e:	d454      	bmi.n	80048da <__sflush_r+0xba>
 8004830:	684b      	ldr	r3, [r1, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	dc02      	bgt.n	800483c <__sflush_r+0x1c>
 8004836:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004838:	2b00      	cmp	r3, #0
 800483a:	dd48      	ble.n	80048ce <__sflush_r+0xae>
 800483c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800483e:	2e00      	cmp	r6, #0
 8004840:	d045      	beq.n	80048ce <__sflush_r+0xae>
 8004842:	2300      	movs	r3, #0
 8004844:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004848:	682f      	ldr	r7, [r5, #0]
 800484a:	6a21      	ldr	r1, [r4, #32]
 800484c:	602b      	str	r3, [r5, #0]
 800484e:	d030      	beq.n	80048b2 <__sflush_r+0x92>
 8004850:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004852:	89a3      	ldrh	r3, [r4, #12]
 8004854:	0759      	lsls	r1, r3, #29
 8004856:	d505      	bpl.n	8004864 <__sflush_r+0x44>
 8004858:	6863      	ldr	r3, [r4, #4]
 800485a:	1ad2      	subs	r2, r2, r3
 800485c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800485e:	b10b      	cbz	r3, 8004864 <__sflush_r+0x44>
 8004860:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004862:	1ad2      	subs	r2, r2, r3
 8004864:	2300      	movs	r3, #0
 8004866:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004868:	6a21      	ldr	r1, [r4, #32]
 800486a:	4628      	mov	r0, r5
 800486c:	47b0      	blx	r6
 800486e:	1c43      	adds	r3, r0, #1
 8004870:	89a3      	ldrh	r3, [r4, #12]
 8004872:	d106      	bne.n	8004882 <__sflush_r+0x62>
 8004874:	6829      	ldr	r1, [r5, #0]
 8004876:	291d      	cmp	r1, #29
 8004878:	d82b      	bhi.n	80048d2 <__sflush_r+0xb2>
 800487a:	4a2a      	ldr	r2, [pc, #168]	@ (8004924 <__sflush_r+0x104>)
 800487c:	410a      	asrs	r2, r1
 800487e:	07d6      	lsls	r6, r2, #31
 8004880:	d427      	bmi.n	80048d2 <__sflush_r+0xb2>
 8004882:	2200      	movs	r2, #0
 8004884:	6062      	str	r2, [r4, #4]
 8004886:	04d9      	lsls	r1, r3, #19
 8004888:	6922      	ldr	r2, [r4, #16]
 800488a:	6022      	str	r2, [r4, #0]
 800488c:	d504      	bpl.n	8004898 <__sflush_r+0x78>
 800488e:	1c42      	adds	r2, r0, #1
 8004890:	d101      	bne.n	8004896 <__sflush_r+0x76>
 8004892:	682b      	ldr	r3, [r5, #0]
 8004894:	b903      	cbnz	r3, 8004898 <__sflush_r+0x78>
 8004896:	6560      	str	r0, [r4, #84]	@ 0x54
 8004898:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800489a:	602f      	str	r7, [r5, #0]
 800489c:	b1b9      	cbz	r1, 80048ce <__sflush_r+0xae>
 800489e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80048a2:	4299      	cmp	r1, r3
 80048a4:	d002      	beq.n	80048ac <__sflush_r+0x8c>
 80048a6:	4628      	mov	r0, r5
 80048a8:	f7ff fbd4 	bl	8004054 <_free_r>
 80048ac:	2300      	movs	r3, #0
 80048ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80048b0:	e00d      	b.n	80048ce <__sflush_r+0xae>
 80048b2:	2301      	movs	r3, #1
 80048b4:	4628      	mov	r0, r5
 80048b6:	47b0      	blx	r6
 80048b8:	4602      	mov	r2, r0
 80048ba:	1c50      	adds	r0, r2, #1
 80048bc:	d1c9      	bne.n	8004852 <__sflush_r+0x32>
 80048be:	682b      	ldr	r3, [r5, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d0c6      	beq.n	8004852 <__sflush_r+0x32>
 80048c4:	2b1d      	cmp	r3, #29
 80048c6:	d001      	beq.n	80048cc <__sflush_r+0xac>
 80048c8:	2b16      	cmp	r3, #22
 80048ca:	d11e      	bne.n	800490a <__sflush_r+0xea>
 80048cc:	602f      	str	r7, [r5, #0]
 80048ce:	2000      	movs	r0, #0
 80048d0:	e022      	b.n	8004918 <__sflush_r+0xf8>
 80048d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048d6:	b21b      	sxth	r3, r3
 80048d8:	e01b      	b.n	8004912 <__sflush_r+0xf2>
 80048da:	690f      	ldr	r7, [r1, #16]
 80048dc:	2f00      	cmp	r7, #0
 80048de:	d0f6      	beq.n	80048ce <__sflush_r+0xae>
 80048e0:	0793      	lsls	r3, r2, #30
 80048e2:	680e      	ldr	r6, [r1, #0]
 80048e4:	bf08      	it	eq
 80048e6:	694b      	ldreq	r3, [r1, #20]
 80048e8:	600f      	str	r7, [r1, #0]
 80048ea:	bf18      	it	ne
 80048ec:	2300      	movne	r3, #0
 80048ee:	eba6 0807 	sub.w	r8, r6, r7
 80048f2:	608b      	str	r3, [r1, #8]
 80048f4:	f1b8 0f00 	cmp.w	r8, #0
 80048f8:	dde9      	ble.n	80048ce <__sflush_r+0xae>
 80048fa:	6a21      	ldr	r1, [r4, #32]
 80048fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80048fe:	4643      	mov	r3, r8
 8004900:	463a      	mov	r2, r7
 8004902:	4628      	mov	r0, r5
 8004904:	47b0      	blx	r6
 8004906:	2800      	cmp	r0, #0
 8004908:	dc08      	bgt.n	800491c <__sflush_r+0xfc>
 800490a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800490e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004912:	81a3      	strh	r3, [r4, #12]
 8004914:	f04f 30ff 	mov.w	r0, #4294967295
 8004918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800491c:	4407      	add	r7, r0
 800491e:	eba8 0800 	sub.w	r8, r8, r0
 8004922:	e7e7      	b.n	80048f4 <__sflush_r+0xd4>
 8004924:	dfbffffe 	.word	0xdfbffffe

08004928 <_fflush_r>:
 8004928:	b538      	push	{r3, r4, r5, lr}
 800492a:	690b      	ldr	r3, [r1, #16]
 800492c:	4605      	mov	r5, r0
 800492e:	460c      	mov	r4, r1
 8004930:	b913      	cbnz	r3, 8004938 <_fflush_r+0x10>
 8004932:	2500      	movs	r5, #0
 8004934:	4628      	mov	r0, r5
 8004936:	bd38      	pop	{r3, r4, r5, pc}
 8004938:	b118      	cbz	r0, 8004942 <_fflush_r+0x1a>
 800493a:	6a03      	ldr	r3, [r0, #32]
 800493c:	b90b      	cbnz	r3, 8004942 <_fflush_r+0x1a>
 800493e:	f7ff fa27 	bl	8003d90 <__sinit>
 8004942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d0f3      	beq.n	8004932 <_fflush_r+0xa>
 800494a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800494c:	07d0      	lsls	r0, r2, #31
 800494e:	d404      	bmi.n	800495a <_fflush_r+0x32>
 8004950:	0599      	lsls	r1, r3, #22
 8004952:	d402      	bmi.n	800495a <_fflush_r+0x32>
 8004954:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004956:	f7ff fb5c 	bl	8004012 <__retarget_lock_acquire_recursive>
 800495a:	4628      	mov	r0, r5
 800495c:	4621      	mov	r1, r4
 800495e:	f7ff ff5f 	bl	8004820 <__sflush_r>
 8004962:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004964:	07da      	lsls	r2, r3, #31
 8004966:	4605      	mov	r5, r0
 8004968:	d4e4      	bmi.n	8004934 <_fflush_r+0xc>
 800496a:	89a3      	ldrh	r3, [r4, #12]
 800496c:	059b      	lsls	r3, r3, #22
 800496e:	d4e1      	bmi.n	8004934 <_fflush_r+0xc>
 8004970:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004972:	f7ff fb4f 	bl	8004014 <__retarget_lock_release_recursive>
 8004976:	e7dd      	b.n	8004934 <_fflush_r+0xc>

08004978 <fiprintf>:
 8004978:	b40e      	push	{r1, r2, r3}
 800497a:	b503      	push	{r0, r1, lr}
 800497c:	4601      	mov	r1, r0
 800497e:	ab03      	add	r3, sp, #12
 8004980:	4805      	ldr	r0, [pc, #20]	@ (8004998 <fiprintf+0x20>)
 8004982:	f853 2b04 	ldr.w	r2, [r3], #4
 8004986:	6800      	ldr	r0, [r0, #0]
 8004988:	9301      	str	r3, [sp, #4]
 800498a:	f000 f89d 	bl	8004ac8 <_vfiprintf_r>
 800498e:	b002      	add	sp, #8
 8004990:	f85d eb04 	ldr.w	lr, [sp], #4
 8004994:	b003      	add	sp, #12
 8004996:	4770      	bx	lr
 8004998:	20000018 	.word	0x20000018

0800499c <memmove>:
 800499c:	4288      	cmp	r0, r1
 800499e:	b510      	push	{r4, lr}
 80049a0:	eb01 0402 	add.w	r4, r1, r2
 80049a4:	d902      	bls.n	80049ac <memmove+0x10>
 80049a6:	4284      	cmp	r4, r0
 80049a8:	4623      	mov	r3, r4
 80049aa:	d807      	bhi.n	80049bc <memmove+0x20>
 80049ac:	1e43      	subs	r3, r0, #1
 80049ae:	42a1      	cmp	r1, r4
 80049b0:	d008      	beq.n	80049c4 <memmove+0x28>
 80049b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80049ba:	e7f8      	b.n	80049ae <memmove+0x12>
 80049bc:	4402      	add	r2, r0
 80049be:	4601      	mov	r1, r0
 80049c0:	428a      	cmp	r2, r1
 80049c2:	d100      	bne.n	80049c6 <memmove+0x2a>
 80049c4:	bd10      	pop	{r4, pc}
 80049c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80049ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80049ce:	e7f7      	b.n	80049c0 <memmove+0x24>

080049d0 <_sbrk_r>:
 80049d0:	b538      	push	{r3, r4, r5, lr}
 80049d2:	4d06      	ldr	r5, [pc, #24]	@ (80049ec <_sbrk_r+0x1c>)
 80049d4:	2300      	movs	r3, #0
 80049d6:	4604      	mov	r4, r0
 80049d8:	4608      	mov	r0, r1
 80049da:	602b      	str	r3, [r5, #0]
 80049dc:	f7fc fcc4 	bl	8001368 <_sbrk>
 80049e0:	1c43      	adds	r3, r0, #1
 80049e2:	d102      	bne.n	80049ea <_sbrk_r+0x1a>
 80049e4:	682b      	ldr	r3, [r5, #0]
 80049e6:	b103      	cbz	r3, 80049ea <_sbrk_r+0x1a>
 80049e8:	6023      	str	r3, [r4, #0]
 80049ea:	bd38      	pop	{r3, r4, r5, pc}
 80049ec:	20000544 	.word	0x20000544

080049f0 <memcpy>:
 80049f0:	440a      	add	r2, r1
 80049f2:	4291      	cmp	r1, r2
 80049f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80049f8:	d100      	bne.n	80049fc <memcpy+0xc>
 80049fa:	4770      	bx	lr
 80049fc:	b510      	push	{r4, lr}
 80049fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a06:	4291      	cmp	r1, r2
 8004a08:	d1f9      	bne.n	80049fe <memcpy+0xe>
 8004a0a:	bd10      	pop	{r4, pc}

08004a0c <abort>:
 8004a0c:	b508      	push	{r3, lr}
 8004a0e:	2006      	movs	r0, #6
 8004a10:	f000 fa2e 	bl	8004e70 <raise>
 8004a14:	2001      	movs	r0, #1
 8004a16:	f7fc fc2f 	bl	8001278 <_exit>

08004a1a <_realloc_r>:
 8004a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a1e:	4680      	mov	r8, r0
 8004a20:	4615      	mov	r5, r2
 8004a22:	460c      	mov	r4, r1
 8004a24:	b921      	cbnz	r1, 8004a30 <_realloc_r+0x16>
 8004a26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a2a:	4611      	mov	r1, r2
 8004a2c:	f7ff bb86 	b.w	800413c <_malloc_r>
 8004a30:	b92a      	cbnz	r2, 8004a3e <_realloc_r+0x24>
 8004a32:	f7ff fb0f 	bl	8004054 <_free_r>
 8004a36:	2400      	movs	r4, #0
 8004a38:	4620      	mov	r0, r4
 8004a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a3e:	f000 fa33 	bl	8004ea8 <_malloc_usable_size_r>
 8004a42:	4285      	cmp	r5, r0
 8004a44:	4606      	mov	r6, r0
 8004a46:	d802      	bhi.n	8004a4e <_realloc_r+0x34>
 8004a48:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004a4c:	d8f4      	bhi.n	8004a38 <_realloc_r+0x1e>
 8004a4e:	4629      	mov	r1, r5
 8004a50:	4640      	mov	r0, r8
 8004a52:	f7ff fb73 	bl	800413c <_malloc_r>
 8004a56:	4607      	mov	r7, r0
 8004a58:	2800      	cmp	r0, #0
 8004a5a:	d0ec      	beq.n	8004a36 <_realloc_r+0x1c>
 8004a5c:	42b5      	cmp	r5, r6
 8004a5e:	462a      	mov	r2, r5
 8004a60:	4621      	mov	r1, r4
 8004a62:	bf28      	it	cs
 8004a64:	4632      	movcs	r2, r6
 8004a66:	f7ff ffc3 	bl	80049f0 <memcpy>
 8004a6a:	4621      	mov	r1, r4
 8004a6c:	4640      	mov	r0, r8
 8004a6e:	f7ff faf1 	bl	8004054 <_free_r>
 8004a72:	463c      	mov	r4, r7
 8004a74:	e7e0      	b.n	8004a38 <_realloc_r+0x1e>

08004a76 <__sfputc_r>:
 8004a76:	6893      	ldr	r3, [r2, #8]
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	b410      	push	{r4}
 8004a7e:	6093      	str	r3, [r2, #8]
 8004a80:	da08      	bge.n	8004a94 <__sfputc_r+0x1e>
 8004a82:	6994      	ldr	r4, [r2, #24]
 8004a84:	42a3      	cmp	r3, r4
 8004a86:	db01      	blt.n	8004a8c <__sfputc_r+0x16>
 8004a88:	290a      	cmp	r1, #10
 8004a8a:	d103      	bne.n	8004a94 <__sfputc_r+0x1e>
 8004a8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a90:	f000 b932 	b.w	8004cf8 <__swbuf_r>
 8004a94:	6813      	ldr	r3, [r2, #0]
 8004a96:	1c58      	adds	r0, r3, #1
 8004a98:	6010      	str	r0, [r2, #0]
 8004a9a:	7019      	strb	r1, [r3, #0]
 8004a9c:	4608      	mov	r0, r1
 8004a9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <__sfputs_r>:
 8004aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aa6:	4606      	mov	r6, r0
 8004aa8:	460f      	mov	r7, r1
 8004aaa:	4614      	mov	r4, r2
 8004aac:	18d5      	adds	r5, r2, r3
 8004aae:	42ac      	cmp	r4, r5
 8004ab0:	d101      	bne.n	8004ab6 <__sfputs_r+0x12>
 8004ab2:	2000      	movs	r0, #0
 8004ab4:	e007      	b.n	8004ac6 <__sfputs_r+0x22>
 8004ab6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004aba:	463a      	mov	r2, r7
 8004abc:	4630      	mov	r0, r6
 8004abe:	f7ff ffda 	bl	8004a76 <__sfputc_r>
 8004ac2:	1c43      	adds	r3, r0, #1
 8004ac4:	d1f3      	bne.n	8004aae <__sfputs_r+0xa>
 8004ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004ac8 <_vfiprintf_r>:
 8004ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004acc:	460d      	mov	r5, r1
 8004ace:	b09d      	sub	sp, #116	@ 0x74
 8004ad0:	4614      	mov	r4, r2
 8004ad2:	4698      	mov	r8, r3
 8004ad4:	4606      	mov	r6, r0
 8004ad6:	b118      	cbz	r0, 8004ae0 <_vfiprintf_r+0x18>
 8004ad8:	6a03      	ldr	r3, [r0, #32]
 8004ada:	b90b      	cbnz	r3, 8004ae0 <_vfiprintf_r+0x18>
 8004adc:	f7ff f958 	bl	8003d90 <__sinit>
 8004ae0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004ae2:	07d9      	lsls	r1, r3, #31
 8004ae4:	d405      	bmi.n	8004af2 <_vfiprintf_r+0x2a>
 8004ae6:	89ab      	ldrh	r3, [r5, #12]
 8004ae8:	059a      	lsls	r2, r3, #22
 8004aea:	d402      	bmi.n	8004af2 <_vfiprintf_r+0x2a>
 8004aec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004aee:	f7ff fa90 	bl	8004012 <__retarget_lock_acquire_recursive>
 8004af2:	89ab      	ldrh	r3, [r5, #12]
 8004af4:	071b      	lsls	r3, r3, #28
 8004af6:	d501      	bpl.n	8004afc <_vfiprintf_r+0x34>
 8004af8:	692b      	ldr	r3, [r5, #16]
 8004afa:	b99b      	cbnz	r3, 8004b24 <_vfiprintf_r+0x5c>
 8004afc:	4629      	mov	r1, r5
 8004afe:	4630      	mov	r0, r6
 8004b00:	f000 f938 	bl	8004d74 <__swsetup_r>
 8004b04:	b170      	cbz	r0, 8004b24 <_vfiprintf_r+0x5c>
 8004b06:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b08:	07dc      	lsls	r4, r3, #31
 8004b0a:	d504      	bpl.n	8004b16 <_vfiprintf_r+0x4e>
 8004b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b10:	b01d      	add	sp, #116	@ 0x74
 8004b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b16:	89ab      	ldrh	r3, [r5, #12]
 8004b18:	0598      	lsls	r0, r3, #22
 8004b1a:	d4f7      	bmi.n	8004b0c <_vfiprintf_r+0x44>
 8004b1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b1e:	f7ff fa79 	bl	8004014 <__retarget_lock_release_recursive>
 8004b22:	e7f3      	b.n	8004b0c <_vfiprintf_r+0x44>
 8004b24:	2300      	movs	r3, #0
 8004b26:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b28:	2320      	movs	r3, #32
 8004b2a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004b2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b32:	2330      	movs	r3, #48	@ 0x30
 8004b34:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004ce4 <_vfiprintf_r+0x21c>
 8004b38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004b3c:	f04f 0901 	mov.w	r9, #1
 8004b40:	4623      	mov	r3, r4
 8004b42:	469a      	mov	sl, r3
 8004b44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b48:	b10a      	cbz	r2, 8004b4e <_vfiprintf_r+0x86>
 8004b4a:	2a25      	cmp	r2, #37	@ 0x25
 8004b4c:	d1f9      	bne.n	8004b42 <_vfiprintf_r+0x7a>
 8004b4e:	ebba 0b04 	subs.w	fp, sl, r4
 8004b52:	d00b      	beq.n	8004b6c <_vfiprintf_r+0xa4>
 8004b54:	465b      	mov	r3, fp
 8004b56:	4622      	mov	r2, r4
 8004b58:	4629      	mov	r1, r5
 8004b5a:	4630      	mov	r0, r6
 8004b5c:	f7ff ffa2 	bl	8004aa4 <__sfputs_r>
 8004b60:	3001      	adds	r0, #1
 8004b62:	f000 80a7 	beq.w	8004cb4 <_vfiprintf_r+0x1ec>
 8004b66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004b68:	445a      	add	r2, fp
 8004b6a:	9209      	str	r2, [sp, #36]	@ 0x24
 8004b6c:	f89a 3000 	ldrb.w	r3, [sl]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 809f 	beq.w	8004cb4 <_vfiprintf_r+0x1ec>
 8004b76:	2300      	movs	r3, #0
 8004b78:	f04f 32ff 	mov.w	r2, #4294967295
 8004b7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b80:	f10a 0a01 	add.w	sl, sl, #1
 8004b84:	9304      	str	r3, [sp, #16]
 8004b86:	9307      	str	r3, [sp, #28]
 8004b88:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004b8c:	931a      	str	r3, [sp, #104]	@ 0x68
 8004b8e:	4654      	mov	r4, sl
 8004b90:	2205      	movs	r2, #5
 8004b92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b96:	4853      	ldr	r0, [pc, #332]	@ (8004ce4 <_vfiprintf_r+0x21c>)
 8004b98:	f7fb fb22 	bl	80001e0 <memchr>
 8004b9c:	9a04      	ldr	r2, [sp, #16]
 8004b9e:	b9d8      	cbnz	r0, 8004bd8 <_vfiprintf_r+0x110>
 8004ba0:	06d1      	lsls	r1, r2, #27
 8004ba2:	bf44      	itt	mi
 8004ba4:	2320      	movmi	r3, #32
 8004ba6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004baa:	0713      	lsls	r3, r2, #28
 8004bac:	bf44      	itt	mi
 8004bae:	232b      	movmi	r3, #43	@ 0x2b
 8004bb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004bb4:	f89a 3000 	ldrb.w	r3, [sl]
 8004bb8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bba:	d015      	beq.n	8004be8 <_vfiprintf_r+0x120>
 8004bbc:	9a07      	ldr	r2, [sp, #28]
 8004bbe:	4654      	mov	r4, sl
 8004bc0:	2000      	movs	r0, #0
 8004bc2:	f04f 0c0a 	mov.w	ip, #10
 8004bc6:	4621      	mov	r1, r4
 8004bc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bcc:	3b30      	subs	r3, #48	@ 0x30
 8004bce:	2b09      	cmp	r3, #9
 8004bd0:	d94b      	bls.n	8004c6a <_vfiprintf_r+0x1a2>
 8004bd2:	b1b0      	cbz	r0, 8004c02 <_vfiprintf_r+0x13a>
 8004bd4:	9207      	str	r2, [sp, #28]
 8004bd6:	e014      	b.n	8004c02 <_vfiprintf_r+0x13a>
 8004bd8:	eba0 0308 	sub.w	r3, r0, r8
 8004bdc:	fa09 f303 	lsl.w	r3, r9, r3
 8004be0:	4313      	orrs	r3, r2
 8004be2:	9304      	str	r3, [sp, #16]
 8004be4:	46a2      	mov	sl, r4
 8004be6:	e7d2      	b.n	8004b8e <_vfiprintf_r+0xc6>
 8004be8:	9b03      	ldr	r3, [sp, #12]
 8004bea:	1d19      	adds	r1, r3, #4
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	9103      	str	r1, [sp, #12]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	bfbb      	ittet	lt
 8004bf4:	425b      	neglt	r3, r3
 8004bf6:	f042 0202 	orrlt.w	r2, r2, #2
 8004bfa:	9307      	strge	r3, [sp, #28]
 8004bfc:	9307      	strlt	r3, [sp, #28]
 8004bfe:	bfb8      	it	lt
 8004c00:	9204      	strlt	r2, [sp, #16]
 8004c02:	7823      	ldrb	r3, [r4, #0]
 8004c04:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c06:	d10a      	bne.n	8004c1e <_vfiprintf_r+0x156>
 8004c08:	7863      	ldrb	r3, [r4, #1]
 8004c0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c0c:	d132      	bne.n	8004c74 <_vfiprintf_r+0x1ac>
 8004c0e:	9b03      	ldr	r3, [sp, #12]
 8004c10:	1d1a      	adds	r2, r3, #4
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	9203      	str	r2, [sp, #12]
 8004c16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004c1a:	3402      	adds	r4, #2
 8004c1c:	9305      	str	r3, [sp, #20]
 8004c1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004cf4 <_vfiprintf_r+0x22c>
 8004c22:	7821      	ldrb	r1, [r4, #0]
 8004c24:	2203      	movs	r2, #3
 8004c26:	4650      	mov	r0, sl
 8004c28:	f7fb fada 	bl	80001e0 <memchr>
 8004c2c:	b138      	cbz	r0, 8004c3e <_vfiprintf_r+0x176>
 8004c2e:	9b04      	ldr	r3, [sp, #16]
 8004c30:	eba0 000a 	sub.w	r0, r0, sl
 8004c34:	2240      	movs	r2, #64	@ 0x40
 8004c36:	4082      	lsls	r2, r0
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	3401      	adds	r4, #1
 8004c3c:	9304      	str	r3, [sp, #16]
 8004c3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c42:	4829      	ldr	r0, [pc, #164]	@ (8004ce8 <_vfiprintf_r+0x220>)
 8004c44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004c48:	2206      	movs	r2, #6
 8004c4a:	f7fb fac9 	bl	80001e0 <memchr>
 8004c4e:	2800      	cmp	r0, #0
 8004c50:	d03f      	beq.n	8004cd2 <_vfiprintf_r+0x20a>
 8004c52:	4b26      	ldr	r3, [pc, #152]	@ (8004cec <_vfiprintf_r+0x224>)
 8004c54:	bb1b      	cbnz	r3, 8004c9e <_vfiprintf_r+0x1d6>
 8004c56:	9b03      	ldr	r3, [sp, #12]
 8004c58:	3307      	adds	r3, #7
 8004c5a:	f023 0307 	bic.w	r3, r3, #7
 8004c5e:	3308      	adds	r3, #8
 8004c60:	9303      	str	r3, [sp, #12]
 8004c62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c64:	443b      	add	r3, r7
 8004c66:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c68:	e76a      	b.n	8004b40 <_vfiprintf_r+0x78>
 8004c6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c6e:	460c      	mov	r4, r1
 8004c70:	2001      	movs	r0, #1
 8004c72:	e7a8      	b.n	8004bc6 <_vfiprintf_r+0xfe>
 8004c74:	2300      	movs	r3, #0
 8004c76:	3401      	adds	r4, #1
 8004c78:	9305      	str	r3, [sp, #20]
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	f04f 0c0a 	mov.w	ip, #10
 8004c80:	4620      	mov	r0, r4
 8004c82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c86:	3a30      	subs	r2, #48	@ 0x30
 8004c88:	2a09      	cmp	r2, #9
 8004c8a:	d903      	bls.n	8004c94 <_vfiprintf_r+0x1cc>
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d0c6      	beq.n	8004c1e <_vfiprintf_r+0x156>
 8004c90:	9105      	str	r1, [sp, #20]
 8004c92:	e7c4      	b.n	8004c1e <_vfiprintf_r+0x156>
 8004c94:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c98:	4604      	mov	r4, r0
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e7f0      	b.n	8004c80 <_vfiprintf_r+0x1b8>
 8004c9e:	ab03      	add	r3, sp, #12
 8004ca0:	9300      	str	r3, [sp, #0]
 8004ca2:	462a      	mov	r2, r5
 8004ca4:	4b12      	ldr	r3, [pc, #72]	@ (8004cf0 <_vfiprintf_r+0x228>)
 8004ca6:	a904      	add	r1, sp, #16
 8004ca8:	4630      	mov	r0, r6
 8004caa:	f3af 8000 	nop.w
 8004cae:	4607      	mov	r7, r0
 8004cb0:	1c78      	adds	r0, r7, #1
 8004cb2:	d1d6      	bne.n	8004c62 <_vfiprintf_r+0x19a>
 8004cb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004cb6:	07d9      	lsls	r1, r3, #31
 8004cb8:	d405      	bmi.n	8004cc6 <_vfiprintf_r+0x1fe>
 8004cba:	89ab      	ldrh	r3, [r5, #12]
 8004cbc:	059a      	lsls	r2, r3, #22
 8004cbe:	d402      	bmi.n	8004cc6 <_vfiprintf_r+0x1fe>
 8004cc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004cc2:	f7ff f9a7 	bl	8004014 <__retarget_lock_release_recursive>
 8004cc6:	89ab      	ldrh	r3, [r5, #12]
 8004cc8:	065b      	lsls	r3, r3, #25
 8004cca:	f53f af1f 	bmi.w	8004b0c <_vfiprintf_r+0x44>
 8004cce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004cd0:	e71e      	b.n	8004b10 <_vfiprintf_r+0x48>
 8004cd2:	ab03      	add	r3, sp, #12
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	462a      	mov	r2, r5
 8004cd8:	4b05      	ldr	r3, [pc, #20]	@ (8004cf0 <_vfiprintf_r+0x228>)
 8004cda:	a904      	add	r1, sp, #16
 8004cdc:	4630      	mov	r0, r6
 8004cde:	f7ff fc7f 	bl	80045e0 <_printf_i>
 8004ce2:	e7e4      	b.n	8004cae <_vfiprintf_r+0x1e6>
 8004ce4:	080050d7 	.word	0x080050d7
 8004ce8:	080050e1 	.word	0x080050e1
 8004cec:	00000000 	.word	0x00000000
 8004cf0:	08004aa5 	.word	0x08004aa5
 8004cf4:	080050dd 	.word	0x080050dd

08004cf8 <__swbuf_r>:
 8004cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cfa:	460e      	mov	r6, r1
 8004cfc:	4614      	mov	r4, r2
 8004cfe:	4605      	mov	r5, r0
 8004d00:	b118      	cbz	r0, 8004d0a <__swbuf_r+0x12>
 8004d02:	6a03      	ldr	r3, [r0, #32]
 8004d04:	b90b      	cbnz	r3, 8004d0a <__swbuf_r+0x12>
 8004d06:	f7ff f843 	bl	8003d90 <__sinit>
 8004d0a:	69a3      	ldr	r3, [r4, #24]
 8004d0c:	60a3      	str	r3, [r4, #8]
 8004d0e:	89a3      	ldrh	r3, [r4, #12]
 8004d10:	071a      	lsls	r2, r3, #28
 8004d12:	d501      	bpl.n	8004d18 <__swbuf_r+0x20>
 8004d14:	6923      	ldr	r3, [r4, #16]
 8004d16:	b943      	cbnz	r3, 8004d2a <__swbuf_r+0x32>
 8004d18:	4621      	mov	r1, r4
 8004d1a:	4628      	mov	r0, r5
 8004d1c:	f000 f82a 	bl	8004d74 <__swsetup_r>
 8004d20:	b118      	cbz	r0, 8004d2a <__swbuf_r+0x32>
 8004d22:	f04f 37ff 	mov.w	r7, #4294967295
 8004d26:	4638      	mov	r0, r7
 8004d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d2a:	6823      	ldr	r3, [r4, #0]
 8004d2c:	6922      	ldr	r2, [r4, #16]
 8004d2e:	1a98      	subs	r0, r3, r2
 8004d30:	6963      	ldr	r3, [r4, #20]
 8004d32:	b2f6      	uxtb	r6, r6
 8004d34:	4283      	cmp	r3, r0
 8004d36:	4637      	mov	r7, r6
 8004d38:	dc05      	bgt.n	8004d46 <__swbuf_r+0x4e>
 8004d3a:	4621      	mov	r1, r4
 8004d3c:	4628      	mov	r0, r5
 8004d3e:	f7ff fdf3 	bl	8004928 <_fflush_r>
 8004d42:	2800      	cmp	r0, #0
 8004d44:	d1ed      	bne.n	8004d22 <__swbuf_r+0x2a>
 8004d46:	68a3      	ldr	r3, [r4, #8]
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	60a3      	str	r3, [r4, #8]
 8004d4c:	6823      	ldr	r3, [r4, #0]
 8004d4e:	1c5a      	adds	r2, r3, #1
 8004d50:	6022      	str	r2, [r4, #0]
 8004d52:	701e      	strb	r6, [r3, #0]
 8004d54:	6962      	ldr	r2, [r4, #20]
 8004d56:	1c43      	adds	r3, r0, #1
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d004      	beq.n	8004d66 <__swbuf_r+0x6e>
 8004d5c:	89a3      	ldrh	r3, [r4, #12]
 8004d5e:	07db      	lsls	r3, r3, #31
 8004d60:	d5e1      	bpl.n	8004d26 <__swbuf_r+0x2e>
 8004d62:	2e0a      	cmp	r6, #10
 8004d64:	d1df      	bne.n	8004d26 <__swbuf_r+0x2e>
 8004d66:	4621      	mov	r1, r4
 8004d68:	4628      	mov	r0, r5
 8004d6a:	f7ff fddd 	bl	8004928 <_fflush_r>
 8004d6e:	2800      	cmp	r0, #0
 8004d70:	d0d9      	beq.n	8004d26 <__swbuf_r+0x2e>
 8004d72:	e7d6      	b.n	8004d22 <__swbuf_r+0x2a>

08004d74 <__swsetup_r>:
 8004d74:	b538      	push	{r3, r4, r5, lr}
 8004d76:	4b29      	ldr	r3, [pc, #164]	@ (8004e1c <__swsetup_r+0xa8>)
 8004d78:	4605      	mov	r5, r0
 8004d7a:	6818      	ldr	r0, [r3, #0]
 8004d7c:	460c      	mov	r4, r1
 8004d7e:	b118      	cbz	r0, 8004d88 <__swsetup_r+0x14>
 8004d80:	6a03      	ldr	r3, [r0, #32]
 8004d82:	b90b      	cbnz	r3, 8004d88 <__swsetup_r+0x14>
 8004d84:	f7ff f804 	bl	8003d90 <__sinit>
 8004d88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d8c:	0719      	lsls	r1, r3, #28
 8004d8e:	d422      	bmi.n	8004dd6 <__swsetup_r+0x62>
 8004d90:	06da      	lsls	r2, r3, #27
 8004d92:	d407      	bmi.n	8004da4 <__swsetup_r+0x30>
 8004d94:	2209      	movs	r2, #9
 8004d96:	602a      	str	r2, [r5, #0]
 8004d98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d9c:	81a3      	strh	r3, [r4, #12]
 8004d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8004da2:	e033      	b.n	8004e0c <__swsetup_r+0x98>
 8004da4:	0758      	lsls	r0, r3, #29
 8004da6:	d512      	bpl.n	8004dce <__swsetup_r+0x5a>
 8004da8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004daa:	b141      	cbz	r1, 8004dbe <__swsetup_r+0x4a>
 8004dac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004db0:	4299      	cmp	r1, r3
 8004db2:	d002      	beq.n	8004dba <__swsetup_r+0x46>
 8004db4:	4628      	mov	r0, r5
 8004db6:	f7ff f94d 	bl	8004054 <_free_r>
 8004dba:	2300      	movs	r3, #0
 8004dbc:	6363      	str	r3, [r4, #52]	@ 0x34
 8004dbe:	89a3      	ldrh	r3, [r4, #12]
 8004dc0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004dc4:	81a3      	strh	r3, [r4, #12]
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	6063      	str	r3, [r4, #4]
 8004dca:	6923      	ldr	r3, [r4, #16]
 8004dcc:	6023      	str	r3, [r4, #0]
 8004dce:	89a3      	ldrh	r3, [r4, #12]
 8004dd0:	f043 0308 	orr.w	r3, r3, #8
 8004dd4:	81a3      	strh	r3, [r4, #12]
 8004dd6:	6923      	ldr	r3, [r4, #16]
 8004dd8:	b94b      	cbnz	r3, 8004dee <__swsetup_r+0x7a>
 8004dda:	89a3      	ldrh	r3, [r4, #12]
 8004ddc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004de0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004de4:	d003      	beq.n	8004dee <__swsetup_r+0x7a>
 8004de6:	4621      	mov	r1, r4
 8004de8:	4628      	mov	r0, r5
 8004dea:	f000 f88b 	bl	8004f04 <__smakebuf_r>
 8004dee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004df2:	f013 0201 	ands.w	r2, r3, #1
 8004df6:	d00a      	beq.n	8004e0e <__swsetup_r+0x9a>
 8004df8:	2200      	movs	r2, #0
 8004dfa:	60a2      	str	r2, [r4, #8]
 8004dfc:	6962      	ldr	r2, [r4, #20]
 8004dfe:	4252      	negs	r2, r2
 8004e00:	61a2      	str	r2, [r4, #24]
 8004e02:	6922      	ldr	r2, [r4, #16]
 8004e04:	b942      	cbnz	r2, 8004e18 <__swsetup_r+0xa4>
 8004e06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004e0a:	d1c5      	bne.n	8004d98 <__swsetup_r+0x24>
 8004e0c:	bd38      	pop	{r3, r4, r5, pc}
 8004e0e:	0799      	lsls	r1, r3, #30
 8004e10:	bf58      	it	pl
 8004e12:	6962      	ldrpl	r2, [r4, #20]
 8004e14:	60a2      	str	r2, [r4, #8]
 8004e16:	e7f4      	b.n	8004e02 <__swsetup_r+0x8e>
 8004e18:	2000      	movs	r0, #0
 8004e1a:	e7f7      	b.n	8004e0c <__swsetup_r+0x98>
 8004e1c:	20000018 	.word	0x20000018

08004e20 <_raise_r>:
 8004e20:	291f      	cmp	r1, #31
 8004e22:	b538      	push	{r3, r4, r5, lr}
 8004e24:	4605      	mov	r5, r0
 8004e26:	460c      	mov	r4, r1
 8004e28:	d904      	bls.n	8004e34 <_raise_r+0x14>
 8004e2a:	2316      	movs	r3, #22
 8004e2c:	6003      	str	r3, [r0, #0]
 8004e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e32:	bd38      	pop	{r3, r4, r5, pc}
 8004e34:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004e36:	b112      	cbz	r2, 8004e3e <_raise_r+0x1e>
 8004e38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004e3c:	b94b      	cbnz	r3, 8004e52 <_raise_r+0x32>
 8004e3e:	4628      	mov	r0, r5
 8004e40:	f000 f830 	bl	8004ea4 <_getpid_r>
 8004e44:	4622      	mov	r2, r4
 8004e46:	4601      	mov	r1, r0
 8004e48:	4628      	mov	r0, r5
 8004e4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e4e:	f000 b817 	b.w	8004e80 <_kill_r>
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d00a      	beq.n	8004e6c <_raise_r+0x4c>
 8004e56:	1c59      	adds	r1, r3, #1
 8004e58:	d103      	bne.n	8004e62 <_raise_r+0x42>
 8004e5a:	2316      	movs	r3, #22
 8004e5c:	6003      	str	r3, [r0, #0]
 8004e5e:	2001      	movs	r0, #1
 8004e60:	e7e7      	b.n	8004e32 <_raise_r+0x12>
 8004e62:	2100      	movs	r1, #0
 8004e64:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004e68:	4620      	mov	r0, r4
 8004e6a:	4798      	blx	r3
 8004e6c:	2000      	movs	r0, #0
 8004e6e:	e7e0      	b.n	8004e32 <_raise_r+0x12>

08004e70 <raise>:
 8004e70:	4b02      	ldr	r3, [pc, #8]	@ (8004e7c <raise+0xc>)
 8004e72:	4601      	mov	r1, r0
 8004e74:	6818      	ldr	r0, [r3, #0]
 8004e76:	f7ff bfd3 	b.w	8004e20 <_raise_r>
 8004e7a:	bf00      	nop
 8004e7c:	20000018 	.word	0x20000018

08004e80 <_kill_r>:
 8004e80:	b538      	push	{r3, r4, r5, lr}
 8004e82:	4d07      	ldr	r5, [pc, #28]	@ (8004ea0 <_kill_r+0x20>)
 8004e84:	2300      	movs	r3, #0
 8004e86:	4604      	mov	r4, r0
 8004e88:	4608      	mov	r0, r1
 8004e8a:	4611      	mov	r1, r2
 8004e8c:	602b      	str	r3, [r5, #0]
 8004e8e:	f7fc f9e3 	bl	8001258 <_kill>
 8004e92:	1c43      	adds	r3, r0, #1
 8004e94:	d102      	bne.n	8004e9c <_kill_r+0x1c>
 8004e96:	682b      	ldr	r3, [r5, #0]
 8004e98:	b103      	cbz	r3, 8004e9c <_kill_r+0x1c>
 8004e9a:	6023      	str	r3, [r4, #0]
 8004e9c:	bd38      	pop	{r3, r4, r5, pc}
 8004e9e:	bf00      	nop
 8004ea0:	20000544 	.word	0x20000544

08004ea4 <_getpid_r>:
 8004ea4:	f7fc b9d0 	b.w	8001248 <_getpid>

08004ea8 <_malloc_usable_size_r>:
 8004ea8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004eac:	1f18      	subs	r0, r3, #4
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	bfbc      	itt	lt
 8004eb2:	580b      	ldrlt	r3, [r1, r0]
 8004eb4:	18c0      	addlt	r0, r0, r3
 8004eb6:	4770      	bx	lr

08004eb8 <__swhatbuf_r>:
 8004eb8:	b570      	push	{r4, r5, r6, lr}
 8004eba:	460c      	mov	r4, r1
 8004ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ec0:	2900      	cmp	r1, #0
 8004ec2:	b096      	sub	sp, #88	@ 0x58
 8004ec4:	4615      	mov	r5, r2
 8004ec6:	461e      	mov	r6, r3
 8004ec8:	da0d      	bge.n	8004ee6 <__swhatbuf_r+0x2e>
 8004eca:	89a3      	ldrh	r3, [r4, #12]
 8004ecc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004ed0:	f04f 0100 	mov.w	r1, #0
 8004ed4:	bf14      	ite	ne
 8004ed6:	2340      	movne	r3, #64	@ 0x40
 8004ed8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004edc:	2000      	movs	r0, #0
 8004ede:	6031      	str	r1, [r6, #0]
 8004ee0:	602b      	str	r3, [r5, #0]
 8004ee2:	b016      	add	sp, #88	@ 0x58
 8004ee4:	bd70      	pop	{r4, r5, r6, pc}
 8004ee6:	466a      	mov	r2, sp
 8004ee8:	f000 f848 	bl	8004f7c <_fstat_r>
 8004eec:	2800      	cmp	r0, #0
 8004eee:	dbec      	blt.n	8004eca <__swhatbuf_r+0x12>
 8004ef0:	9901      	ldr	r1, [sp, #4]
 8004ef2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004ef6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004efa:	4259      	negs	r1, r3
 8004efc:	4159      	adcs	r1, r3
 8004efe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f02:	e7eb      	b.n	8004edc <__swhatbuf_r+0x24>

08004f04 <__smakebuf_r>:
 8004f04:	898b      	ldrh	r3, [r1, #12]
 8004f06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f08:	079d      	lsls	r5, r3, #30
 8004f0a:	4606      	mov	r6, r0
 8004f0c:	460c      	mov	r4, r1
 8004f0e:	d507      	bpl.n	8004f20 <__smakebuf_r+0x1c>
 8004f10:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004f14:	6023      	str	r3, [r4, #0]
 8004f16:	6123      	str	r3, [r4, #16]
 8004f18:	2301      	movs	r3, #1
 8004f1a:	6163      	str	r3, [r4, #20]
 8004f1c:	b003      	add	sp, #12
 8004f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f20:	ab01      	add	r3, sp, #4
 8004f22:	466a      	mov	r2, sp
 8004f24:	f7ff ffc8 	bl	8004eb8 <__swhatbuf_r>
 8004f28:	9f00      	ldr	r7, [sp, #0]
 8004f2a:	4605      	mov	r5, r0
 8004f2c:	4639      	mov	r1, r7
 8004f2e:	4630      	mov	r0, r6
 8004f30:	f7ff f904 	bl	800413c <_malloc_r>
 8004f34:	b948      	cbnz	r0, 8004f4a <__smakebuf_r+0x46>
 8004f36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f3a:	059a      	lsls	r2, r3, #22
 8004f3c:	d4ee      	bmi.n	8004f1c <__smakebuf_r+0x18>
 8004f3e:	f023 0303 	bic.w	r3, r3, #3
 8004f42:	f043 0302 	orr.w	r3, r3, #2
 8004f46:	81a3      	strh	r3, [r4, #12]
 8004f48:	e7e2      	b.n	8004f10 <__smakebuf_r+0xc>
 8004f4a:	89a3      	ldrh	r3, [r4, #12]
 8004f4c:	6020      	str	r0, [r4, #0]
 8004f4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f52:	81a3      	strh	r3, [r4, #12]
 8004f54:	9b01      	ldr	r3, [sp, #4]
 8004f56:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004f5a:	b15b      	cbz	r3, 8004f74 <__smakebuf_r+0x70>
 8004f5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f60:	4630      	mov	r0, r6
 8004f62:	f000 f81d 	bl	8004fa0 <_isatty_r>
 8004f66:	b128      	cbz	r0, 8004f74 <__smakebuf_r+0x70>
 8004f68:	89a3      	ldrh	r3, [r4, #12]
 8004f6a:	f023 0303 	bic.w	r3, r3, #3
 8004f6e:	f043 0301 	orr.w	r3, r3, #1
 8004f72:	81a3      	strh	r3, [r4, #12]
 8004f74:	89a3      	ldrh	r3, [r4, #12]
 8004f76:	431d      	orrs	r5, r3
 8004f78:	81a5      	strh	r5, [r4, #12]
 8004f7a:	e7cf      	b.n	8004f1c <__smakebuf_r+0x18>

08004f7c <_fstat_r>:
 8004f7c:	b538      	push	{r3, r4, r5, lr}
 8004f7e:	4d07      	ldr	r5, [pc, #28]	@ (8004f9c <_fstat_r+0x20>)
 8004f80:	2300      	movs	r3, #0
 8004f82:	4604      	mov	r4, r0
 8004f84:	4608      	mov	r0, r1
 8004f86:	4611      	mov	r1, r2
 8004f88:	602b      	str	r3, [r5, #0]
 8004f8a:	f7fc f9c5 	bl	8001318 <_fstat>
 8004f8e:	1c43      	adds	r3, r0, #1
 8004f90:	d102      	bne.n	8004f98 <_fstat_r+0x1c>
 8004f92:	682b      	ldr	r3, [r5, #0]
 8004f94:	b103      	cbz	r3, 8004f98 <_fstat_r+0x1c>
 8004f96:	6023      	str	r3, [r4, #0]
 8004f98:	bd38      	pop	{r3, r4, r5, pc}
 8004f9a:	bf00      	nop
 8004f9c:	20000544 	.word	0x20000544

08004fa0 <_isatty_r>:
 8004fa0:	b538      	push	{r3, r4, r5, lr}
 8004fa2:	4d06      	ldr	r5, [pc, #24]	@ (8004fbc <_isatty_r+0x1c>)
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	4604      	mov	r4, r0
 8004fa8:	4608      	mov	r0, r1
 8004faa:	602b      	str	r3, [r5, #0]
 8004fac:	f7fc f9c4 	bl	8001338 <_isatty>
 8004fb0:	1c43      	adds	r3, r0, #1
 8004fb2:	d102      	bne.n	8004fba <_isatty_r+0x1a>
 8004fb4:	682b      	ldr	r3, [r5, #0]
 8004fb6:	b103      	cbz	r3, 8004fba <_isatty_r+0x1a>
 8004fb8:	6023      	str	r3, [r4, #0]
 8004fba:	bd38      	pop	{r3, r4, r5, pc}
 8004fbc:	20000544 	.word	0x20000544

08004fc0 <_gettimeofday>:
 8004fc0:	4b02      	ldr	r3, [pc, #8]	@ (8004fcc <_gettimeofday+0xc>)
 8004fc2:	2258      	movs	r2, #88	@ 0x58
 8004fc4:	601a      	str	r2, [r3, #0]
 8004fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8004fca:	4770      	bx	lr
 8004fcc:	20000544 	.word	0x20000544

08004fd0 <_init>:
 8004fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fd2:	bf00      	nop
 8004fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fd6:	bc08      	pop	{r3}
 8004fd8:	469e      	mov	lr, r3
 8004fda:	4770      	bx	lr

08004fdc <_fini>:
 8004fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fde:	bf00      	nop
 8004fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fe2:	bc08      	pop	{r3}
 8004fe4:	469e      	mov	lr, r3
 8004fe6:	4770      	bx	lr
